{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/search-icon.svg","path":"images/search-icon.svg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/3mindemo.jpg","path":"images/SPRINT/3mindemo.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/interview_note.jpg","path":"images/SPRINT/interview_note.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/lightning.jpg","path":"images/SPRINT/lightning.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/testuser.jpg","path":"images/SPRINT/testuser.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/write_vote.jpg","path":"images/SPRINT/write_vote.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/示意圖1.jpg","path":"images/SPRINT/示意圖1.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/示意圖2.jpg","path":"images/SPRINT/示意圖2.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/稻草民調.jpg","path":"images/SPRINT/稻草民調.jpg","modified":1,"renderable":0},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda2.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda2.jpg","modified":1,"renderable":0},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda3.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda3.jpg","modified":1,"renderable":0},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step1.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step1.jpg","modified":1,"renderable":0},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step2.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step2.jpg","modified":1,"renderable":0},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step3.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step3.jpg","modified":1,"renderable":0},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-1.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-1.jpg","modified":1,"renderable":0},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-2.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-2.jpg","modified":1,"renderable":0},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step5.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step5.jpg","modified":1,"renderable":0},{"_id":"source/images/serverless/API-Gateway1.png","path":"images/serverless/API-Gateway1.png","modified":1,"renderable":0},{"_id":"source/images/serverless/API-Gateway3.png","path":"images/serverless/API-Gateway3.png","modified":1,"renderable":0},{"_id":"source/images/serverless/GraphAPIExplorer1.jpg","path":"images/serverless/GraphAPIExplorer1.jpg","modified":1,"renderable":0},{"_id":"source/images/serverless/GraphAPIExplorer2.png","path":"images/serverless/GraphAPIExplorer2.png","modified":1,"renderable":0},{"_id":"source/images/serverless/IAM-1.jpg","path":"images/serverless/IAM-1.jpg","modified":1,"renderable":0},{"_id":"source/images/serverless/chat-sample.jpg","path":"images/serverless/chat-sample.jpg","modified":1,"renderable":0},{"_id":"source/images/serverless/fb-page-access-token.png","path":"images/serverless/fb-page-access-token.png","modified":1,"renderable":0},{"_id":"source/images/serverless/fb-page1.png","path":"images/serverless/fb-page1.png","modified":1,"renderable":0},{"_id":"source/images/serverless/fb-page2.png","path":"images/serverless/fb-page2.png","modified":1,"renderable":0},{"_id":"source/images/serverless/lambda.png","path":"images/serverless/lambda.png","modified":1,"renderable":0},{"_id":"source/images/serverless/subscribe_page.png","path":"images/serverless/subscribe_page.png","modified":1,"renderable":0},{"_id":"source/images/serverless/verify_token.png","path":"images/serverless/verify_token.png","modified":1,"renderable":0},{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":1,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/images/SPRINT/4steps.jpg","path":"images/SPRINT/4steps.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/Goal.jpg","path":"images/SPRINT/Goal.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/hotpoint.jpg","path":"images/SPRINT/hotpoint.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/skatch.jpg","path":"images/SPRINT/skatch.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/supervote.jpg","path":"images/SPRINT/supervote.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/分鏡範例.jpg","path":"images/SPRINT/分鏡範例.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/分鏡腳本.jpg","path":"images/SPRINT/分鏡腳本.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/快速評論.jpg","path":"images/SPRINT/快速評論.jpg","modified":1,"renderable":0},{"_id":"source/images/serverless/API-Gateway2.png","path":"images/serverless/API-Gateway2.png","modified":1,"renderable":0},{"_id":"source/images/serverless/IAM-2.jpg","path":"images/serverless/IAM-2.jpg","modified":1,"renderable":0},{"_id":"source/images/serverless/fb-webhook.png","path":"images/serverless/fb-webhook.png","modified":1,"renderable":0},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/images/serverless/FB-APIGateway.jpg","path":"images/serverless/FB-APIGateway.jpg","modified":1,"renderable":0},{"_id":"themes/Anisina/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda1.jpg","path":"images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda1.jpg","modified":1,"renderable":0},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/images/SPRINT/demo_record.jpg","path":"images/SPRINT/demo_record.jpg","modified":1,"renderable":0},{"_id":"source/images/SPRINT/示意圖_page.jpg","path":"images/SPRINT/示意圖_page.jpg","modified":1,"renderable":0},{"_id":"source/images/background-0.jpg","path":"images/background-0.jpg","modified":1,"renderable":0},{"_id":"themes/Anisina/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b8614f76057b0cad4210c84e21d011bc80a1c572","modified":1475830682000},{"_id":"source/404.md","hash":"9161fda9d5b98bddcb19ad47b831f251f103099f","modified":1472396813000},{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1472285365000},{"_id":"themes/Anisina/README.md","hash":"872a96a312b0285f0d0eb5b2123a6d80bd0bac6d","modified":1472285365000},{"_id":"themes/Anisina/_config.yml","hash":"fe0b018faf357c766579dcabc2d0f9e3742664a1","modified":1472285365000},{"_id":"source/_posts/CSS筆記.md","hash":"30313e25fada859407f1c6d44ec9552ba6007b53","modified":1472395032000},{"_id":"source/_posts/Laravel筆記.md","hash":"f0ddd6191d7298d1bac19b2eec110aef0aa62758","modified":1473135335000},{"_id":"source/_posts/Less筆記.md","hash":"9996fa5ec4ba84a0719080df30a89bc3625f6c72","modified":1472401101000},{"_id":"source/_posts/Linux相關筆記.md","hash":"d3af6250d66fa62e0e61fbbcf65254503b33420a","modified":1472395041000},{"_id":"source/_posts/PostCSS.md","hash":"0cbe962ea80ed1a3110dfb88d0f102f9fef5ba31","modified":1472401100000},{"_id":"source/_posts/SPRINT衝刺計畫-Part1.md","hash":"85870641ed87f5c50444c9a929b4f862623bb949","modified":1473988022000},{"_id":"source/_posts/SPRINT衝刺計畫-Part2.md","hash":"2949cdd84604f229fad169376bc01fa1ab6301eb","modified":1474011187000},{"_id":"source/_posts/SPRINT衝刺計畫-Part3.md","hash":"72c840a2903ef01f2e5d2dddea4172c8e19021f0","modified":1474103652000},{"_id":"source/_posts/Sass筆記.md","hash":"2a87fa5a4bd159cec61496d22b14809f209deac6","modified":1472401099000},{"_id":"source/_posts/Transcoding-AWS-S3-media-files-using-AWS-Lambda.md","hash":"67780378dc60e425f9279efa69ba79a86e350905","modified":1473577375000},{"_id":"source/_posts/Using-Gitolite-to-setup-Git-Server-and-install-Gitweb.md","hash":"547fd42fcbffee38d9336ff16a5c39408fba5cd3","modified":1472956268000},{"_id":"source/_posts/Webpack-Note.md","hash":"b71e06742cab8199c14a3541f141c64b32a5764c","modified":1474245233000},{"_id":"source/_posts/hello-world.md","hash":"12349bcab2481cc5f49453722b6b478f943ab75c","modified":1477009946000},{"_id":"source/_posts/serverless-facebook-messenger-bot.md","hash":"56f363a0fa8d0b3e7606b5da1ecf0e72582376ea","modified":1475897714000},{"_id":"source/_posts/兩台Server雙向同步.md","hash":"cc36cd76ef093aca3a6b0b49fb70df7ad4c10b0e","modified":1476584867000},{"_id":"source/categories/index.md","hash":"1281f99ddc01d1c46a5f6d4db05cba65011f308d","modified":1473578825000},{"_id":"source/images/.DS_Store","hash":"0049ba0adedd9fbfdb072e903815962b80bab07d","modified":1475838083000},{"_id":"source/images/favicon.ico","hash":"4ec65b8a952adf9e1c21456f7a9b64ff24575751","modified":1476174985000},{"_id":"source/images/search-icon.svg","hash":"acdd02e54b1534326a57e854d2f523e56c58f50b","modified":1476669576000},{"_id":"source/tags/index.md","hash":"b44d7ae17e6f0ee7f22ec04c3228ab3dd8f2f521","modified":1472376369000},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1472285365000},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1472285365000},{"_id":"themes/Anisina/layout/404.ejs","hash":"4ccc0f550c397833cccf2eabb0994f715546ff8c","modified":1472399159000},{"_id":"themes/Anisina/layout/archive.ejs","hash":"410a3dc6fc42f4fedb2eb7af4d670969227f7b9d","modified":1472400169000},{"_id":"themes/Anisina/layout/categories.ejs","hash":"60de51025547b6ee81d34df0fa1152195813b214","modified":1473580157000},{"_id":"themes/Anisina/layout/index.ejs","hash":"1271c1113f0786959caa584819d9aa1eb88315a1","modified":1472285365000},{"_id":"themes/Anisina/layout/keynote.ejs","hash":"f529ee3b4cf913c0422ae935eab200f9aa0a9320","modified":1472285365000},{"_id":"themes/Anisina/layout/layout.ejs","hash":"84731d4cd70e19faa2cfd64015780db018e66f4f","modified":1476629180000},{"_id":"themes/Anisina/layout/page.ejs","hash":"16b0d38c0ad52bf6f9f4df291c49d4105057b415","modified":1477281551000},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"af17b8b6c181dde640f66ba6f3dbaaee11010d09","modified":1476630186000},{"_id":"themes/Anisina/layout/post.ejs","hash":"433d1eee7b623b7cf0e48146612418283f97afae","modified":1476631558000},{"_id":"themes/Anisina/layout/tags.ejs","hash":"4193df5a70d759f5899bcb05bd1b13c394d22f7b","modified":1473579122000},{"_id":"themes/Anisina/layout/works.ejs","hash":"542b0f2906232e945132744912cc3c32dc33f80e","modified":1472285365000},{"_id":"source/images/SPRINT/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1473988437000},{"_id":"source/images/SPRINT/3mindemo.jpg","hash":"2853090f57e76578bdf7416a340030ee3610352c","modified":1473987744000},{"_id":"source/images/SPRINT/interview_note.jpg","hash":"63d2b38d92a9ec2edf56b85774275c952cfe8317","modified":1474098661000},{"_id":"source/images/SPRINT/lightning.jpg","hash":"575dc5f36c0f5bcf9f18b2554506f68b580bd98a","modified":1473999283000},{"_id":"source/images/SPRINT/testuser.jpg","hash":"c294298f56e8deacd7674361fc5f6d859d2fc49c","modified":1474095081000},{"_id":"source/images/SPRINT/write_vote.jpg","hash":"dba35572ddcc4f073a1511d34d100fc5d99b4c3f","modified":1474009128000},{"_id":"source/images/SPRINT/示意圖1.jpg","hash":"aa9b01c9cdfe3eea250e2b6415cdb13804a9b71a","modified":1473987971000},{"_id":"source/images/SPRINT/示意圖2.jpg","hash":"666db49cda4fb9c2a8341ffafc818b36ece231c5","modified":1473987984000},{"_id":"source/images/SPRINT/稻草民調.jpg","hash":"bfe9593f7148f3684a84be813197a0490c149897","modified":1474001251000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda2.jpg","hash":"7ac414209f8277dd45f982fd464ca9c92403e243","modified":1473576514000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda3.jpg","hash":"b62768dd4ee63bebd91c47c37669f830336a8196","modified":1473576535000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step1.jpg","hash":"bbe653caf4e329b76d61e8c0609f394ecfec22d2","modified":1473576350000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step2.jpg","hash":"688ee4cfdfd2165093fdb58f4592ceee7ba31205","modified":1473576388000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step3.jpg","hash":"ab67c1a635eadf3ecbddcb77472b5b56d88d29e2","modified":1473576396000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-1.jpg","hash":"d4ef4644ad7aa9d1f45077fab6312f97928d85ab","modified":1473576448000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-2.jpg","hash":"a81dd0e4509cd6ca6cd5615e4cce884044e3c722","modified":1473576457000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step5.jpg","hash":"38d46a4ee66c72e4b617d1231546d5bb026a2be3","modified":1473576469000},{"_id":"source/images/serverless/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1475894817000},{"_id":"source/images/serverless/API-Gateway1.png","hash":"0dec04778e5101c6c3387e0dd533212d346e979f","modified":1475860137000},{"_id":"source/images/serverless/API-Gateway3.png","hash":"fd5e5bf8aca66d6d9e6c2fb9701968174f4d3f4a","modified":1475860211000},{"_id":"source/images/serverless/GraphAPIExplorer1.jpg","hash":"5d7150aabb7bd955dc4f47e92422fd015a0d806a","modified":1475893363000},{"_id":"source/images/serverless/GraphAPIExplorer2.png","hash":"1ed9acfa58215af99e5becb4c2eb90940ba3d96a","modified":1475893477000},{"_id":"source/images/serverless/IAM-1.jpg","hash":"764a879a4a51f05e770b993a0568b9b72ddfbcb3","modified":1475827406000},{"_id":"source/images/serverless/chat-sample.jpg","hash":"9fa18ba8fdbea8bfc0b5f0046a3d03be1cb080d7","modified":1475899965000},{"_id":"source/images/serverless/fb-page-access-token.png","hash":"a8bace8bc61e9fa7a9f0ae765bd32f6cd62245ec","modified":1475827406000},{"_id":"source/images/serverless/fb-page1.png","hash":"6a53d77187bca557d7dea7b94a2c58ab6bfa0e28","modified":1475900238000},{"_id":"source/images/serverless/fb-page2.png","hash":"682f62d242fcfa56042ad37221861e377f174ac7","modified":1475856352000},{"_id":"source/images/serverless/lambda.png","hash":"19851106434328151f03a0b22ea9b6bb429650c2","modified":1475891361000},{"_id":"source/images/serverless/subscribe_page.png","hash":"dddc16365969dc637fdd988ca7db9c4865adfafc","modified":1475895005000},{"_id":"source/images/serverless/verify_token.png","hash":"866890b64a5a451e9fd5464d7929ccda638fc49b","modified":1475857199000},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1472285365000},{"_id":"themes/Anisina/layout/_partial/article-archive.ejs","hash":"0ee3f3b9b24ffe3697ea1280a0477560f926da02","modified":1472397406000},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"0ebda8c44bb3992d137b533219b7668e094df84d","modified":1476629856000},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"208c618225a8241682d9d120a3f72de3bbeb0e27","modified":1477275843000},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"774d35e84b64bd3c95cc795bd81ccc52d221edda","modified":1472396817000},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1472285365000},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"98d3917bab17dd2b1397b1268ade2ec60e6f4ec4","modified":1477282792000},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1472285365000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1472285365000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1472285365000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1472285365000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1472285365000},{"_id":"themes/Anisina/source/js/blog.js","hash":"15c468dea07a6142b53432707526cc9fbf3e149d","modified":1477289043000},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1472285365000},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1472285365000},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1472285365000},{"_id":"source/images/SPRINT/4steps.jpg","hash":"2d52767f4880e53343c4a1343cdc0e786a2efc0e","modified":1473989005000},{"_id":"source/images/SPRINT/Goal.jpg","hash":"60e25d48169ccd492bcf36b8e5baa137623cf581","modified":1473922686000},{"_id":"source/images/SPRINT/hotpoint.jpg","hash":"647f7923588053cf59864c8aa9ae8136752c934d","modified":1474000344000},{"_id":"source/images/SPRINT/skatch.jpg","hash":"e3a2d57891cf1acd096f258b9076dbedcce4e016","modified":1473999299000},{"_id":"source/images/SPRINT/supervote.jpg","hash":"085207cbcde3d2d980fc217f20d5d5d11a942e05","modified":1474002454000},{"_id":"source/images/SPRINT/分鏡範例.jpg","hash":"061ef953338db1f50023560f17ac246a02821d5a","modified":1474010785000},{"_id":"source/images/SPRINT/分鏡腳本.jpg","hash":"a45f88122dfb4906d489affc4bf51042d3bd7f0e","modified":1474009520000},{"_id":"source/images/SPRINT/快速評論.jpg","hash":"a3dc5a4ee4e122b52e421aa5684c63c35c4401b6","modified":1474000838000},{"_id":"source/images/serverless/API-Gateway2.png","hash":"6ce59e1f32236b83d0c1abcc2b2cc1d11e7d2c3b","modified":1475860141000},{"_id":"source/images/serverless/IAM-2.jpg","hash":"cad88ea8a6911267000f09a7af3e476dc9990585","modified":1475827406000},{"_id":"source/images/serverless/fb-webhook.png","hash":"1e1bd34859e7ac928b81ebd2fc875886b6efc173","modified":1475894803000},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1472285365000},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1472285365000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1472285365000},{"_id":"themes/Anisina/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1472285365000},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472285365000},{"_id":"source/images/serverless/FB-APIGateway.jpg","hash":"b139bb3b18ab258dcb62770753a2633d60e4c1b3","modified":1475897034000},{"_id":"themes/Anisina/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1472285365000},{"_id":"source/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda1.jpg","hash":"90d88f02a18a569c45386933e99b4d27763c69f3","modified":1473576480000},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1472285365000},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1472285365000},{"_id":"source/images/SPRINT/demo_record.jpg","hash":"f32b5cf8d8b9c75aee939f254f599ce39bfe8102","modified":1473988405000},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1472285365000},{"_id":"source/images/SPRINT/示意圖_page.jpg","hash":"9c0c57c9632bb9c8e02d4ce0bc1bd4b952bfa478","modified":1473922657000},{"_id":"source/images/background-0.jpg","hash":"ab8fc64b412edea0f590a53620430a28e66623da","modified":1472431268000},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1472285365000},{"_id":"themes/Anisina/source/images/background.jpg","hash":"21dd93930151e41eee4e7d3bc2f70b1bda021e20","modified":1472383131000},{"_id":"public/atom.xml","hash":"b3174faaed900b011406f222282c37225264c8ba","modified":1477437566026},{"_id":"public/sitemap.xml","hash":"3348aab84fba397120e7b428d7d5c1b71e090780","modified":1477437566555},{"_id":"public/search.json","hash":"bf2a5ef3fcab81f7aadb340b9b99090b274e5bc0","modified":1477437566581},{"_id":"public/robots.txt","hash":"d20f700948d59ef1bbdd8a3e31dae21b10dc573f","modified":1477437566608},{"_id":"public/404.html","hash":"ed54c4a50879b2844d1faefd0b9238b79cb5654c","modified":1477437566608},{"_id":"public/2016/08/26/hello-world/index.html","hash":"3bbc8ac6a87d6e05970b55aad3a7cd3fdbb143e2","modified":1477437566609},{"_id":"public/archives/index.html","hash":"13435fafb1710b2972a33ddae3506ded6a997340","modified":1477437566609},{"_id":"public/archives/page/2/index.html","hash":"f8defa6c4c6e1463d5bfb75b43470bdac5761410","modified":1477437566609},{"_id":"public/archives/2016/index.html","hash":"f332dbd74d7f2f626fddebaca9f5e853a6edc7ee","modified":1477437566609},{"_id":"public/archives/2016/page/2/index.html","hash":"fc5955197fd4154937e59be203cda2528a242c42","modified":1477437566609},{"_id":"public/archives/2016/08/index.html","hash":"c7de79331122e4e888d4786fc7e98d3783502a1d","modified":1477437566609},{"_id":"public/archives/2016/09/index.html","hash":"6183ecc9056fe49bcdea36faabe781956138fc6b","modified":1477437566609},{"_id":"public/archives/2016/10/index.html","hash":"e4c9646de513993b60817dc92a68b97e48339c81","modified":1477437566610},{"_id":"public/categories/Frontend/index.html","hash":"e978ffae4662d387e449d4e6df63193213958b37","modified":1477437566610},{"_id":"public/categories/PHP/index.html","hash":"7fe1cd55a7ae3affc5326392b789494bc62cd0b5","modified":1477437566610},{"_id":"public/categories/Linux/index.html","hash":"80c7dd22d04effafe8b4c151926ec7d961885b98","modified":1477437566610},{"_id":"public/categories/Workflow/index.html","hash":"9708705a4bf60f43277e548096504c61d16ba2fa","modified":1477437566611},{"_id":"public/categories/AWS/index.html","hash":"671dc257cc4f86a9d850d7ccdff617373b5bd2d6","modified":1477437566611},{"_id":"public/categories/Server/index.html","hash":"8f8b00b544a72b5ae2cb9732c8cbfea219fd611c","modified":1477437566611},{"_id":"public/categories/Others/index.html","hash":"eccca65e71a85a1ae084e2de954bdb43369394f6","modified":1477437566611},{"_id":"public/tags/background/index.html","hash":"bf080f9d5c73938621724db3aba7017c371e2726","modified":1477437566611},{"_id":"public/tags/animation/index.html","hash":"902e598231268704e010973ce5b48dfb0c7b2063","modified":1477437566611},{"_id":"public/tags/transform/index.html","hash":"30f24dad6259acba702851978137722fd593cbc4","modified":1477437566612},{"_id":"public/tags/transition/index.html","hash":"ca65799b36394c4b188f564a5eb3527a4d471f61","modified":1477437566612},{"_id":"public/tags/Laravel/index.html","hash":"73a0ee16efc9479756e8326945c76178f3db74cf","modified":1477437566612},{"_id":"public/tags/artisan/index.html","hash":"4ce62a6ff4b96981458cb5862d811eb3c6f3c7cc","modified":1477437566612},{"_id":"public/tags/elixir/index.html","hash":"a34683c9d011650e03cd2884cd8a679aa4843ee1","modified":1477437566612},{"_id":"public/tags/less/index.html","hash":"5320dd7df4f0698d83f3542c072f35dfac798437","modified":1477437566612},{"_id":"public/tags/mixins/index.html","hash":"76c2367cbf1e90f7c761b78895b44ad6a6004c8d","modified":1477437566612},{"_id":"public/tags/RWD/index.html","hash":"749db61ce6b53a9d2725649c3620f3ea9215131c","modified":1477437566612},{"_id":"public/tags/color/index.html","hash":"63ddc2ac49077735762aacdba1d7c726a4cd2ec5","modified":1477437566612},{"_id":"public/tags/css-preprocessor/index.html","hash":"3b36a191889e414215e2b42631140c6db5766641","modified":1477437566612},{"_id":"public/tags/linux/index.html","hash":"7a947343a624619ce928abf68ec6a9426d8407c5","modified":1477437566612},{"_id":"public/tags/crontab/index.html","hash":"2169e2994b86c9196ae745e75334f1a7683cb3cb","modified":1477437566612},{"_id":"public/tags/mount/index.html","hash":"f491ffdd49d563398f0ad46c49318b178e13fd57","modified":1477437566612},{"_id":"public/tags/postcss/index.html","hash":"0acc714bfe4b1fc871c10aa4362eda4a587e9c56","modified":1477437566613},{"_id":"public/tags/css-post-processor/index.html","hash":"a4c38b75bf9ce75e396d2952a441b03c4f1c710e","modified":1477437566613},{"_id":"public/tags/SPRINT/index.html","hash":"5e88b3f4cef668db1ee2bf721501186b37a3106e","modified":1477437566613},{"_id":"public/tags/衝刺計畫/index.html","hash":"df0d86d1f90945f0a5f8ab296025c634bdbbd74f","modified":1477437566613},{"_id":"public/tags/Prototype/index.html","hash":"c52c658f2d34033f16e7f23e4dba8c4c27ffd50f","modified":1477437566613},{"_id":"public/tags/sass/index.html","hash":"f8db93f3bdeeb41b2170710990889e74c77cd030","modified":1477437566613},{"_id":"public/tags/s3/index.html","hash":"29c94c2aad452164018a901cbb46325168c67b69","modified":1477437566613},{"_id":"public/tags/elastictranscoder/index.html","hash":"836592c4171687a215fdc1652e45e42addfdf571","modified":1477437566613},{"_id":"public/tags/lambda/index.html","hash":"e2a1d8a3dbc62f94e10622a8a9e7e195bee12d86","modified":1477437566613},{"_id":"public/tags/node-js/index.html","hash":"dc7a66e78bfaaa356feff214f5a83291ca5a39e2","modified":1477437566613},{"_id":"public/tags/git/index.html","hash":"0dd65d82c1647207e09150b2fdc65b4564f2c21f","modified":1477437566613},{"_id":"public/tags/git-server/index.html","hash":"e9d5372b6626a1dda44167eb5e65c486195dc1c9","modified":1477437566613},{"_id":"public/tags/gitolite/index.html","hash":"a7d55a3ffbf8d8b101e596f547ce919b5cb14e3e","modified":1477437566614},{"_id":"public/tags/gitweb/index.html","hash":"67e49ba80eced9c4c5100746903f09b8328f0eab","modified":1477437566614},{"_id":"public/tags/webpack/index.html","hash":"5d482f764bf12723a116b59ae2f80b5b790b0b31","modified":1477437566614},{"_id":"public/tags/npm/index.html","hash":"b694d7d1d65cafb03a7d5ccb1b342e8e170b8146","modified":1477437566614},{"_id":"public/tags/serverless/index.html","hash":"8caac04ef15425a3fcba24589bf6b4a4295a4713","modified":1477437566614},{"_id":"public/tags/apigateway/index.html","hash":"96c9beb1e588912515c50b79a3939227bbb28da8","modified":1477437566614},{"_id":"public/tags/webhook/index.html","hash":"a9dfdfed8e3a745c0bd843f9be32613aa83683ef","modified":1477437566614},{"_id":"public/tags/facebook/index.html","hash":"b82e432d221a35da407dc49565a6bafb5d5daef0","modified":1477437566614},{"_id":"public/tags/messenger/index.html","hash":"2e3e54af65110b0b40fff31c2d83df1a5bc1b64f","modified":1477437566615},{"_id":"public/tags/sync/index.html","hash":"08ab7b301682c3f595879352adea87d779808da0","modified":1477437566615},{"_id":"public/tags/unison/index.html","hash":"e65b7c56e164c03ce842d5ea390e1f98b1c56031","modified":1477437566615},{"_id":"public/tags/inotifywait/index.html","hash":"b60a8322241319f055c53fa84ce21b18dc15b750","modified":1477437566615},{"_id":"public/categories/index.html","hash":"2f5fd3c1abf9200d238fa6a48f8ad57726de6a96","modified":1477437566615},{"_id":"public/tags/index.html","hash":"358aaf48bd2f01599527ba184f1484b8b50386e7","modified":1477437566615},{"_id":"public/2016/10/07/serverless-facebook-messenger-bot/index.html","hash":"ee9cea0edc0e08b41c1edaefde3849fa3f5fe197","modified":1477437566615},{"_id":"public/2016/09/16/SPRINT衝刺計畫-Part3/index.html","hash":"81526def7a329f82691e62a9373e3924e70edcc8","modified":1477437566615},{"_id":"public/2016/09/16/SPRINT衝刺計畫-Part2/index.html","hash":"cf25297bfcbf036059375a8cc9bed460780363a5","modified":1477437566615},{"_id":"public/2016/09/15/SPRINT衝刺計畫-Part1/index.html","hash":"0b950e5e2ea82de76ca202e555f00526b3d65a88","modified":1477437566615},{"_id":"public/2016/09/11/Transcoding-AWS-S3-media-files-using-AWS-Lambda/index.html","hash":"ac2a4ff10422aec87c39502ceb8ed712dd42f07b","modified":1477437566616},{"_id":"public/2016/09/04/Webpack-Note/index.html","hash":"76604b0f253f3167c44c77e6281848992c6e7cd1","modified":1477437566616},{"_id":"public/2016/09/04/Using-Gitolite-to-setup-Git-Server-and-install-Gitweb/index.html","hash":"38859721bac286e97c69b115c998b8bebf33875a","modified":1477437566616},{"_id":"public/2016/08/29/兩台Server雙向同步/index.html","hash":"2bd810df939f87939cb995eb0c7e88be980322c5","modified":1477437566616},{"_id":"public/2016/08/28/Less筆記/index.html","hash":"1e394f59e75ab0df6d2807ee61292aeaea116e70","modified":1477437566616},{"_id":"public/2016/08/28/PostCSS/index.html","hash":"bf28580c15f2cc3c44b8faf4449da5ef4a9c6166","modified":1477437566616},{"_id":"public/2016/08/28/Sass筆記/index.html","hash":"4cdbd02607eb5962fa5c153b59d4e483d5249ccd","modified":1477437566616},{"_id":"public/2016/08/28/Linux相關筆記/index.html","hash":"4603b186945dd73967ea8fcd69c259d1a55d6bc0","modified":1477437566616},{"_id":"public/2016/08/27/Laravel筆記/index.html","hash":"49879878ee58f7e5c58c69ae0c4c174f2767a539","modified":1477437566616},{"_id":"public/2016/08/27/CSS筆記/index.html","hash":"8a6d0932aa530fc0fb44708a53ea8ba4819bed3d","modified":1477437566616},{"_id":"public/index.html","hash":"b4eea32f6acfe45ef10249498b8137f1ea96c058","modified":1477437566616},{"_id":"public/page/2/index.html","hash":"1b39ad704f4ea20220295f68e469979265e13b21","modified":1477437566616},{"_id":"public/images/favicon.ico","hash":"4ec65b8a952adf9e1c21456f7a9b64ff24575751","modified":1477437566633},{"_id":"public/images/search-icon.svg","hash":"acdd02e54b1534326a57e854d2f523e56c58f50b","modified":1477437566633},{"_id":"public/images/SPRINT/3mindemo.jpg","hash":"2853090f57e76578bdf7416a340030ee3610352c","modified":1477437566633},{"_id":"public/images/SPRINT/interview_note.jpg","hash":"63d2b38d92a9ec2edf56b85774275c952cfe8317","modified":1477437566633},{"_id":"public/images/SPRINT/lightning.jpg","hash":"575dc5f36c0f5bcf9f18b2554506f68b580bd98a","modified":1477437566633},{"_id":"public/images/SPRINT/testuser.jpg","hash":"c294298f56e8deacd7674361fc5f6d859d2fc49c","modified":1477437566634},{"_id":"public/images/SPRINT/write_vote.jpg","hash":"dba35572ddcc4f073a1511d34d100fc5d99b4c3f","modified":1477437566634},{"_id":"public/images/SPRINT/示意圖1.jpg","hash":"aa9b01c9cdfe3eea250e2b6415cdb13804a9b71a","modified":1477437566634},{"_id":"public/images/SPRINT/示意圖2.jpg","hash":"666db49cda4fb9c2a8341ffafc818b36ece231c5","modified":1477437566634},{"_id":"public/images/SPRINT/稻草民調.jpg","hash":"bfe9593f7148f3684a84be813197a0490c149897","modified":1477437566634},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda2.jpg","hash":"7ac414209f8277dd45f982fd464ca9c92403e243","modified":1477437566634},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda3.jpg","hash":"b62768dd4ee63bebd91c47c37669f830336a8196","modified":1477437566634},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step1.jpg","hash":"bbe653caf4e329b76d61e8c0609f394ecfec22d2","modified":1477437566634},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step2.jpg","hash":"688ee4cfdfd2165093fdb58f4592ceee7ba31205","modified":1477437566634},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step3.jpg","hash":"ab67c1a635eadf3ecbddcb77472b5b56d88d29e2","modified":1477437566635},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-1.jpg","hash":"d4ef4644ad7aa9d1f45077fab6312f97928d85ab","modified":1477437566635},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-2.jpg","hash":"a81dd0e4509cd6ca6cd5615e4cce884044e3c722","modified":1477437566635},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step5.jpg","hash":"38d46a4ee66c72e4b617d1231546d5bb026a2be3","modified":1477437566635},{"_id":"public/images/serverless/API-Gateway1.png","hash":"0dec04778e5101c6c3387e0dd533212d346e979f","modified":1477437566635},{"_id":"public/images/serverless/API-Gateway3.png","hash":"fd5e5bf8aca66d6d9e6c2fb9701968174f4d3f4a","modified":1477437566635},{"_id":"public/images/serverless/GraphAPIExplorer2.png","hash":"1ed9acfa58215af99e5becb4c2eb90940ba3d96a","modified":1477437566635},{"_id":"public/images/serverless/GraphAPIExplorer1.jpg","hash":"5d7150aabb7bd955dc4f47e92422fd015a0d806a","modified":1477437566635},{"_id":"public/images/serverless/IAM-1.jpg","hash":"764a879a4a51f05e770b993a0568b9b72ddfbcb3","modified":1477437566635},{"_id":"public/images/serverless/chat-sample.jpg","hash":"9fa18ba8fdbea8bfc0b5f0046a3d03be1cb080d7","modified":1477437566636},{"_id":"public/images/serverless/fb-page-access-token.png","hash":"a8bace8bc61e9fa7a9f0ae765bd32f6cd62245ec","modified":1477437566636},{"_id":"public/images/serverless/fb-page1.png","hash":"6a53d77187bca557d7dea7b94a2c58ab6bfa0e28","modified":1477437566636},{"_id":"public/images/serverless/fb-page2.png","hash":"682f62d242fcfa56042ad37221861e377f174ac7","modified":1477437566636},{"_id":"public/images/serverless/lambda.png","hash":"19851106434328151f03a0b22ea9b6bb429650c2","modified":1477437566636},{"_id":"public/images/serverless/subscribe_page.png","hash":"dddc16365969dc637fdd988ca7db9c4865adfafc","modified":1477437566637},{"_id":"public/images/serverless/verify_token.png","hash":"866890b64a5a451e9fd5464d7929ccda638fc49b","modified":1477437566637},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1477437566637},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1477437566637},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1477437566637},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1477437566637},{"_id":"public/images/SPRINT/4steps.jpg","hash":"2d52767f4880e53343c4a1343cdc0e786a2efc0e","modified":1477437566961},{"_id":"public/images/SPRINT/Goal.jpg","hash":"60e25d48169ccd492bcf36b8e5baa137623cf581","modified":1477437566962},{"_id":"public/images/SPRINT/hotpoint.jpg","hash":"647f7923588053cf59864c8aa9ae8136752c934d","modified":1477437566965},{"_id":"public/images/SPRINT/skatch.jpg","hash":"e3a2d57891cf1acd096f258b9076dbedcce4e016","modified":1477437566965},{"_id":"public/images/SPRINT/supervote.jpg","hash":"085207cbcde3d2d980fc217f20d5d5d11a942e05","modified":1477437566966},{"_id":"public/images/SPRINT/分鏡範例.jpg","hash":"061ef953338db1f50023560f17ac246a02821d5a","modified":1477437566966},{"_id":"public/images/SPRINT/分鏡腳本.jpg","hash":"a45f88122dfb4906d489affc4bf51042d3bd7f0e","modified":1477437566967},{"_id":"public/images/SPRINT/快速評論.jpg","hash":"a3dc5a4ee4e122b52e421aa5684c63c35c4401b6","modified":1477437566967},{"_id":"public/images/serverless/API-Gateway2.png","hash":"6ce59e1f32236b83d0c1abcc2b2cc1d11e7d2c3b","modified":1477437566967},{"_id":"public/images/serverless/IAM-2.jpg","hash":"cad88ea8a6911267000f09a7af3e476dc9990585","modified":1477437566967},{"_id":"public/images/serverless/fb-webhook.png","hash":"1e1bd34859e7ac928b81ebd2fc875886b6efc173","modified":1477437566967},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1477437566967},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1477437566977},{"_id":"public/js/blog.js","hash":"15c468dea07a6142b53432707526cc9fbf3e149d","modified":1477437566977},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1477437566977},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1477437566977},{"_id":"public/css/blog-style.css","hash":"98d3917bab17dd2b1397b1268ade2ec60e6f4ec4","modified":1477437566977},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1477437566977},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1477437566977},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1477437566977},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1477437566977},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1477437566977},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1477437566979},{"_id":"public/images/serverless/FB-APIGateway.jpg","hash":"b139bb3b18ab258dcb62770753a2633d60e4c1b3","modified":1477437566979},{"_id":"public/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda1.jpg","hash":"90d88f02a18a569c45386933e99b4d27763c69f3","modified":1477437566991},{"_id":"public/images/SPRINT/demo_record.jpg","hash":"f32b5cf8d8b9c75aee939f254f599ce39bfe8102","modified":1477437567000},{"_id":"public/images/SPRINT/示意圖_page.jpg","hash":"9c0c57c9632bb9c8e02d4ce0bc1bd4b952bfa478","modified":1477437567016},{"_id":"public/images/background-0.jpg","hash":"ab8fc64b412edea0f590a53620430a28e66623da","modified":1477437567043},{"_id":"public/images/background.jpg","hash":"21dd93930151e41eee4e7d3bc2f70b1bda021e20","modified":1477437567043}],"Category":[{"name":"Frontend","_id":"ciuq46ghe0006scsczorsu4g3"},{"name":"PHP","_id":"ciuq46ghp000bscsc8j5l42ay"},{"name":"Linux","_id":"ciuq46gi7000lscsc1u1kunvh"},{"name":"Workflow","_id":"ciuq46gic000qscscfvkgohol"},{"name":"AWS","_id":"ciuq46giy0019scscm16zxht3"},{"name":"Server","_id":"ciuq46giy001escsci2awzypg"},{"name":"Others","_id":"ciuq46gj0001jscscpawdmypt"}],"Data":[],"Page":[{"layout":"404","title":"404","_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: 404\npermalink: /404\n---","date":"2016-08-28T15:06:53.000Z","updated":"2016-08-28T15:06:53.000Z","path":"/404.html","comments":1,"_id":"ciuq46gex0000scsctmhhzuh3","content":"","excerpt":"","more":""},{"title":"categories","type":"categories","date":"2016-09-11T07:07:12.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\ndate: 2016-09-11 15:07:12\nlayout: categories\n---\n","updated":"2016-09-11T07:27:05.000Z","path":"categories/index.html","comments":1,"_id":"ciuq46gh30002scsc4p34d4ml","content":"","excerpt":"","more":""},{"title":"Tags","date":"2016-08-28T09:25:51.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2016-08-28 17:25:51\nlayout: tags\n---\n","updated":"2016-08-28T09:26:09.000Z","path":"tags/index.html","comments":1,"_id":"ciuq46gh90004scsc8vlve8wm","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"CSS筆記","date":"2016-08-27T08:51:17.000Z","updated":"2016-08-27T14:56:13.000Z","photos":["http://7xls5g.com1.z0.glb.clouddn.com/talk-about-css-preprocessor.png"],"_content":"<!-- MarkdownTOC -->\n\n- [CSS](#css)\n  - [Background 背景](#background-背景)\n  - [Animation 動畫效果](#animation-動畫效果)\n  - [Transform 變化](#transform-變化)\n  - [Transition 轉場](#transition-轉場)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"css\"></a>\n# CSS\n\n<a name=\"background-背景\"></a>\n## Background 背景\n\n**background: color image position/size repeat origin clip attachment initial|inherit;**\n\n* position:\n  * 水平(left, center, right, xpos)\n  * 垂直(top, center, bottom, ypos)\n* size: audo, percentage, cover, contain\n* repeat: repeat|repeat-x|repeat-y|no-repeat\n* origin: padding-box|border-box|content-box\n* clip: border-box|padding-box|content-box (沒用過)\n* attachment: scroll|fixed|local (沒用過)\n\n<a name=\"animation-動畫效果\"></a>\n## Animation 動畫效果\n\n**animation: @keyframes | duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name**\n\n* @keyframes: 定義動畫, 另外寫\n\n````css\n@keyframes identifier {\n    0% { top: 0; left: 0; }\n    30% { top: 50px; }\n    68%, 72% { left: 50px; }\n    100% { top: 100px; left: 100%; }\n}\n````\n\n* duration: 動畫一次週期的時間, e.g. 1s, 300ms\n* timing-function: 動畫轉變時時間的加速曲線, e.g. linear, ease, ease-in, ease-in-out, ease-out\n* delay: 定義元素讀取完畢到動畫開始的間隔時間\n* iteration-count: 定義動畫重複的次數, e.g. 1, 2, infinite\n* direction: 定義是否動畫播放完畢後將會反向播放, e.g. alternate(順,反,順,反)\n* fill-mode: 定義元素在動畫播放外(動畫開始前及結束後)的狀態, e.g. forwards(停在最後)\n* play-state: 控制動畫的播放狀態。有 pause 和 running 兩種值，後者為預設值。\n* name: keyframes 的名稱\n\n<a name=\"transform-變化\"></a>\n## Transform 變化\n\n**transform: transform-functions**\n\n* scale(x,y), scale3d(x,y,z), scaleX(x), scaleY(y), scaleZ(z)\n* skewX(angle), skewY(angle)\n* translate(x,y), translate3d(x,y,z), translateX(x), translateY(y), translateZ(z)\n* rotate(angle), rotate3d(x,y,z,angle), rotateX(angle), rotateY(angle), rotateZ(angle)\n* matrix(n,n,n,n,n,n), matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)\n* perspective()\n\n<a name=\"transition-轉場\"></a>\n## Transition 轉場\n\n**transition: name | duration | (timing function) | (delay) {, name | duration};**\n\n* name: keyframes 的名稱\n* duration: 轉場時間\n* 動畫轉變時時間的加速曲線\n* 元素讀取完畢到動畫開始的延遲時間\n* 可以設定多組轉場\n\n","source":"_posts/CSS筆記.md","raw":"---\nlayout: post\ntitle: CSS筆記\ndate: 2016-08-27 16:51:17\nupdated: 2016-08-27 22:56:13\ntags:\n - background\n - animation\n - transform\n - transition\n\ncategories:\n - Frontend\n\nphotos:\n - http://7xls5g.com1.z0.glb.clouddn.com/talk-about-css-preprocessor.png\n\n---\n<!-- MarkdownTOC -->\n\n- [CSS](#css)\n  - [Background 背景](#background-背景)\n  - [Animation 動畫效果](#animation-動畫效果)\n  - [Transform 變化](#transform-變化)\n  - [Transition 轉場](#transition-轉場)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"css\"></a>\n# CSS\n\n<a name=\"background-背景\"></a>\n## Background 背景\n\n**background: color image position/size repeat origin clip attachment initial|inherit;**\n\n* position:\n  * 水平(left, center, right, xpos)\n  * 垂直(top, center, bottom, ypos)\n* size: audo, percentage, cover, contain\n* repeat: repeat|repeat-x|repeat-y|no-repeat\n* origin: padding-box|border-box|content-box\n* clip: border-box|padding-box|content-box (沒用過)\n* attachment: scroll|fixed|local (沒用過)\n\n<a name=\"animation-動畫效果\"></a>\n## Animation 動畫效果\n\n**animation: @keyframes | duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name**\n\n* @keyframes: 定義動畫, 另外寫\n\n````css\n@keyframes identifier {\n    0% { top: 0; left: 0; }\n    30% { top: 50px; }\n    68%, 72% { left: 50px; }\n    100% { top: 100px; left: 100%; }\n}\n````\n\n* duration: 動畫一次週期的時間, e.g. 1s, 300ms\n* timing-function: 動畫轉變時時間的加速曲線, e.g. linear, ease, ease-in, ease-in-out, ease-out\n* delay: 定義元素讀取完畢到動畫開始的間隔時間\n* iteration-count: 定義動畫重複的次數, e.g. 1, 2, infinite\n* direction: 定義是否動畫播放完畢後將會反向播放, e.g. alternate(順,反,順,反)\n* fill-mode: 定義元素在動畫播放外(動畫開始前及結束後)的狀態, e.g. forwards(停在最後)\n* play-state: 控制動畫的播放狀態。有 pause 和 running 兩種值，後者為預設值。\n* name: keyframes 的名稱\n\n<a name=\"transform-變化\"></a>\n## Transform 變化\n\n**transform: transform-functions**\n\n* scale(x,y), scale3d(x,y,z), scaleX(x), scaleY(y), scaleZ(z)\n* skewX(angle), skewY(angle)\n* translate(x,y), translate3d(x,y,z), translateX(x), translateY(y), translateZ(z)\n* rotate(angle), rotate3d(x,y,z,angle), rotateX(angle), rotateY(angle), rotateZ(angle)\n* matrix(n,n,n,n,n,n), matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)\n* perspective()\n\n<a name=\"transition-轉場\"></a>\n## Transition 轉場\n\n**transition: name | duration | (timing function) | (delay) {, name | duration};**\n\n* name: keyframes 的名稱\n* duration: 轉場時間\n* 動畫轉變時時間的加速曲線\n* 元素讀取完畢到動畫開始的延遲時間\n* 可以設定多組轉場\n\n","slug":"CSS筆記","published":1,"comments":1,"link":"","_id":"ciuq46ggy0001scsc6zb8g45f","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#css\">CSS</a><ul>\n<li><a href=\"#background-背景\">Background 背景</a></li>\n<li><a href=\"#animation-動畫效果\">Animation 動畫效果</a></li>\n<li><a href=\"#transform-變化\">Transform 變化</a></li>\n<li><a href=\"#transition-轉場\">Transition 轉場</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"css\"></a></p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><p><a name=\"background-背景\"></a></p>\n<h2 id=\"Background-背景\"><a href=\"#Background-背景\" class=\"headerlink\" title=\"Background 背景\"></a>Background 背景</h2><p><strong>background: color image position/size repeat origin clip attachment initial|inherit;</strong></p>\n<ul>\n<li>position:<ul>\n<li>水平(left, center, right, xpos)</li>\n<li>垂直(top, center, bottom, ypos)</li>\n</ul>\n</li>\n<li>size: audo, percentage, cover, contain</li>\n<li>repeat: repeat|repeat-x|repeat-y|no-repeat</li>\n<li>origin: padding-box|border-box|content-box</li>\n<li>clip: border-box|padding-box|content-box (沒用過)</li>\n<li>attachment: scroll|fixed|local (沒用過)</li>\n</ul>\n<p><a name=\"animation-動畫效果\"></a></p>\n<h2 id=\"Animation-動畫效果\"><a href=\"#Animation-動畫效果\" class=\"headerlink\" title=\"Animation 動畫效果\"></a>Animation 動畫效果</h2><p><strong>animation: @keyframes | duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name</strong></p>\n<ul>\n<li>@keyframes: 定義動畫, 另外寫</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> identifier &#123;</div><div class=\"line\">    0% &#123; <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; &#125;</div><div class=\"line\">    30% &#123; <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>; &#125;</div><div class=\"line\">    68%, 72% &#123; <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>; &#125;</div><div class=\"line\">    100% &#123; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">left</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>duration: 動畫一次週期的時間, e.g. 1s, 300ms</li>\n<li>timing-function: 動畫轉變時時間的加速曲線, e.g. linear, ease, ease-in, ease-in-out, ease-out</li>\n<li>delay: 定義元素讀取完畢到動畫開始的間隔時間</li>\n<li>iteration-count: 定義動畫重複的次數, e.g. 1, 2, infinite</li>\n<li>direction: 定義是否動畫播放完畢後將會反向播放, e.g. alternate(順,反,順,反)</li>\n<li>fill-mode: 定義元素在動畫播放外(動畫開始前及結束後)的狀態, e.g. forwards(停在最後)</li>\n<li>play-state: 控制動畫的播放狀態。有 pause 和 running 兩種值，後者為預設值。</li>\n<li>name: keyframes 的名稱</li>\n</ul>\n<p><a name=\"transform-變化\"></a></p>\n<h2 id=\"Transform-變化\"><a href=\"#Transform-變化\" class=\"headerlink\" title=\"Transform 變化\"></a>Transform 變化</h2><p><strong>transform: transform-functions</strong></p>\n<ul>\n<li>scale(x,y), scale3d(x,y,z), scaleX(x), scaleY(y), scaleZ(z)</li>\n<li>skewX(angle), skewY(angle)</li>\n<li>translate(x,y), translate3d(x,y,z), translateX(x), translateY(y), translateZ(z)</li>\n<li>rotate(angle), rotate3d(x,y,z,angle), rotateX(angle), rotateY(angle), rotateZ(angle)</li>\n<li>matrix(n,n,n,n,n,n), matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</li>\n<li>perspective()</li>\n</ul>\n<p><a name=\"transition-轉場\"></a></p>\n<h2 id=\"Transition-轉場\"><a href=\"#Transition-轉場\" class=\"headerlink\" title=\"Transition 轉場\"></a>Transition 轉場</h2><p><strong>transition: name | duration | (timing function) | (delay) {, name | duration};</strong></p>\n<ul>\n<li>name: keyframes 的名稱</li>\n<li>duration: 轉場時間</li>\n<li>動畫轉變時時間的加速曲線</li>\n<li>元素讀取完畢到動畫開始的延遲時間</li>\n<li>可以設定多組轉場</li>\n</ul>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#css\">CSS</a><ul>\n<li><a href=\"#background-背景\">Background 背景</a></li>\n<li><a href=\"#animation-動畫效果\">Animation 動畫效果</a></li>\n<li><a href=\"#transform-變化\">Transform 變化</a></li>\n<li><a href=\"#transition-轉場\">Transition 轉場</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"css\"></a></p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><p><a name=\"background-背景\"></a></p>\n<h2 id=\"Background-背景\"><a href=\"#Background-背景\" class=\"headerlink\" title=\"Background 背景\"></a>Background 背景</h2><p><strong>background: color image position/size repeat origin clip attachment initial|inherit;</strong></p>\n<ul>\n<li>position:<ul>\n<li>水平(left, center, right, xpos)</li>\n<li>垂直(top, center, bottom, ypos)</li>\n</ul>\n</li>\n<li>size: audo, percentage, cover, contain</li>\n<li>repeat: repeat|repeat-x|repeat-y|no-repeat</li>\n<li>origin: padding-box|border-box|content-box</li>\n<li>clip: border-box|padding-box|content-box (沒用過)</li>\n<li>attachment: scroll|fixed|local (沒用過)</li>\n</ul>\n<p><a name=\"animation-動畫效果\"></a></p>\n<h2 id=\"Animation-動畫效果\"><a href=\"#Animation-動畫效果\" class=\"headerlink\" title=\"Animation 動畫效果\"></a>Animation 動畫效果</h2><p><strong>animation: @keyframes | duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name</strong></p>\n<ul>\n<li>@keyframes: 定義動畫, 另外寫</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> identifier &#123;</div><div class=\"line\">    0% &#123; <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; &#125;</div><div class=\"line\">    30% &#123; <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>; &#125;</div><div class=\"line\">    68%, 72% &#123; <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>; &#125;</div><div class=\"line\">    100% &#123; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">left</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>duration: 動畫一次週期的時間, e.g. 1s, 300ms</li>\n<li>timing-function: 動畫轉變時時間的加速曲線, e.g. linear, ease, ease-in, ease-in-out, ease-out</li>\n<li>delay: 定義元素讀取完畢到動畫開始的間隔時間</li>\n<li>iteration-count: 定義動畫重複的次數, e.g. 1, 2, infinite</li>\n<li>direction: 定義是否動畫播放完畢後將會反向播放, e.g. alternate(順,反,順,反)</li>\n<li>fill-mode: 定義元素在動畫播放外(動畫開始前及結束後)的狀態, e.g. forwards(停在最後)</li>\n<li>play-state: 控制動畫的播放狀態。有 pause 和 running 兩種值，後者為預設值。</li>\n<li>name: keyframes 的名稱</li>\n</ul>\n<p><a name=\"transform-變化\"></a></p>\n<h2 id=\"Transform-變化\"><a href=\"#Transform-變化\" class=\"headerlink\" title=\"Transform 變化\"></a>Transform 變化</h2><p><strong>transform: transform-functions</strong></p>\n<ul>\n<li>scale(x,y), scale3d(x,y,z), scaleX(x), scaleY(y), scaleZ(z)</li>\n<li>skewX(angle), skewY(angle)</li>\n<li>translate(x,y), translate3d(x,y,z), translateX(x), translateY(y), translateZ(z)</li>\n<li>rotate(angle), rotate3d(x,y,z,angle), rotateX(angle), rotateY(angle), rotateZ(angle)</li>\n<li>matrix(n,n,n,n,n,n), matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</li>\n<li>perspective()</li>\n</ul>\n<p><a name=\"transition-轉場\"></a></p>\n<h2 id=\"Transition-轉場\"><a href=\"#Transition-轉場\" class=\"headerlink\" title=\"Transition 轉場\"></a>Transition 轉場</h2><p><strong>transition: name | duration | (timing function) | (delay) {, name | duration};</strong></p>\n<ul>\n<li>name: keyframes 的名稱</li>\n<li>duration: 轉場時間</li>\n<li>動畫轉變時時間的加速曲線</li>\n<li>元素讀取完畢到動畫開始的延遲時間</li>\n<li>可以設定多組轉場</li>\n</ul>\n"},{"layout":"post","title":"Laravel筆記","date":"2016-08-27T11:12:59.000Z","update":"2016-08-27T11:19:59.000Z","_content":"<!-- MarkdownTOC -->\n\n- [Artisan 操作](#artisan-操作)\n  - [建立 Controller](#建立-controller)\n  - [建立 Model](#建立-model)\n  - [建立 Migration \\(建立資料表格\\)](#建立-migration-建立資料表格)\n  - [建立 Seeder \\(表格初始資料\\)](#建立-seeder-表格初始資料)\n  - [使用 Elixir](#使用-elixir)\n- [取出最後一筆Query](#取出最後一筆query)\n  - [Laravel 5](#laravel-5)\n  - [Laravel 4](#laravel-4)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"artisan-操作\"></a>\n# Artisan 操作\n<a name=\"建立-controller\"></a>\n### 建立 Controller\n* `php artisan make:controller 目錄/檔案名稱`\n\n<a name=\"建立-model\"></a>\n### 建立 Model\n* `php artisan make:model Model/TableName(單數) -m`\n  * make:model 後面接著的 Model/TableName 會在 app 目錄下建立 Model 資料夾，然後再產生 XXXX 的 Model 檔案\n  * 最後的 -m 為 Optional，使用的話可以同時產生 migration 檔案來建立表格\n\n<a name=\"建立-migration-建立資料表格\"></a>\n### 建立 Migration (建立資料表格)\n* `php artisan make:migration init_transfer_tool`\n  * migration 檔案名稱常用小寫英文[a-z]與底線[_]來命名\n  * 建立出來的檔案 class 名稱則為首字大寫英文銜接 e.g. InitTransferTool\n* 執行全部未執行過的 migration `php artisan migrate`\n* 回朔最後一筆 migration `php artisan migrate:rollback`\n* 回朔所有 migration `php artisan migrate:reset`\n* 回朔所有 migration 並且重新執行 migrate `php artisan migrate:refresh`\n  * 附帶執行 seeder，最後加上 --seed，`php artisan migrate:refresh --seed`\n* 檢查目前 migration 狀態 `php artisan migrate:status`\n\n<a name=\"建立-seeder-表格初始資料\"></a>\n### 建立 Seeder (表格初始資料)\n* `php artisan make:seeder UsersTableSeeder`\n  * 建立 Seeder 的名稱慣用首字大寫英文銜接\n  * 記得到 DatabaseSeeder 裡執行呼叫剛剛建立的 Seeder\n* 執行建立的 Seeder\n  * 單個執行 `php artisan db:seed --class=UsersTableSeeder`\n  * 全部執行 `php artisan db:seed`\n\n<a name=\"使用-elixir\"></a>\n### 使用 Elixir\n* 安裝 Gulp\n  * `npm install --global gulp`\n  * 個人使用經驗，只裝 global 似乎不行，所以又裝在目錄下的 node_modules/\n    * `npm install --save gulp`\n* 安裝 Elixir\n  * `npm install`\n  * 初始目錄下的 package.json 內已經有 laravel-elixir 等必須套件\n* babel 使用遇到問題\n  * 安裝 babel-preset-es2015 與 babel-preset-react, `npm install --save-dev babel-preset-es2015 babel-preset-react`\n* 使用 eslint 檢查\n  * 安裝 laravel-elixir-eslint 與 eslint-plugin-react (因為之前的 eslintrc 內有寫到)\n  * `npm install --save-dev laravel-elixir-eslint eslint-plugin-react`\n  * 增加 .eslintrc.json 檔案\n\n````json\n{\n    \"env\": {\n        \"browser\": true,\n        \"commonjs\": true,\n        \"es6\": true,\n        \"jquery\": true\n    },\n    \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n    \"parserOptions\": {\n        \"ecmaFeatures\": {\n            \"experimentalObjectRestSpread\": true,\n            \"jsx\": true,\n            \"globalReturn\": true\n        },\n        \"sourceType\": \"module\"\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"rules\": {\n        \"indent\": [\n            \"error\",\n            4\n        ],\n        \"linebreak-style\": [\n            \"error\",\n            \"unix\"\n        ],\n        \"quotes\": [\n            \"error\",\n            \"single\"\n        ],\n        \"semi\": [\n            \"error\",\n            \"always\"\n        ],\n        \"react/no-danger\": 0,\n        \"no-console\": [\"error\", { \"allow\": [\"log\", \"warn\", \"error\"] }]\n    },\n    \"globals\": {\n        \"API\": true\n    }\n}\n````\n\n\n<a name=\"取出最後一筆query\"></a>\n# 取出最後一筆Query\n\n<a name=\"laravel-5\"></a>\n### Laravel 5\n1. (!) In Laravel 5 you should enable do `DB::enableQueryLog();` first.\n2. Then after placing your final statement:\n3. `DB::table('users')->where('name', '=', 'Aknavi')->get();` just run:\n4. __`dd(DB::getQueryLog());`__ - it will return the SQL and the bindings of the last queries that were executed.\n\n<a name=\"laravel-4\"></a>\n### Laravel 4\nIn Laravel 4 queryLogging is enabled by default, so you should just do:\n`dd(DB::getQueryLog());`","source":"_posts/Laravel筆記.md","raw":"---\nlayout: post\ntitle: Laravel筆記\ndate: 2016-08-27 19:12:59\nupdate: 2016-08-27 19:19:59\ntags:\n - Laravel\n - artisan\n - elixir\n\ncategories:\n - PHP\n\n---\n<!-- MarkdownTOC -->\n\n- [Artisan 操作](#artisan-操作)\n  - [建立 Controller](#建立-controller)\n  - [建立 Model](#建立-model)\n  - [建立 Migration \\(建立資料表格\\)](#建立-migration-建立資料表格)\n  - [建立 Seeder \\(表格初始資料\\)](#建立-seeder-表格初始資料)\n  - [使用 Elixir](#使用-elixir)\n- [取出最後一筆Query](#取出最後一筆query)\n  - [Laravel 5](#laravel-5)\n  - [Laravel 4](#laravel-4)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"artisan-操作\"></a>\n# Artisan 操作\n<a name=\"建立-controller\"></a>\n### 建立 Controller\n* `php artisan make:controller 目錄/檔案名稱`\n\n<a name=\"建立-model\"></a>\n### 建立 Model\n* `php artisan make:model Model/TableName(單數) -m`\n  * make:model 後面接著的 Model/TableName 會在 app 目錄下建立 Model 資料夾，然後再產生 XXXX 的 Model 檔案\n  * 最後的 -m 為 Optional，使用的話可以同時產生 migration 檔案來建立表格\n\n<a name=\"建立-migration-建立資料表格\"></a>\n### 建立 Migration (建立資料表格)\n* `php artisan make:migration init_transfer_tool`\n  * migration 檔案名稱常用小寫英文[a-z]與底線[_]來命名\n  * 建立出來的檔案 class 名稱則為首字大寫英文銜接 e.g. InitTransferTool\n* 執行全部未執行過的 migration `php artisan migrate`\n* 回朔最後一筆 migration `php artisan migrate:rollback`\n* 回朔所有 migration `php artisan migrate:reset`\n* 回朔所有 migration 並且重新執行 migrate `php artisan migrate:refresh`\n  * 附帶執行 seeder，最後加上 --seed，`php artisan migrate:refresh --seed`\n* 檢查目前 migration 狀態 `php artisan migrate:status`\n\n<a name=\"建立-seeder-表格初始資料\"></a>\n### 建立 Seeder (表格初始資料)\n* `php artisan make:seeder UsersTableSeeder`\n  * 建立 Seeder 的名稱慣用首字大寫英文銜接\n  * 記得到 DatabaseSeeder 裡執行呼叫剛剛建立的 Seeder\n* 執行建立的 Seeder\n  * 單個執行 `php artisan db:seed --class=UsersTableSeeder`\n  * 全部執行 `php artisan db:seed`\n\n<a name=\"使用-elixir\"></a>\n### 使用 Elixir\n* 安裝 Gulp\n  * `npm install --global gulp`\n  * 個人使用經驗，只裝 global 似乎不行，所以又裝在目錄下的 node_modules/\n    * `npm install --save gulp`\n* 安裝 Elixir\n  * `npm install`\n  * 初始目錄下的 package.json 內已經有 laravel-elixir 等必須套件\n* babel 使用遇到問題\n  * 安裝 babel-preset-es2015 與 babel-preset-react, `npm install --save-dev babel-preset-es2015 babel-preset-react`\n* 使用 eslint 檢查\n  * 安裝 laravel-elixir-eslint 與 eslint-plugin-react (因為之前的 eslintrc 內有寫到)\n  * `npm install --save-dev laravel-elixir-eslint eslint-plugin-react`\n  * 增加 .eslintrc.json 檔案\n\n````json\n{\n    \"env\": {\n        \"browser\": true,\n        \"commonjs\": true,\n        \"es6\": true,\n        \"jquery\": true\n    },\n    \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n    \"parserOptions\": {\n        \"ecmaFeatures\": {\n            \"experimentalObjectRestSpread\": true,\n            \"jsx\": true,\n            \"globalReturn\": true\n        },\n        \"sourceType\": \"module\"\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"rules\": {\n        \"indent\": [\n            \"error\",\n            4\n        ],\n        \"linebreak-style\": [\n            \"error\",\n            \"unix\"\n        ],\n        \"quotes\": [\n            \"error\",\n            \"single\"\n        ],\n        \"semi\": [\n            \"error\",\n            \"always\"\n        ],\n        \"react/no-danger\": 0,\n        \"no-console\": [\"error\", { \"allow\": [\"log\", \"warn\", \"error\"] }]\n    },\n    \"globals\": {\n        \"API\": true\n    }\n}\n````\n\n\n<a name=\"取出最後一筆query\"></a>\n# 取出最後一筆Query\n\n<a name=\"laravel-5\"></a>\n### Laravel 5\n1. (!) In Laravel 5 you should enable do `DB::enableQueryLog();` first.\n2. Then after placing your final statement:\n3. `DB::table('users')->where('name', '=', 'Aknavi')->get();` just run:\n4. __`dd(DB::getQueryLog());`__ - it will return the SQL and the bindings of the last queries that were executed.\n\n<a name=\"laravel-4\"></a>\n### Laravel 4\nIn Laravel 4 queryLogging is enabled by default, so you should just do:\n`dd(DB::getQueryLog());`","slug":"Laravel筆記","published":1,"updated":"2016-09-06T04:15:35.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gh50003scsc15z7w9qv","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#artisan-操作\">Artisan 操作</a><ul>\n<li><a href=\"#建立-controller\">建立 Controller</a></li>\n<li><a href=\"#建立-model\">建立 Model</a></li>\n<li><a href=\"#建立-migration-建立資料表格\">建立 Migration (建立資料表格)</a></li>\n<li><a href=\"#建立-seeder-表格初始資料\">建立 Seeder (表格初始資料)</a></li>\n<li><a href=\"#使用-elixir\">使用 Elixir</a></li>\n</ul>\n</li>\n<li><a href=\"#取出最後一筆query\">取出最後一筆Query</a><ul>\n<li><a href=\"#laravel-5\">Laravel 5</a></li>\n<li><a href=\"#laravel-4\">Laravel 4</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"artisan-操作\"></a></p>\n<h1 id=\"Artisan-操作\"><a href=\"#Artisan-操作\" class=\"headerlink\" title=\"Artisan 操作\"></a>Artisan 操作</h1><p><a name=\"建立-controller\"></a></p>\n<h3 id=\"建立-Controller\"><a href=\"#建立-Controller\" class=\"headerlink\" title=\"建立 Controller\"></a>建立 Controller</h3><ul>\n<li><code>php artisan make:controller 目錄/檔案名稱</code></li>\n</ul>\n<p><a name=\"建立-model\"></a></p>\n<h3 id=\"建立-Model\"><a href=\"#建立-Model\" class=\"headerlink\" title=\"建立 Model\"></a>建立 Model</h3><ul>\n<li><code>php artisan make:model Model/TableName(單數) -m</code><ul>\n<li>make:model 後面接著的 Model/TableName 會在 app 目錄下建立 Model 資料夾，然後再產生 XXXX 的 Model 檔案</li>\n<li>最後的 -m 為 Optional，使用的話可以同時產生 migration 檔案來建立表格</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"建立-migration-建立資料表格\"></a></p>\n<h3 id=\"建立-Migration-建立資料表格\"><a href=\"#建立-Migration-建立資料表格\" class=\"headerlink\" title=\"建立 Migration (建立資料表格)\"></a>建立 Migration (建立資料表格)</h3><ul>\n<li><code>php artisan make:migration init_transfer_tool</code><ul>\n<li>migration 檔案名稱常用小寫英文[a-z]與底線[_]來命名</li>\n<li>建立出來的檔案 class 名稱則為首字大寫英文銜接 e.g. InitTransferTool</li>\n</ul>\n</li>\n<li>執行全部未執行過的 migration <code>php artisan migrate</code></li>\n<li>回朔最後一筆 migration <code>php artisan migrate:rollback</code></li>\n<li>回朔所有 migration <code>php artisan migrate:reset</code></li>\n<li>回朔所有 migration 並且重新執行 migrate <code>php artisan migrate:refresh</code><ul>\n<li>附帶執行 seeder，最後加上 –seed，<code>php artisan migrate:refresh --seed</code></li>\n</ul>\n</li>\n<li>檢查目前 migration 狀態 <code>php artisan migrate:status</code></li>\n</ul>\n<p><a name=\"建立-seeder-表格初始資料\"></a></p>\n<h3 id=\"建立-Seeder-表格初始資料\"><a href=\"#建立-Seeder-表格初始資料\" class=\"headerlink\" title=\"建立 Seeder (表格初始資料)\"></a>建立 Seeder (表格初始資料)</h3><ul>\n<li><code>php artisan make:seeder UsersTableSeeder</code><ul>\n<li>建立 Seeder 的名稱慣用首字大寫英文銜接</li>\n<li>記得到 DatabaseSeeder 裡執行呼叫剛剛建立的 Seeder</li>\n</ul>\n</li>\n<li>執行建立的 Seeder<ul>\n<li>單個執行 <code>php artisan db:seed --class=UsersTableSeeder</code></li>\n<li>全部執行 <code>php artisan db:seed</code></li>\n</ul>\n</li>\n</ul>\n<p><a name=\"使用-elixir\"></a></p>\n<h3 id=\"使用-Elixir\"><a href=\"#使用-Elixir\" class=\"headerlink\" title=\"使用 Elixir\"></a>使用 Elixir</h3><ul>\n<li>安裝 Gulp<ul>\n<li><code>npm install --global gulp</code></li>\n<li>個人使用經驗，只裝 global 似乎不行，所以又裝在目錄下的 node_modules/<ul>\n<li><code>npm install --save gulp</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安裝 Elixir<ul>\n<li><code>npm install</code></li>\n<li>初始目錄下的 package.json 內已經有 laravel-elixir 等必須套件</li>\n</ul>\n</li>\n<li>babel 使用遇到問題<ul>\n<li>安裝 babel-preset-es2015 與 babel-preset-react, <code>npm install --save-dev babel-preset-es2015 babel-preset-react</code></li>\n</ul>\n</li>\n<li>使用 eslint 檢查<ul>\n<li>安裝 laravel-elixir-eslint 與 eslint-plugin-react (因為之前的 eslintrc 內有寫到)</li>\n<li><code>npm install --save-dev laravel-elixir-eslint eslint-plugin-react</code></li>\n<li>增加 .eslintrc.json 檔案</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"commonjs\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"es6\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"jquery\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"extends\"</span>: [<span class=\"string\">\"eslint:recommended\"</span>, <span class=\"string\">\"plugin:react/recommended\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"parserOptions\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"ecmaFeatures\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"experimentalObjectRestSpread\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">\"jsx\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">\"globalReturn\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"react\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"indent\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"error\"</span>,</div><div class=\"line\">            <span class=\"number\">4</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"linebreak-style\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"error\"</span>,</div><div class=\"line\">            <span class=\"string\">\"unix\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"quotes\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"error\"</span>,</div><div class=\"line\">            <span class=\"string\">\"single\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"semi\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"error\"</span>,</div><div class=\"line\">            <span class=\"string\">\"always\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"react/no-danger\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"no-console\"</span>: [<span class=\"string\">\"error\"</span>, &#123; <span class=\"attr\">\"allow\"</span>: [<span class=\"string\">\"log\"</span>, <span class=\"string\">\"warn\"</span>, <span class=\"string\">\"error\"</span>] &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"globals\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"API\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"取出最後一筆query\"></a></p>\n<h1 id=\"取出最後一筆Query\"><a href=\"#取出最後一筆Query\" class=\"headerlink\" title=\"取出最後一筆Query\"></a>取出最後一筆Query</h1><p><a name=\"laravel-5\"></a></p>\n<h3 id=\"Laravel-5\"><a href=\"#Laravel-5\" class=\"headerlink\" title=\"Laravel 5\"></a>Laravel 5</h3><ol>\n<li>(!) In Laravel 5 you should enable do <code>DB::enableQueryLog();</code> first.</li>\n<li>Then after placing your final statement:</li>\n<li><code>DB::table(&#39;users&#39;)-&gt;where(&#39;name&#39;, &#39;=&#39;, &#39;Aknavi&#39;)-&gt;get();</code> just run:</li>\n<li><strong><code>dd(DB::getQueryLog());</code></strong> - it will return the SQL and the bindings of the last queries that were executed.</li>\n</ol>\n<p><a name=\"laravel-4\"></a></p>\n<h3 id=\"Laravel-4\"><a href=\"#Laravel-4\" class=\"headerlink\" title=\"Laravel 4\"></a>Laravel 4</h3><p>In Laravel 4 queryLogging is enabled by default, so you should just do:<br><code>dd(DB::getQueryLog());</code></p>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#artisan-操作\">Artisan 操作</a><ul>\n<li><a href=\"#建立-controller\">建立 Controller</a></li>\n<li><a href=\"#建立-model\">建立 Model</a></li>\n<li><a href=\"#建立-migration-建立資料表格\">建立 Migration (建立資料表格)</a></li>\n<li><a href=\"#建立-seeder-表格初始資料\">建立 Seeder (表格初始資料)</a></li>\n<li><a href=\"#使用-elixir\">使用 Elixir</a></li>\n</ul>\n</li>\n<li><a href=\"#取出最後一筆query\">取出最後一筆Query</a><ul>\n<li><a href=\"#laravel-5\">Laravel 5</a></li>\n<li><a href=\"#laravel-4\">Laravel 4</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"artisan-操作\"></a></p>\n<h1 id=\"Artisan-操作\"><a href=\"#Artisan-操作\" class=\"headerlink\" title=\"Artisan 操作\"></a>Artisan 操作</h1><p><a name=\"建立-controller\"></a></p>\n<h3 id=\"建立-Controller\"><a href=\"#建立-Controller\" class=\"headerlink\" title=\"建立 Controller\"></a>建立 Controller</h3><ul>\n<li><code>php artisan make:controller 目錄/檔案名稱</code></li>\n</ul>\n<p><a name=\"建立-model\"></a></p>\n<h3 id=\"建立-Model\"><a href=\"#建立-Model\" class=\"headerlink\" title=\"建立 Model\"></a>建立 Model</h3><ul>\n<li><code>php artisan make:model Model/TableName(單數) -m</code><ul>\n<li>make:model 後面接著的 Model/TableName 會在 app 目錄下建立 Model 資料夾，然後再產生 XXXX 的 Model 檔案</li>\n<li>最後的 -m 為 Optional，使用的話可以同時產生 migration 檔案來建立表格</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"建立-migration-建立資料表格\"></a></p>\n<h3 id=\"建立-Migration-建立資料表格\"><a href=\"#建立-Migration-建立資料表格\" class=\"headerlink\" title=\"建立 Migration (建立資料表格)\"></a>建立 Migration (建立資料表格)</h3><ul>\n<li><code>php artisan make:migration init_transfer_tool</code><ul>\n<li>migration 檔案名稱常用小寫英文[a-z]與底線[_]來命名</li>\n<li>建立出來的檔案 class 名稱則為首字大寫英文銜接 e.g. InitTransferTool</li>\n</ul>\n</li>\n<li>執行全部未執行過的 migration <code>php artisan migrate</code></li>\n<li>回朔最後一筆 migration <code>php artisan migrate:rollback</code></li>\n<li>回朔所有 migration <code>php artisan migrate:reset</code></li>\n<li>回朔所有 migration 並且重新執行 migrate <code>php artisan migrate:refresh</code><ul>\n<li>附帶執行 seeder，最後加上 –seed，<code>php artisan migrate:refresh --seed</code></li>\n</ul>\n</li>\n<li>檢查目前 migration 狀態 <code>php artisan migrate:status</code></li>\n</ul>\n<p><a name=\"建立-seeder-表格初始資料\"></a></p>\n<h3 id=\"建立-Seeder-表格初始資料\"><a href=\"#建立-Seeder-表格初始資料\" class=\"headerlink\" title=\"建立 Seeder (表格初始資料)\"></a>建立 Seeder (表格初始資料)</h3><ul>\n<li><code>php artisan make:seeder UsersTableSeeder</code><ul>\n<li>建立 Seeder 的名稱慣用首字大寫英文銜接</li>\n<li>記得到 DatabaseSeeder 裡執行呼叫剛剛建立的 Seeder</li>\n</ul>\n</li>\n<li>執行建立的 Seeder<ul>\n<li>單個執行 <code>php artisan db:seed --class=UsersTableSeeder</code></li>\n<li>全部執行 <code>php artisan db:seed</code></li>\n</ul>\n</li>\n</ul>\n<p><a name=\"使用-elixir\"></a></p>\n<h3 id=\"使用-Elixir\"><a href=\"#使用-Elixir\" class=\"headerlink\" title=\"使用 Elixir\"></a>使用 Elixir</h3><ul>\n<li>安裝 Gulp<ul>\n<li><code>npm install --global gulp</code></li>\n<li>個人使用經驗，只裝 global 似乎不行，所以又裝在目錄下的 node_modules/<ul>\n<li><code>npm install --save gulp</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安裝 Elixir<ul>\n<li><code>npm install</code></li>\n<li>初始目錄下的 package.json 內已經有 laravel-elixir 等必須套件</li>\n</ul>\n</li>\n<li>babel 使用遇到問題<ul>\n<li>安裝 babel-preset-es2015 與 babel-preset-react, <code>npm install --save-dev babel-preset-es2015 babel-preset-react</code></li>\n</ul>\n</li>\n<li>使用 eslint 檢查<ul>\n<li>安裝 laravel-elixir-eslint 與 eslint-plugin-react (因為之前的 eslintrc 內有寫到)</li>\n<li><code>npm install --save-dev laravel-elixir-eslint eslint-plugin-react</code></li>\n<li>增加 .eslintrc.json 檔案</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"commonjs\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"es6\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"jquery\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"extends\"</span>: [<span class=\"string\">\"eslint:recommended\"</span>, <span class=\"string\">\"plugin:react/recommended\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"parserOptions\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"ecmaFeatures\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"experimentalObjectRestSpread\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">\"jsx\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">\"globalReturn\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"react\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"indent\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"error\"</span>,</div><div class=\"line\">            <span class=\"number\">4</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"linebreak-style\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"error\"</span>,</div><div class=\"line\">            <span class=\"string\">\"unix\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"quotes\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"error\"</span>,</div><div class=\"line\">            <span class=\"string\">\"single\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"semi\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"error\"</span>,</div><div class=\"line\">            <span class=\"string\">\"always\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"react/no-danger\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"no-console\"</span>: [<span class=\"string\">\"error\"</span>, &#123; <span class=\"attr\">\"allow\"</span>: [<span class=\"string\">\"log\"</span>, <span class=\"string\">\"warn\"</span>, <span class=\"string\">\"error\"</span>] &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"globals\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"API\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"取出最後一筆query\"></a></p>\n<h1 id=\"取出最後一筆Query\"><a href=\"#取出最後一筆Query\" class=\"headerlink\" title=\"取出最後一筆Query\"></a>取出最後一筆Query</h1><p><a name=\"laravel-5\"></a></p>\n<h3 id=\"Laravel-5\"><a href=\"#Laravel-5\" class=\"headerlink\" title=\"Laravel 5\"></a>Laravel 5</h3><ol>\n<li>(!) In Laravel 5 you should enable do <code>DB::enableQueryLog();</code> first.</li>\n<li>Then after placing your final statement:</li>\n<li><code>DB::table(&#39;users&#39;)-&gt;where(&#39;name&#39;, &#39;=&#39;, &#39;Aknavi&#39;)-&gt;get();</code> just run:</li>\n<li><strong><code>dd(DB::getQueryLog());</code></strong> - it will return the SQL and the bindings of the last queries that were executed.</li>\n</ol>\n<p><a name=\"laravel-4\"></a></p>\n<h3 id=\"Laravel-4\"><a href=\"#Laravel-4\" class=\"headerlink\" title=\"Laravel 4\"></a>Laravel 4</h3><p>In Laravel 4 queryLogging is enabled by default, so you should just do:<br><code>dd(DB::getQueryLog());</code></p>\n"},{"layout":"post","title":"Less筆記","author":"Soar Lin","date":"2016-08-28T10:29:43.000Z","_content":"<!-- MarkdownTOC -->\n\n- [Less](#less)\n    - [變數](#變數)\n    - [計算](#計算)\n    - [顏色處理](#顏色處理)\n    - [mixins 混入](#mixins-混入)\n    - [RWD 寫法參考](#rwd-寫法參考)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"less\"></a>\n# Less\n<a name=\"變數\"></a>\n## 變數\n* 使用@符號當開頭命名變數, e.g.`@link-color: #4281dc;`\n\n````css\n@link-color:        #428bca; // sea blue\n\n// Usage\na,\n.link {\n    color: @link-color;\n}\n````\n#### Selectors\n\n````css\n// Variables\n@my-selector: banner;\n\n// Usage\n.@{my-selector} {\n    font-weight: bold;\n    line-height: 40px;\n    margin: 0 auto;\n}\n````\n#### URLs\n\n````css\n// Variables\n@images: \"../img\";\n\n// Usage\nbody {\n    color: #444;\n    background: url(\"@{images}/white-sand.png\");\n}\n````\n#### Import Statements\n\n````css\n// Variables\n@themes: \"../../src/themes\";\n\n// Usage\n@import \"@{themes}/tidal-wave.less\";\n````\n\n#### Properties\n\n````css\n@property: color;\n\n.widget {\n    @{property}: #0ee;\n    background-@{property}: #999;\n}\n````\n\n<a name=\"計算\"></a>\n## 計算\n* 雖然有 `calc()` 可以用，但是必須在前面加上 `~\" ... \"` 來跳脫字符\n* 由於要以字串處理，所以裡面無法使用變數\n* 如果要使用變數，需要以 `@{變數}` 的方式使用\n\n````css\n@asideWidth: 30px;\n\n// error sample\n.post {\n    width: calc(100% - @asideWidth);\n}\n\n//correct sample, can't use parameter\n.post {\n    width: ~\"calc(100% - 30px)\";\n}\n// another way\n.post {\n    width: ~\"calc(100% - @{asideWidth})\";\n}\n````\n\n<a name=\"顏色處理\"></a>\n## 顏色處理\n* 可參考 [Color Channel Functions](http://lesscss.org/functions/#color-channel) , [Color Operation Functions](http://lesscss.org/functions/#color-operations)\n* 一樣有 `hue`, `saturation`, `lightness`, `lighten`, `darken` ...等處理方式\n\n<a name=\"mixins-混入\"></a>\n## mixins 混入\n* 定義時，與原本寫 class name 類似 `.my-mixin` or `.my-mixin2()`\n* 使用時，也是直接引用 `.my-mixin` or `.my-mixin2`\n\n````css\n.my-mixin {\n    color: black;\n}\n// 不會輸出 class\n.my-other-mixin() {\n    background: white;\n}\n.class {\n    .my-mixin;\n    .my-other-mixin;\n}\n\n----------- Output -----------\n.my-mixin {\n    color: black;\n}\n.class {\n    color: black;\n    background: white;\n}\n````\n* 可帶入參數 `.shadow(@color)`\n\n````css\n.border-radius(@radius) {\n  -webkit-border-radius: @radius;\n     -moz-border-radius: @radius;\n          border-radius: @radius;\n}\n\n.header {\n    .border-radius(4px);\n}\n.button {\n    .border-radius(6px);\n}\n````\n\n<a name=\"rwd-寫法參考\"></a>\n## RWD 寫法參考\n* 直接寫`@media`條件式\n\n````css\nheader {\n    color: red;\n    @media only screen and (min-width : 768px) { color: green; }\n    @media only screen and (min-width : 1024px) { color: blue; }\n}\n````\n\n* 透過變數宣告條件式\n\n````css\n@smartphones: ~\"only screen and (max-width: 479px)\";\n\n.foo {\n    font-size: 2.4em;\n\n    @media @smartphones {\n        font-size: 1.8em;\n    }\n}\n````\n\n````css\n@smartphones: ~\"only screen and (max-width: 479px)\";\n@tablets: ~\"only screen and (min-width: 768px) and (max-width: 959px)\";\n\n@font-size--large: 24px;\n@font-size--medium: 12px;\n\n.foo {\n    font-size: @font-size--large;\n\n    @media @smartphones, @tablets {\n        font-size: @font-size--medium;\n    }\n}\n````","source":"_posts/Less筆記.md","raw":"---\nlayout: post\ntitle: Less筆記\nauthor: Soar Lin\ndate: 2016-08-28 18:29:43\ntags:\n  - less\n  - mixins\n  - RWD\n  - color\n  - css-preprocessor\n\ncategories:\n - Frontend\n\n---\n<!-- MarkdownTOC -->\n\n- [Less](#less)\n    - [變數](#變數)\n    - [計算](#計算)\n    - [顏色處理](#顏色處理)\n    - [mixins 混入](#mixins-混入)\n    - [RWD 寫法參考](#rwd-寫法參考)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"less\"></a>\n# Less\n<a name=\"變數\"></a>\n## 變數\n* 使用@符號當開頭命名變數, e.g.`@link-color: #4281dc;`\n\n````css\n@link-color:        #428bca; // sea blue\n\n// Usage\na,\n.link {\n    color: @link-color;\n}\n````\n#### Selectors\n\n````css\n// Variables\n@my-selector: banner;\n\n// Usage\n.@{my-selector} {\n    font-weight: bold;\n    line-height: 40px;\n    margin: 0 auto;\n}\n````\n#### URLs\n\n````css\n// Variables\n@images: \"../img\";\n\n// Usage\nbody {\n    color: #444;\n    background: url(\"@{images}/white-sand.png\");\n}\n````\n#### Import Statements\n\n````css\n// Variables\n@themes: \"../../src/themes\";\n\n// Usage\n@import \"@{themes}/tidal-wave.less\";\n````\n\n#### Properties\n\n````css\n@property: color;\n\n.widget {\n    @{property}: #0ee;\n    background-@{property}: #999;\n}\n````\n\n<a name=\"計算\"></a>\n## 計算\n* 雖然有 `calc()` 可以用，但是必須在前面加上 `~\" ... \"` 來跳脫字符\n* 由於要以字串處理，所以裡面無法使用變數\n* 如果要使用變數，需要以 `@{變數}` 的方式使用\n\n````css\n@asideWidth: 30px;\n\n// error sample\n.post {\n    width: calc(100% - @asideWidth);\n}\n\n//correct sample, can't use parameter\n.post {\n    width: ~\"calc(100% - 30px)\";\n}\n// another way\n.post {\n    width: ~\"calc(100% - @{asideWidth})\";\n}\n````\n\n<a name=\"顏色處理\"></a>\n## 顏色處理\n* 可參考 [Color Channel Functions](http://lesscss.org/functions/#color-channel) , [Color Operation Functions](http://lesscss.org/functions/#color-operations)\n* 一樣有 `hue`, `saturation`, `lightness`, `lighten`, `darken` ...等處理方式\n\n<a name=\"mixins-混入\"></a>\n## mixins 混入\n* 定義時，與原本寫 class name 類似 `.my-mixin` or `.my-mixin2()`\n* 使用時，也是直接引用 `.my-mixin` or `.my-mixin2`\n\n````css\n.my-mixin {\n    color: black;\n}\n// 不會輸出 class\n.my-other-mixin() {\n    background: white;\n}\n.class {\n    .my-mixin;\n    .my-other-mixin;\n}\n\n----------- Output -----------\n.my-mixin {\n    color: black;\n}\n.class {\n    color: black;\n    background: white;\n}\n````\n* 可帶入參數 `.shadow(@color)`\n\n````css\n.border-radius(@radius) {\n  -webkit-border-radius: @radius;\n     -moz-border-radius: @radius;\n          border-radius: @radius;\n}\n\n.header {\n    .border-radius(4px);\n}\n.button {\n    .border-radius(6px);\n}\n````\n\n<a name=\"rwd-寫法參考\"></a>\n## RWD 寫法參考\n* 直接寫`@media`條件式\n\n````css\nheader {\n    color: red;\n    @media only screen and (min-width : 768px) { color: green; }\n    @media only screen and (min-width : 1024px) { color: blue; }\n}\n````\n\n* 透過變數宣告條件式\n\n````css\n@smartphones: ~\"only screen and (max-width: 479px)\";\n\n.foo {\n    font-size: 2.4em;\n\n    @media @smartphones {\n        font-size: 1.8em;\n    }\n}\n````\n\n````css\n@smartphones: ~\"only screen and (max-width: 479px)\";\n@tablets: ~\"only screen and (min-width: 768px) and (max-width: 959px)\";\n\n@font-size--large: 24px;\n@font-size--medium: 12px;\n\n.foo {\n    font-size: @font-size--large;\n\n    @media @smartphones, @tablets {\n        font-size: @font-size--medium;\n    }\n}\n````","slug":"Less筆記","published":1,"updated":"2016-08-28T16:18:21.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46ghg0007scsc2yfhmnht","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#less\">Less</a><ul>\n<li><a href=\"#變數\">變數</a></li>\n<li><a href=\"#計算\">計算</a></li>\n<li><a href=\"#顏色處理\">顏色處理</a></li>\n<li><a href=\"#mixins-混入\">mixins 混入</a></li>\n<li><a href=\"#rwd-寫法參考\">RWD 寫法參考</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"less\"></a></p>\n<h1 id=\"Less\"><a href=\"#Less\" class=\"headerlink\" title=\"Less\"></a>Less</h1><p><a name=\"變數\"></a></p>\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><ul>\n<li>使用@符號當開頭命名變數, e.g.<code>@link-color: #4281dc;</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@link-color:        #428bca; // sea blue</div><div class=\"line\"></div><div class=\"line\">// Usage</div><div class=\"line\">a,</div><div class=\"line\">.link &#123;</div><div class=\"line\">    color: @link-color;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Selectors\"><a href=\"#Selectors\" class=\"headerlink\" title=\"Selectors\"></a>Selectors</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">// Variables</div><div class=\"line\">@my-selector: banner;</div><div class=\"line\"></div><div class=\"line\">// Usage</div><div class=\"line\">.@&#123;my-selector&#125; &#123;</div><div class=\"line\">    font-weight: bold;</div><div class=\"line\">    line-height: 40px;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"URLs\"><a href=\"#URLs\" class=\"headerlink\" title=\"URLs\"></a>URLs</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">// Variables</div><div class=\"line\">@images: \"../img\";</div><div class=\"line\"></div><div class=\"line\">// Usage</div><div class=\"line\">body &#123;</div><div class=\"line\">    color: #444;</div><div class=\"line\">    background: url(\"@&#123;images&#125;/white-sand.png\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Import-Statements\"><a href=\"#Import-Statements\" class=\"headerlink\" title=\"Import Statements\"></a>Import Statements</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">// Variables</div><div class=\"line\">@themes: \"../../src/themes\";</div><div class=\"line\"></div><div class=\"line\">// Usage</div><div class=\"line\">@import \"@&#123;themes&#125;/tidal-wave.less\";</div></pre></td></tr></table></figure>\n<h4 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@property: color;</div><div class=\"line\"></div><div class=\"line\">.widget &#123;</div><div class=\"line\">    @&#123;property&#125;: #0ee;</div><div class=\"line\">    background-@&#123;property&#125;: #999;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"計算\"></a></p>\n<h2 id=\"計算\"><a href=\"#計算\" class=\"headerlink\" title=\"計算\"></a>計算</h2><ul>\n<li>雖然有 <code>calc()</code> 可以用，但是必須在前面加上 <code>~&quot; ... &quot;</code> 來跳脫字符</li>\n<li>由於要以字串處理，所以裡面無法使用變數</li>\n<li>如果要使用變數，需要以 <code>@{變數}</code> 的方式使用</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@asideWidth: 30px;</div><div class=\"line\"></div><div class=\"line\">// error sample</div><div class=\"line\">.post &#123;</div><div class=\"line\">    width: calc(100% - @asideWidth);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//correct sample, can't use parameter</div><div class=\"line\">.post &#123;</div><div class=\"line\">    width: ~\"calc(100% - 30px)\";</div><div class=\"line\">&#125;</div><div class=\"line\">// another way</div><div class=\"line\">.post &#123;</div><div class=\"line\">    width: ~\"calc(100% - @&#123;asideWidth&#125;)\";</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"顏色處理\"></a></p>\n<h2 id=\"顏色處理\"><a href=\"#顏色處理\" class=\"headerlink\" title=\"顏色處理\"></a>顏色處理</h2><ul>\n<li>可參考 <a href=\"http://lesscss.org/functions/#color-channel\" target=\"_blank\" rel=\"external\">Color Channel Functions</a> , <a href=\"http://lesscss.org/functions/#color-operations\" target=\"_blank\" rel=\"external\">Color Operation Functions</a></li>\n<li>一樣有 <code>hue</code>, <code>saturation</code>, <code>lightness</code>, <code>lighten</code>, <code>darken</code> …等處理方式</li>\n</ul>\n<p><a name=\"mixins-混入\"></a></p>\n<h2 id=\"mixins-混入\"><a href=\"#mixins-混入\" class=\"headerlink\" title=\"mixins 混入\"></a>mixins 混入</h2><ul>\n<li>定義時，與原本寫 class name 類似 <code>.my-mixin</code> or <code>.my-mixin2()</code></li>\n<li>使用時，也是直接引用 <code>.my-mixin</code> or <code>.my-mixin2</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">.my-mixin &#123;</div><div class=\"line\">    color: black;</div><div class=\"line\">&#125;</div><div class=\"line\">// 不會輸出 class</div><div class=\"line\">.my-other-mixin() &#123;</div><div class=\"line\">    background: white;</div><div class=\"line\">&#125;</div><div class=\"line\">.class &#123;</div><div class=\"line\">    .my-mixin;</div><div class=\"line\">    .my-other-mixin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">----------- Output -----------</div><div class=\"line\">.my-mixin &#123;</div><div class=\"line\">    color: black;</div><div class=\"line\">&#125;</div><div class=\"line\">.class &#123;</div><div class=\"line\">    color: black;</div><div class=\"line\">    background: white;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>可帶入參數 <code>.shadow(@color)</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">.border-radius(@radius) &#123;</div><div class=\"line\">  -webkit-border-radius: @radius;</div><div class=\"line\">     -moz-border-radius: @radius;</div><div class=\"line\">          border-radius: @radius;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.header &#123;</div><div class=\"line\">    .border-radius(4px);</div><div class=\"line\">&#125;</div><div class=\"line\">.button &#123;</div><div class=\"line\">    .border-radius(6px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"rwd-寫法參考\"></a></p>\n<h2 id=\"RWD-寫法參考\"><a href=\"#RWD-寫法參考\" class=\"headerlink\" title=\"RWD 寫法參考\"></a>RWD 寫法參考</h2><ul>\n<li>直接寫<code>@media</code>條件式</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">header &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">    @media only screen and (min-width : 768px) &#123; color: green; &#125;</div><div class=\"line\">    @media only screen and (min-width : 1024px) &#123; color: blue; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>透過變數宣告條件式</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@smartphones: ~\"only screen and (max-width: 479px)\";</div><div class=\"line\"></div><div class=\"line\">.foo &#123;</div><div class=\"line\">    font-size: 2.4em;</div><div class=\"line\"></div><div class=\"line\">    @media @smartphones &#123;</div><div class=\"line\">        font-size: 1.8em;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@smartphones: ~\"only screen and (max-width: 479px)\";</div><div class=\"line\">@tablets: ~\"only screen and (min-width: 768px) and (max-width: 959px)\";</div><div class=\"line\"></div><div class=\"line\">@font-size--large: 24px;</div><div class=\"line\">@font-size--medium: 12px;</div><div class=\"line\"></div><div class=\"line\">.foo &#123;</div><div class=\"line\">    font-size: @font-size--large;</div><div class=\"line\"></div><div class=\"line\">    @media @smartphones, @tablets &#123;</div><div class=\"line\">        font-size: @font-size--medium;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#less\">Less</a><ul>\n<li><a href=\"#變數\">變數</a></li>\n<li><a href=\"#計算\">計算</a></li>\n<li><a href=\"#顏色處理\">顏色處理</a></li>\n<li><a href=\"#mixins-混入\">mixins 混入</a></li>\n<li><a href=\"#rwd-寫法參考\">RWD 寫法參考</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"less\"></a></p>\n<h1 id=\"Less\"><a href=\"#Less\" class=\"headerlink\" title=\"Less\"></a>Less</h1><p><a name=\"變數\"></a></p>\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><ul>\n<li>使用@符號當開頭命名變數, e.g.<code>@link-color: #4281dc;</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@link-color:        #428bca; // sea blue</div><div class=\"line\"></div><div class=\"line\">// Usage</div><div class=\"line\">a,</div><div class=\"line\">.link &#123;</div><div class=\"line\">    color: @link-color;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Selectors\"><a href=\"#Selectors\" class=\"headerlink\" title=\"Selectors\"></a>Selectors</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">// Variables</div><div class=\"line\">@my-selector: banner;</div><div class=\"line\"></div><div class=\"line\">// Usage</div><div class=\"line\">.@&#123;my-selector&#125; &#123;</div><div class=\"line\">    font-weight: bold;</div><div class=\"line\">    line-height: 40px;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"URLs\"><a href=\"#URLs\" class=\"headerlink\" title=\"URLs\"></a>URLs</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">// Variables</div><div class=\"line\">@images: \"../img\";</div><div class=\"line\"></div><div class=\"line\">// Usage</div><div class=\"line\">body &#123;</div><div class=\"line\">    color: #444;</div><div class=\"line\">    background: url(\"@&#123;images&#125;/white-sand.png\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Import-Statements\"><a href=\"#Import-Statements\" class=\"headerlink\" title=\"Import Statements\"></a>Import Statements</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">// Variables</div><div class=\"line\">@themes: \"../../src/themes\";</div><div class=\"line\"></div><div class=\"line\">// Usage</div><div class=\"line\">@import \"@&#123;themes&#125;/tidal-wave.less\";</div></pre></td></tr></table></figure>\n<h4 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@property: color;</div><div class=\"line\"></div><div class=\"line\">.widget &#123;</div><div class=\"line\">    @&#123;property&#125;: #0ee;</div><div class=\"line\">    background-@&#123;property&#125;: #999;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"計算\"></a></p>\n<h2 id=\"計算\"><a href=\"#計算\" class=\"headerlink\" title=\"計算\"></a>計算</h2><ul>\n<li>雖然有 <code>calc()</code> 可以用，但是必須在前面加上 <code>~&quot; ... &quot;</code> 來跳脫字符</li>\n<li>由於要以字串處理，所以裡面無法使用變數</li>\n<li>如果要使用變數，需要以 <code>@{變數}</code> 的方式使用</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@asideWidth: 30px;</div><div class=\"line\"></div><div class=\"line\">// error sample</div><div class=\"line\">.post &#123;</div><div class=\"line\">    width: calc(100% - @asideWidth);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//correct sample, can't use parameter</div><div class=\"line\">.post &#123;</div><div class=\"line\">    width: ~\"calc(100% - 30px)\";</div><div class=\"line\">&#125;</div><div class=\"line\">// another way</div><div class=\"line\">.post &#123;</div><div class=\"line\">    width: ~\"calc(100% - @&#123;asideWidth&#125;)\";</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"顏色處理\"></a></p>\n<h2 id=\"顏色處理\"><a href=\"#顏色處理\" class=\"headerlink\" title=\"顏色處理\"></a>顏色處理</h2><ul>\n<li>可參考 <a href=\"http://lesscss.org/functions/#color-channel\">Color Channel Functions</a> , <a href=\"http://lesscss.org/functions/#color-operations\">Color Operation Functions</a></li>\n<li>一樣有 <code>hue</code>, <code>saturation</code>, <code>lightness</code>, <code>lighten</code>, <code>darken</code> …等處理方式</li>\n</ul>\n<p><a name=\"mixins-混入\"></a></p>\n<h2 id=\"mixins-混入\"><a href=\"#mixins-混入\" class=\"headerlink\" title=\"mixins 混入\"></a>mixins 混入</h2><ul>\n<li>定義時，與原本寫 class name 類似 <code>.my-mixin</code> or <code>.my-mixin2()</code></li>\n<li>使用時，也是直接引用 <code>.my-mixin</code> or <code>.my-mixin2</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">.my-mixin &#123;</div><div class=\"line\">    color: black;</div><div class=\"line\">&#125;</div><div class=\"line\">// 不會輸出 class</div><div class=\"line\">.my-other-mixin() &#123;</div><div class=\"line\">    background: white;</div><div class=\"line\">&#125;</div><div class=\"line\">.class &#123;</div><div class=\"line\">    .my-mixin;</div><div class=\"line\">    .my-other-mixin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">----------- Output -----------</div><div class=\"line\">.my-mixin &#123;</div><div class=\"line\">    color: black;</div><div class=\"line\">&#125;</div><div class=\"line\">.class &#123;</div><div class=\"line\">    color: black;</div><div class=\"line\">    background: white;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>可帶入參數 <code>.shadow(@color)</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">.border-radius(@radius) &#123;</div><div class=\"line\">  -webkit-border-radius: @radius;</div><div class=\"line\">     -moz-border-radius: @radius;</div><div class=\"line\">          border-radius: @radius;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.header &#123;</div><div class=\"line\">    .border-radius(4px);</div><div class=\"line\">&#125;</div><div class=\"line\">.button &#123;</div><div class=\"line\">    .border-radius(6px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"rwd-寫法參考\"></a></p>\n<h2 id=\"RWD-寫法參考\"><a href=\"#RWD-寫法參考\" class=\"headerlink\" title=\"RWD 寫法參考\"></a>RWD 寫法參考</h2><ul>\n<li>直接寫<code>@media</code>條件式</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">header &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">    @media only screen and (min-width : 768px) &#123; color: green; &#125;</div><div class=\"line\">    @media only screen and (min-width : 1024px) &#123; color: blue; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>透過變數宣告條件式</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@smartphones: ~\"only screen and (max-width: 479px)\";</div><div class=\"line\"></div><div class=\"line\">.foo &#123;</div><div class=\"line\">    font-size: 2.4em;</div><div class=\"line\"></div><div class=\"line\">    @media @smartphones &#123;</div><div class=\"line\">        font-size: 1.8em;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">@smartphones: ~\"only screen and (max-width: 479px)\";</div><div class=\"line\">@tablets: ~\"only screen and (min-width: 768px) and (max-width: 959px)\";</div><div class=\"line\"></div><div class=\"line\">@font-size--large: 24px;</div><div class=\"line\">@font-size--medium: 12px;</div><div class=\"line\"></div><div class=\"line\">.foo &#123;</div><div class=\"line\">    font-size: @font-size--large;</div><div class=\"line\"></div><div class=\"line\">    @media @smartphones, @tablets &#123;</div><div class=\"line\">        font-size: @font-size--medium;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"Linux相關筆記","date":"2016-08-28T08:17:52.000Z","photos":["https://monovm.com/images/unzip-centos.png"],"_content":"<!-- MarkdownTOC -->\n\n- [Linux 相關資料](#linux-相關資料)\n    - [使用者磁碟限額](#使用者磁碟限額)\n    - [開機自動掛載遠端共享資料夾](#開機自動掛載遠端共享資料夾)\n        - [手動掛載指令步驟 :](#手動掛載指令步驟-)\n        - [改為開機後自動掛載步驟：](#改為開機後自動掛載步驟：)\n    - [使用crontab幫工作排程](#使用crontab幫工作排程)\n    - [建立群組共用目錄](#建立群組共用目錄)\n    - [AWS EC2\\(Ubuntu\\)的使用者改用密碼登入](#aws-ec2ubuntu的使用者改用密碼登入)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"linux-相關資料\"></a>\n# Linux 相關資料\n\n<a name=\"使用者磁碟限額\"></a>\n## 使用者磁碟限額\n\n* 參考資料：\n    1. [quota - 磁碟配額](http://note.drx.tw/2008/03/disk-quota.html)\n    2. [Linux 磁碟配額 (Quota)](http://linux.vbird.org/linux_basic/0420quota/0420quota-fc4.php)\n\n#### 檢查使用者磁碟限額\n\n````bash\nsudo quota <UserName>\n````\n\n#### 啟動 / 關閉磁碟限額\n\n````bash\nsudo quotaon -av  啟動\nsudo quotaoff -a    全部關閉\nsudo quotaoff -u <UserName>\n````\n\n#### 編輯 使用者/群組 磁碟限額規則\n\n````bash\njonny@gutsy:~$ sudo edquota -u UserName [Enter]\njonny@gutsy:~$ sudo edquota -g GroupName [Enter]\nDisk quotas for user jonny (uid 1004):\nFilesystem  blocks  soft  hard inodes soft hard\n/dev/sda7   24     100000 102400   7  0  0\n\n// 此範例為限制 100 MB，如想限制 1 GB 請改用 1000000 及 1024000。\n````\n\n* 各欄介紹\n    - 第１欄 (Filesystem)：啟用 quota 的檔案系統名增。\n    - 第２欄 (blocks)：使用者已使用的區塊數量。\n    - 第３欄 (soft)：非強制性的磁碟空間限制，單位為 KB。\n    - 第４欄 (hard)：強制性的磁碟空間限制，單位為 KB。\n    - 第５欄 (inodes)：使用者已使用的檔案數目。\n    - 第６欄 (soft)：非強制性的 inode 限制。\n    - 第７欄 (hard)：強制性的 inode 限制。\n\n<a name=\"開機自動掛載遠端共享資料夾\"></a>\n## 開機自動掛載遠端共享資料夾\n由於 Local 的資料備份是透過 mount nas 所分享的資料夾來備份資料\n所以每次重開機或 nas 出問題，mount 就會斷掉，必須手動在重新 mount 上\n\n<a name=\"手動掛載指令步驟-\"></a>\n### 手動掛載指令步驟 :\n1. 請使用root來執行\n2. mount指令(20150826更新) : `mount -t cifs -o username=oooo,password=oooo //192.168.68.101/homes/ubuntu /mnt/nas`\n3. 檢查指令 : `df -h` 或 `df -Th /mnt/nas`\n4. unmount指令 : `umount /mnt/nas`\n\n<a name=\"改為開機後自動掛載步驟：\"></a>\n### 改為開機後自動掛載步驟：\n[參考資料](http://ubuntuforums.org/showthread.php?t=1806455)\n\n- 安裝 smbfs\n\n````bash\nsudo apt-get install smbfs\n````\n- 建立本機對應目錄\n\n````bash\nsudo mkdir /mnt/nas\n````\n- 加入遠端分享資料夾的帳號密碼\n\n````bash\nsudo vim /root/.cifspwd\n\n# .cifspwd 檔案內容\nusername=oooo\npassword=oooo\n````\n- 修改 fstab (/etc/fstab) 來增加重開機後自動掛載的資料\n\n````bash\n//192.168.68.101/homes/ubuntu /mnt/nas cifs user,uid=1000,gid=users,credentials=/root/.cifspwd 0 0\n\n# 當中的 uid 為 /mnt/nas 建立的初始帳戶 uid (soar:1000)\n# 使用 id -u username 去檢查 uid\n````\n- 檢查是否成功\n    - 如果已經掛載，先解除掛載 `umount /mnt/nas`\n    - 然後在透過下列語法模擬開機後執行的 mount 動作 `sudo mount -a`\n    - `df -h` 來檢查是否 mount 成功\n\n<a name=\"使用crontab幫工作排程\"></a>\n## 使用crontab幫工作排程\n* `crontab -l` : 列出目前使用者的排程工作\n* `crontab -e` : 編輯目前使用者的排程工作\n\n````bash\n10 3 * * 6 /bin/bash -c 'mysql_backup/backup.sh >> /mnt/nas/mysql_backup/backup.log 2>&1'\n30 3 * * 6 /bin/bash -c 'weekly/backup.sh >> /mnt/nas/weekly/backup.log 2>&1'\n0 4 * * 6 /bin/sh -c 'system_backup/backup.sh >> /mnt/nas/system_backup/backup.log 2>&1’\n````\n\n![crontab時間含義](http://i.imgur.com/OGytWih.gif)\n\n<a name=\"建立群組共用目錄\"></a>\n## 建立群組共用目錄\n[參考資料](http://www.babyface2.com/NetAdmin/41200906basic/)\n\n**請先切換成root帳號**\n\n- 建立使用者帳號\nI\n````bash\nuseradd -s /bin/bash -G sudo -m -d /home/username username -p 密碼\n````\n- 建立群組帳號，GID使用50000\n\n````bash\ngroupadd -g 50000 {group-name}\n````\n- 將使用者帳號加入群組\n    - 使用指令「vigr」(vi /etc/group的意思)，接著大寫G到最下面\n    - 會看到剛剛建立的群組名稱與GID\n\n    ````bash\n    {group-name}:x:50000:\n    ````\n- 在這行後面加上使用者帳號，多數使用者以逗號隔開\n\n````bash\n{group-name}:x:50000:user1,user2,user3\n````\n\n- 建立目錄來共享\n\n````bash\nmkdir /home/{group-name}/shard-folder\n````\n- 變更目錄權限\n\n````bash\nhgrp {group-name}  /home/{group-name}/shard-folder\n````\n- 變更目錄權限(其中的x表示其他賬戶的存取權限，4:可讀，5:可讀＋執行，7:可讀寫＋執行)\n\n````bash\nchmod 277x /home/{group-name}/shard-folder\n````\n\n<a name=\"aws-ec2ubuntu的使用者改用密碼登入\"></a>\n## AWS EC2(Ubuntu)的使用者改用密碼登入\n\n先使用正常的方式登入\n\n````bash\nssh -i xxxx.pem ubuntu@ip\n````\n\n修改 sshd_config 檔，將PasswordAuthentication 改成 yes 後存檔離開\n\n````bash\nsudo vim /etc/ssh/sshd_config\n\nsudo service ssh restart (ssh服務重啟)\n````\n\n重新改用使用者帳號登入，就需要打密碼了，**前提是這個賬戶有設定密碼**\n\n","source":"_posts/Linux相關筆記.md","raw":"---\nlayout: post\ntitle: Linux相關筆記\ndate: 2016-08-28 16:17:52\ntags:\n - linux\n - crontab\n - mount\ncategories:\n - Linux\nphotos:\n - https://monovm.com/images/unzip-centos.png\n---\n<!-- MarkdownTOC -->\n\n- [Linux 相關資料](#linux-相關資料)\n    - [使用者磁碟限額](#使用者磁碟限額)\n    - [開機自動掛載遠端共享資料夾](#開機自動掛載遠端共享資料夾)\n        - [手動掛載指令步驟 :](#手動掛載指令步驟-)\n        - [改為開機後自動掛載步驟：](#改為開機後自動掛載步驟：)\n    - [使用crontab幫工作排程](#使用crontab幫工作排程)\n    - [建立群組共用目錄](#建立群組共用目錄)\n    - [AWS EC2\\(Ubuntu\\)的使用者改用密碼登入](#aws-ec2ubuntu的使用者改用密碼登入)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"linux-相關資料\"></a>\n# Linux 相關資料\n\n<a name=\"使用者磁碟限額\"></a>\n## 使用者磁碟限額\n\n* 參考資料：\n    1. [quota - 磁碟配額](http://note.drx.tw/2008/03/disk-quota.html)\n    2. [Linux 磁碟配額 (Quota)](http://linux.vbird.org/linux_basic/0420quota/0420quota-fc4.php)\n\n#### 檢查使用者磁碟限額\n\n````bash\nsudo quota <UserName>\n````\n\n#### 啟動 / 關閉磁碟限額\n\n````bash\nsudo quotaon -av  啟動\nsudo quotaoff -a    全部關閉\nsudo quotaoff -u <UserName>\n````\n\n#### 編輯 使用者/群組 磁碟限額規則\n\n````bash\njonny@gutsy:~$ sudo edquota -u UserName [Enter]\njonny@gutsy:~$ sudo edquota -g GroupName [Enter]\nDisk quotas for user jonny (uid 1004):\nFilesystem  blocks  soft  hard inodes soft hard\n/dev/sda7   24     100000 102400   7  0  0\n\n// 此範例為限制 100 MB，如想限制 1 GB 請改用 1000000 及 1024000。\n````\n\n* 各欄介紹\n    - 第１欄 (Filesystem)：啟用 quota 的檔案系統名增。\n    - 第２欄 (blocks)：使用者已使用的區塊數量。\n    - 第３欄 (soft)：非強制性的磁碟空間限制，單位為 KB。\n    - 第４欄 (hard)：強制性的磁碟空間限制，單位為 KB。\n    - 第５欄 (inodes)：使用者已使用的檔案數目。\n    - 第６欄 (soft)：非強制性的 inode 限制。\n    - 第７欄 (hard)：強制性的 inode 限制。\n\n<a name=\"開機自動掛載遠端共享資料夾\"></a>\n## 開機自動掛載遠端共享資料夾\n由於 Local 的資料備份是透過 mount nas 所分享的資料夾來備份資料\n所以每次重開機或 nas 出問題，mount 就會斷掉，必須手動在重新 mount 上\n\n<a name=\"手動掛載指令步驟-\"></a>\n### 手動掛載指令步驟 :\n1. 請使用root來執行\n2. mount指令(20150826更新) : `mount -t cifs -o username=oooo,password=oooo //192.168.68.101/homes/ubuntu /mnt/nas`\n3. 檢查指令 : `df -h` 或 `df -Th /mnt/nas`\n4. unmount指令 : `umount /mnt/nas`\n\n<a name=\"改為開機後自動掛載步驟：\"></a>\n### 改為開機後自動掛載步驟：\n[參考資料](http://ubuntuforums.org/showthread.php?t=1806455)\n\n- 安裝 smbfs\n\n````bash\nsudo apt-get install smbfs\n````\n- 建立本機對應目錄\n\n````bash\nsudo mkdir /mnt/nas\n````\n- 加入遠端分享資料夾的帳號密碼\n\n````bash\nsudo vim /root/.cifspwd\n\n# .cifspwd 檔案內容\nusername=oooo\npassword=oooo\n````\n- 修改 fstab (/etc/fstab) 來增加重開機後自動掛載的資料\n\n````bash\n//192.168.68.101/homes/ubuntu /mnt/nas cifs user,uid=1000,gid=users,credentials=/root/.cifspwd 0 0\n\n# 當中的 uid 為 /mnt/nas 建立的初始帳戶 uid (soar:1000)\n# 使用 id -u username 去檢查 uid\n````\n- 檢查是否成功\n    - 如果已經掛載，先解除掛載 `umount /mnt/nas`\n    - 然後在透過下列語法模擬開機後執行的 mount 動作 `sudo mount -a`\n    - `df -h` 來檢查是否 mount 成功\n\n<a name=\"使用crontab幫工作排程\"></a>\n## 使用crontab幫工作排程\n* `crontab -l` : 列出目前使用者的排程工作\n* `crontab -e` : 編輯目前使用者的排程工作\n\n````bash\n10 3 * * 6 /bin/bash -c 'mysql_backup/backup.sh >> /mnt/nas/mysql_backup/backup.log 2>&1'\n30 3 * * 6 /bin/bash -c 'weekly/backup.sh >> /mnt/nas/weekly/backup.log 2>&1'\n0 4 * * 6 /bin/sh -c 'system_backup/backup.sh >> /mnt/nas/system_backup/backup.log 2>&1’\n````\n\n![crontab時間含義](http://i.imgur.com/OGytWih.gif)\n\n<a name=\"建立群組共用目錄\"></a>\n## 建立群組共用目錄\n[參考資料](http://www.babyface2.com/NetAdmin/41200906basic/)\n\n**請先切換成root帳號**\n\n- 建立使用者帳號\nI\n````bash\nuseradd -s /bin/bash -G sudo -m -d /home/username username -p 密碼\n````\n- 建立群組帳號，GID使用50000\n\n````bash\ngroupadd -g 50000 {group-name}\n````\n- 將使用者帳號加入群組\n    - 使用指令「vigr」(vi /etc/group的意思)，接著大寫G到最下面\n    - 會看到剛剛建立的群組名稱與GID\n\n    ````bash\n    {group-name}:x:50000:\n    ````\n- 在這行後面加上使用者帳號，多數使用者以逗號隔開\n\n````bash\n{group-name}:x:50000:user1,user2,user3\n````\n\n- 建立目錄來共享\n\n````bash\nmkdir /home/{group-name}/shard-folder\n````\n- 變更目錄權限\n\n````bash\nhgrp {group-name}  /home/{group-name}/shard-folder\n````\n- 變更目錄權限(其中的x表示其他賬戶的存取權限，4:可讀，5:可讀＋執行，7:可讀寫＋執行)\n\n````bash\nchmod 277x /home/{group-name}/shard-folder\n````\n\n<a name=\"aws-ec2ubuntu的使用者改用密碼登入\"></a>\n## AWS EC2(Ubuntu)的使用者改用密碼登入\n\n先使用正常的方式登入\n\n````bash\nssh -i xxxx.pem ubuntu@ip\n````\n\n修改 sshd_config 檔，將PasswordAuthentication 改成 yes 後存檔離開\n\n````bash\nsudo vim /etc/ssh/sshd_config\n\nsudo service ssh restart (ssh服務重啟)\n````\n\n重新改用使用者帳號登入，就需要打密碼了，**前提是這個賬戶有設定密碼**\n\n","slug":"Linux相關筆記","published":1,"updated":"2016-08-28T14:37:21.000Z","comments":1,"link":"","_id":"ciuq46ghk0008scscz9pt9ogk","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#linux-相關資料\">Linux 相關資料</a><ul>\n<li><a href=\"#使用者磁碟限額\">使用者磁碟限額</a></li>\n<li><a href=\"#開機自動掛載遠端共享資料夾\">開機自動掛載遠端共享資料夾</a><ul>\n<li><a href=\"#手動掛載指令步驟-\">手動掛載指令步驟 :</a></li>\n<li><a href=\"#改為開機後自動掛載步驟：\">改為開機後自動掛載步驟：</a></li>\n</ul>\n</li>\n<li><a href=\"#使用crontab幫工作排程\">使用crontab幫工作排程</a></li>\n<li><a href=\"#建立群組共用目錄\">建立群組共用目錄</a></li>\n<li><a href=\"#aws-ec2ubuntu的使用者改用密碼登入\">AWS EC2(Ubuntu)的使用者改用密碼登入</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"linux-相關資料\"></a></p>\n<h1 id=\"Linux-相關資料\"><a href=\"#Linux-相關資料\" class=\"headerlink\" title=\"Linux 相關資料\"></a>Linux 相關資料</h1><p><a name=\"使用者磁碟限額\"></a></p>\n<h2 id=\"使用者磁碟限額\"><a href=\"#使用者磁碟限額\" class=\"headerlink\" title=\"使用者磁碟限額\"></a>使用者磁碟限額</h2><ul>\n<li>參考資料：<ol>\n<li><a href=\"http://note.drx.tw/2008/03/disk-quota.html\" target=\"_blank\" rel=\"external\">quota - 磁碟配額</a></li>\n<li><a href=\"http://linux.vbird.org/linux_basic/0420quota/0420quota-fc4.php\" target=\"_blank\" rel=\"external\">Linux 磁碟配額 (Quota)</a></li>\n</ol>\n</li>\n</ul>\n<h4 id=\"檢查使用者磁碟限額\"><a href=\"#檢查使用者磁碟限額\" class=\"headerlink\" title=\"檢查使用者磁碟限額\"></a>檢查使用者磁碟限額</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo quota &lt;UserName&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"啟動-關閉磁碟限額\"><a href=\"#啟動-關閉磁碟限額\" class=\"headerlink\" title=\"啟動 / 關閉磁碟限額\"></a>啟動 / 關閉磁碟限額</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo quotaon -av  啟動</div><div class=\"line\">sudo quotaoff <span class=\"_\">-a</span>    全部關閉</div><div class=\"line\">sudo quotaoff -u &lt;UserName&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"編輯-使用者-群組-磁碟限額規則\"><a href=\"#編輯-使用者-群組-磁碟限額規則\" class=\"headerlink\" title=\"編輯 使用者/群組 磁碟限額規則\"></a>編輯 使用者/群組 磁碟限額規則</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">jonny@gutsy:~$ sudo edquota -u UserName [Enter]</div><div class=\"line\">jonny@gutsy:~$ sudo edquota -g GroupName [Enter]</div><div class=\"line\">Disk quotas <span class=\"keyword\">for</span> user jonny (uid 1004):</div><div class=\"line\">Filesystem  blocks  soft  hard inodes soft hard</div><div class=\"line\">/dev/sda7   24     100000 102400   7  0  0</div><div class=\"line\"></div><div class=\"line\">// 此範例為限制 100 MB，如想限制 1 GB 請改用 1000000 及 1024000。</div></pre></td></tr></table></figure>\n<ul>\n<li>各欄介紹<ul>\n<li>第１欄 (Filesystem)：啟用 quota 的檔案系統名增。</li>\n<li>第２欄 (blocks)：使用者已使用的區塊數量。</li>\n<li>第３欄 (soft)：非強制性的磁碟空間限制，單位為 KB。</li>\n<li>第４欄 (hard)：強制性的磁碟空間限制，單位為 KB。</li>\n<li>第５欄 (inodes)：使用者已使用的檔案數目。</li>\n<li>第６欄 (soft)：非強制性的 inode 限制。</li>\n<li>第７欄 (hard)：強制性的 inode 限制。</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"開機自動掛載遠端共享資料夾\"></a></p>\n<h2 id=\"開機自動掛載遠端共享資料夾\"><a href=\"#開機自動掛載遠端共享資料夾\" class=\"headerlink\" title=\"開機自動掛載遠端共享資料夾\"></a>開機自動掛載遠端共享資料夾</h2><p>由於 Local 的資料備份是透過 mount nas 所分享的資料夾來備份資料<br>所以每次重開機或 nas 出問題，mount 就會斷掉，必須手動在重新 mount 上</p>\n<p><a name=\"手動掛載指令步驟-\"></a></p>\n<h3 id=\"手動掛載指令步驟\"><a href=\"#手動掛載指令步驟\" class=\"headerlink\" title=\"手動掛載指令步驟 :\"></a>手動掛載指令步驟 :</h3><ol>\n<li>請使用root來執行</li>\n<li>mount指令(20150826更新) : <code>mount -t cifs -o username=oooo,password=oooo //192.168.68.101/homes/ubuntu /mnt/nas</code></li>\n<li>檢查指令 : <code>df -h</code> 或 <code>df -Th /mnt/nas</code></li>\n<li>unmount指令 : <code>umount /mnt/nas</code></li>\n</ol>\n<p><a name=\"改為開機後自動掛載步驟：\"></a></p>\n<h3 id=\"改為開機後自動掛載步驟：\"><a href=\"#改為開機後自動掛載步驟：\" class=\"headerlink\" title=\"改為開機後自動掛載步驟：\"></a>改為開機後自動掛載步驟：</h3><p><a href=\"http://ubuntuforums.org/showthread.php?t=1806455\" target=\"_blank\" rel=\"external\">參考資料</a></p>\n<ul>\n<li>安裝 smbfs</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install smbfs</div></pre></td></tr></table></figure>\n<ul>\n<li>建立本機對應目錄</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo mkdir /mnt/nas</div></pre></td></tr></table></figure>\n<ul>\n<li>加入遠端分享資料夾的帳號密碼</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vim /root/.cifspwd</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># .cifspwd 檔案內容</span></div><div class=\"line\">username=oooo</div><div class=\"line\">password=oooo</div></pre></td></tr></table></figure>\n<ul>\n<li>修改 fstab (/etc/fstab) 來增加重開機後自動掛載的資料</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//192.168.68.101/homes/ubuntu /mnt/nas cifs user,uid=1000,gid=users,credentials=/root/.cifspwd 0 0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 當中的 uid 為 /mnt/nas 建立的初始帳戶 uid (soar:1000)</span></div><div class=\"line\"><span class=\"comment\"># 使用 id -u username 去檢查 uid</span></div></pre></td></tr></table></figure>\n<ul>\n<li>檢查是否成功<ul>\n<li>如果已經掛載，先解除掛載 <code>umount /mnt/nas</code></li>\n<li>然後在透過下列語法模擬開機後執行的 mount 動作 <code>sudo mount -a</code></li>\n<li><code>df -h</code> 來檢查是否 mount 成功</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"使用crontab幫工作排程\"></a></p>\n<h2 id=\"使用crontab幫工作排程\"><a href=\"#使用crontab幫工作排程\" class=\"headerlink\" title=\"使用crontab幫工作排程\"></a>使用crontab幫工作排程</h2><ul>\n<li><code>crontab -l</code> : 列出目前使用者的排程工作</li>\n<li><code>crontab -e</code> : 編輯目前使用者的排程工作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">10 3 * * 6 /bin/bash -c <span class=\"string\">'mysql_backup/backup.sh &gt;&gt; /mnt/nas/mysql_backup/backup.log 2&gt;&amp;1'</span></div><div class=\"line\">30 3 * * 6 /bin/bash -c <span class=\"string\">'weekly/backup.sh &gt;&gt; /mnt/nas/weekly/backup.log 2&gt;&amp;1'</span></div><div class=\"line\">0 4 * * 6 /bin/sh -c <span class=\"string\">'system_backup/backup.sh &gt;&gt; /mnt/nas/system_backup/backup.log 2&gt;&amp;1’</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://i.imgur.com/OGytWih.gif\" alt=\"crontab時間含義\"></p>\n<p><a name=\"建立群組共用目錄\"></a></p>\n<h2 id=\"建立群組共用目錄\"><a href=\"#建立群組共用目錄\" class=\"headerlink\" title=\"建立群組共用目錄\"></a>建立群組共用目錄</h2><p><a href=\"http://www.babyface2.com/NetAdmin/41200906basic/\" target=\"_blank\" rel=\"external\">參考資料</a></p>\n<p><strong>請先切換成root帳號</strong></p>\n<ul>\n<li><p>建立使用者帳號<br>I</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">useradd <span class=\"_\">-s</span> /bin/bash -G sudo -m <span class=\"_\">-d</span> /home/username username -p 密碼</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立群組帳號，GID使用50000</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">groupadd -g 50000 &#123;group-name&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>將使用者帳號加入群組</p>\n<ul>\n<li>使用指令「vigr」(vi /etc/group的意思)，接著大寫G到最下面</li>\n<li><p>會看到剛剛建立的群組名稱與GID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;group-name&#125;:x:50000:</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在這行後面加上使用者帳號，多數使用者以逗號隔開</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;group-name&#125;:x:50000:user1,user2,user3</div></pre></td></tr></table></figure>\n<ul>\n<li>建立目錄來共享</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir /home/&#123;group-name&#125;/shard-folder</div></pre></td></tr></table></figure>\n<ul>\n<li>變更目錄權限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">hgrp &#123;group-name&#125;  /home/&#123;group-name&#125;/shard-folder</div></pre></td></tr></table></figure>\n<ul>\n<li>變更目錄權限(其中的x表示其他賬戶的存取權限，4:可讀，5:可讀＋執行，7:可讀寫＋執行)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">chmod 277x /home/&#123;group-name&#125;/shard-folder</div></pre></td></tr></table></figure>\n<p><a name=\"aws-ec2ubuntu的使用者改用密碼登入\"></a></p>\n<h2 id=\"AWS-EC2-Ubuntu-的使用者改用密碼登入\"><a href=\"#AWS-EC2-Ubuntu-的使用者改用密碼登入\" class=\"headerlink\" title=\"AWS EC2(Ubuntu)的使用者改用密碼登入\"></a>AWS EC2(Ubuntu)的使用者改用密碼登入</h2><p>先使用正常的方式登入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh -i xxxx.pem ubuntu@ip</div></pre></td></tr></table></figure>\n<p>修改 sshd_config 檔，將PasswordAuthentication 改成 yes 後存檔離開</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/ssh/sshd_config</div><div class=\"line\"></div><div class=\"line\">sudo service ssh restart (ssh服務重啟)</div></pre></td></tr></table></figure>\n<p>重新改用使用者帳號登入，就需要打密碼了，<strong>前提是這個賬戶有設定密碼</strong></p>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#linux-相關資料\">Linux 相關資料</a><ul>\n<li><a href=\"#使用者磁碟限額\">使用者磁碟限額</a></li>\n<li><a href=\"#開機自動掛載遠端共享資料夾\">開機自動掛載遠端共享資料夾</a><ul>\n<li><a href=\"#手動掛載指令步驟-\">手動掛載指令步驟 :</a></li>\n<li><a href=\"#改為開機後自動掛載步驟：\">改為開機後自動掛載步驟：</a></li>\n</ul>\n</li>\n<li><a href=\"#使用crontab幫工作排程\">使用crontab幫工作排程</a></li>\n<li><a href=\"#建立群組共用目錄\">建立群組共用目錄</a></li>\n<li><a href=\"#aws-ec2ubuntu的使用者改用密碼登入\">AWS EC2(Ubuntu)的使用者改用密碼登入</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"linux-相關資料\"></a></p>\n<h1 id=\"Linux-相關資料\"><a href=\"#Linux-相關資料\" class=\"headerlink\" title=\"Linux 相關資料\"></a>Linux 相關資料</h1><p><a name=\"使用者磁碟限額\"></a></p>\n<h2 id=\"使用者磁碟限額\"><a href=\"#使用者磁碟限額\" class=\"headerlink\" title=\"使用者磁碟限額\"></a>使用者磁碟限額</h2><ul>\n<li>參考資料：<ol>\n<li><a href=\"http://note.drx.tw/2008/03/disk-quota.html\">quota - 磁碟配額</a></li>\n<li><a href=\"http://linux.vbird.org/linux_basic/0420quota/0420quota-fc4.php\">Linux 磁碟配額 (Quota)</a></li>\n</ol>\n</li>\n</ul>\n<h4 id=\"檢查使用者磁碟限額\"><a href=\"#檢查使用者磁碟限額\" class=\"headerlink\" title=\"檢查使用者磁碟限額\"></a>檢查使用者磁碟限額</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo quota &lt;UserName&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"啟動-關閉磁碟限額\"><a href=\"#啟動-關閉磁碟限額\" class=\"headerlink\" title=\"啟動 / 關閉磁碟限額\"></a>啟動 / 關閉磁碟限額</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo quotaon -av  啟動</div><div class=\"line\">sudo quotaoff <span class=\"_\">-a</span>    全部關閉</div><div class=\"line\">sudo quotaoff -u &lt;UserName&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"編輯-使用者-群組-磁碟限額規則\"><a href=\"#編輯-使用者-群組-磁碟限額規則\" class=\"headerlink\" title=\"編輯 使用者/群組 磁碟限額規則\"></a>編輯 使用者/群組 磁碟限額規則</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">jonny@gutsy:~$ sudo edquota -u UserName [Enter]</div><div class=\"line\">jonny@gutsy:~$ sudo edquota -g GroupName [Enter]</div><div class=\"line\">Disk quotas <span class=\"keyword\">for</span> user jonny (uid 1004):</div><div class=\"line\">Filesystem  blocks  soft  hard inodes soft hard</div><div class=\"line\">/dev/sda7   24     100000 102400   7  0  0</div><div class=\"line\"></div><div class=\"line\">// 此範例為限制 100 MB，如想限制 1 GB 請改用 1000000 及 1024000。</div></pre></td></tr></table></figure>\n<ul>\n<li>各欄介紹<ul>\n<li>第１欄 (Filesystem)：啟用 quota 的檔案系統名增。</li>\n<li>第２欄 (blocks)：使用者已使用的區塊數量。</li>\n<li>第３欄 (soft)：非強制性的磁碟空間限制，單位為 KB。</li>\n<li>第４欄 (hard)：強制性的磁碟空間限制，單位為 KB。</li>\n<li>第５欄 (inodes)：使用者已使用的檔案數目。</li>\n<li>第６欄 (soft)：非強制性的 inode 限制。</li>\n<li>第７欄 (hard)：強制性的 inode 限制。</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"開機自動掛載遠端共享資料夾\"></a></p>\n<h2 id=\"開機自動掛載遠端共享資料夾\"><a href=\"#開機自動掛載遠端共享資料夾\" class=\"headerlink\" title=\"開機自動掛載遠端共享資料夾\"></a>開機自動掛載遠端共享資料夾</h2><p>由於 Local 的資料備份是透過 mount nas 所分享的資料夾來備份資料<br>所以每次重開機或 nas 出問題，mount 就會斷掉，必須手動在重新 mount 上</p>\n<p><a name=\"手動掛載指令步驟-\"></a></p>\n<h3 id=\"手動掛載指令步驟\"><a href=\"#手動掛載指令步驟\" class=\"headerlink\" title=\"手動掛載指令步驟 :\"></a>手動掛載指令步驟 :</h3><ol>\n<li>請使用root來執行</li>\n<li>mount指令(20150826更新) : <code>mount -t cifs -o username=oooo,password=oooo //192.168.68.101/homes/ubuntu /mnt/nas</code></li>\n<li>檢查指令 : <code>df -h</code> 或 <code>df -Th /mnt/nas</code></li>\n<li>unmount指令 : <code>umount /mnt/nas</code></li>\n</ol>\n<p><a name=\"改為開機後自動掛載步驟：\"></a></p>\n<h3 id=\"改為開機後自動掛載步驟：\"><a href=\"#改為開機後自動掛載步驟：\" class=\"headerlink\" title=\"改為開機後自動掛載步驟：\"></a>改為開機後自動掛載步驟：</h3><p><a href=\"http://ubuntuforums.org/showthread.php?t=1806455\">參考資料</a></p>\n<ul>\n<li>安裝 smbfs</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install smbfs</div></pre></td></tr></table></figure>\n<ul>\n<li>建立本機對應目錄</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo mkdir /mnt/nas</div></pre></td></tr></table></figure>\n<ul>\n<li>加入遠端分享資料夾的帳號密碼</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vim /root/.cifspwd</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># .cifspwd 檔案內容</span></div><div class=\"line\">username=oooo</div><div class=\"line\">password=oooo</div></pre></td></tr></table></figure>\n<ul>\n<li>修改 fstab (/etc/fstab) 來增加重開機後自動掛載的資料</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//192.168.68.101/homes/ubuntu /mnt/nas cifs user,uid=1000,gid=users,credentials=/root/.cifspwd 0 0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 當中的 uid 為 /mnt/nas 建立的初始帳戶 uid (soar:1000)</span></div><div class=\"line\"><span class=\"comment\"># 使用 id -u username 去檢查 uid</span></div></pre></td></tr></table></figure>\n<ul>\n<li>檢查是否成功<ul>\n<li>如果已經掛載，先解除掛載 <code>umount /mnt/nas</code></li>\n<li>然後在透過下列語法模擬開機後執行的 mount 動作 <code>sudo mount -a</code></li>\n<li><code>df -h</code> 來檢查是否 mount 成功</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"使用crontab幫工作排程\"></a></p>\n<h2 id=\"使用crontab幫工作排程\"><a href=\"#使用crontab幫工作排程\" class=\"headerlink\" title=\"使用crontab幫工作排程\"></a>使用crontab幫工作排程</h2><ul>\n<li><code>crontab -l</code> : 列出目前使用者的排程工作</li>\n<li><code>crontab -e</code> : 編輯目前使用者的排程工作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">10 3 * * 6 /bin/bash -c <span class=\"string\">'mysql_backup/backup.sh &gt;&gt; /mnt/nas/mysql_backup/backup.log 2&gt;&amp;1'</span></div><div class=\"line\">30 3 * * 6 /bin/bash -c <span class=\"string\">'weekly/backup.sh &gt;&gt; /mnt/nas/weekly/backup.log 2&gt;&amp;1'</span></div><div class=\"line\">0 4 * * 6 /bin/sh -c <span class=\"string\">'system_backup/backup.sh &gt;&gt; /mnt/nas/system_backup/backup.log 2&gt;&amp;1’</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://i.imgur.com/OGytWih.gif\" alt=\"crontab時間含義\"></p>\n<p><a name=\"建立群組共用目錄\"></a></p>\n<h2 id=\"建立群組共用目錄\"><a href=\"#建立群組共用目錄\" class=\"headerlink\" title=\"建立群組共用目錄\"></a>建立群組共用目錄</h2><p><a href=\"http://www.babyface2.com/NetAdmin/41200906basic/\">參考資料</a></p>\n<p><strong>請先切換成root帳號</strong></p>\n<ul>\n<li><p>建立使用者帳號<br>I</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">useradd <span class=\"_\">-s</span> /bin/bash -G sudo -m <span class=\"_\">-d</span> /home/username username -p 密碼</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立群組帳號，GID使用50000</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">groupadd -g 50000 &#123;group-name&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>將使用者帳號加入群組</p>\n<ul>\n<li>使用指令「vigr」(vi /etc/group的意思)，接著大寫G到最下面</li>\n<li><p>會看到剛剛建立的群組名稱與GID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;group-name&#125;:x:50000:</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在這行後面加上使用者帳號，多數使用者以逗號隔開</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;group-name&#125;:x:50000:user1,user2,user3</div></pre></td></tr></table></figure>\n<ul>\n<li>建立目錄來共享</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir /home/&#123;group-name&#125;/shard-folder</div></pre></td></tr></table></figure>\n<ul>\n<li>變更目錄權限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">hgrp &#123;group-name&#125;  /home/&#123;group-name&#125;/shard-folder</div></pre></td></tr></table></figure>\n<ul>\n<li>變更目錄權限(其中的x表示其他賬戶的存取權限，4:可讀，5:可讀＋執行，7:可讀寫＋執行)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">chmod 277x /home/&#123;group-name&#125;/shard-folder</div></pre></td></tr></table></figure>\n<p><a name=\"aws-ec2ubuntu的使用者改用密碼登入\"></a></p>\n<h2 id=\"AWS-EC2-Ubuntu-的使用者改用密碼登入\"><a href=\"#AWS-EC2-Ubuntu-的使用者改用密碼登入\" class=\"headerlink\" title=\"AWS EC2(Ubuntu)的使用者改用密碼登入\"></a>AWS EC2(Ubuntu)的使用者改用密碼登入</h2><p>先使用正常的方式登入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh -i xxxx.pem ubuntu@ip</div></pre></td></tr></table></figure>\n<p>修改 sshd_config 檔，將PasswordAuthentication 改成 yes 後存檔離開</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/ssh/sshd_config</div><div class=\"line\"></div><div class=\"line\">sudo service ssh restart (ssh服務重啟)</div></pre></td></tr></table></figure>\n<p>重新改用使用者帳號登入，就需要打密碼了，<strong>前提是這個賬戶有設定密碼</strong></p>\n"},{"layout":"post","title":"PostCSS筆記","author":"Soar Lin","date":"2016-08-28T10:26:47.000Z","_content":"<!-- MarkdownTOC -->\n\n- [PostCSS](#postcss)\n  - [搭配 Plugin](#搭配-plugin)\n  - [變數](#變數)\n  - [計算](#計算)\n  - [顏色處理](#顏色處理)\n  - [mixins 混入](#mixins-混入)\n  - [RWD 寫法參考](#rwd-寫法參考)\n\n<!-- /MarkdownTOC -->\n\n<a name=\"postcss\"></a>\n# PostCSS\n\n<a name=\"搭配-plugin\"></a>\n## 搭配 Plugin\n* 需搭配安裝\n  * `postcss-import`\n  * `postcss-mixins`\n  * `postcss-nested`\n  * `postcss-nextcss`\n  * <del>`autoprefixer`</del>, 由於 `postcss-next` 已經自動加入這項功能，因此需要移除 <del>`autoprefixer`</del>\n\n<a name=\"變數\"></a>\n## 變數\n* 定義在 `:root { }` 裡面\n* 使用時透過 `var(變數)` 來使用\n\n````css\n:root {\n    --mainColor: #4fc5cf;\n    --fontColor: #eee;\n}\n\nbody {\n    background-color: var(--mainColor);\n    color: var(--fontColor);\n}\n````\n\n<a name=\"計算\"></a>\n## 計算\n* 使用function `calc`\n\n````css\n:root {\n    --spaceUnit: 10px;\n}\n.mt-20 {\n    margin-top: calc(var(--spaceUnit) * 2);\n}\n````\n\n<a name=\"顏色處理\"></a>\n## 顏色處理\n* `color( [ <color> | <hue> ] <color-adjuster>* )`\n* color-adjuster\n  * `[red( | green( | blue( | alpha( | a(] ['+' | '-']? [<number> | <percentage>] )`\n  * 色調值 HSL中的H `hue( | h(] ['+' | '-' | '*']? <angle> )`\n  * 飽和度 HSL中的S `saturation( | s(] ['+' | '-' | '*']? <percentage> )`\n  * 亮度 HSL中的L `lightness( | l(] ['+' | '-' | '*']? <percentage> )`\n  * 調白 `whiteness( | w(] ['+' | '-' | '*']? <percentage> )` or `tint( <percentage> )`\n  * 調黑 `blackness( | b(] ['+' | '-' | '*']? <percentage> )` or `shade( <percentage> )`\n\n````css\nwhatever {\n    color: color(red a(10%));\n\n    background-color: color(red lightness(50%));\n    /* == color(red l(50%)); */\n\n    border-color: color(hsla(125, 50%, 50%, .4) saturation(+ 10%) w(- 20%));\n}\n````\n\n<a name=\"mixins-混入\"></a>\n## mixins 混入\n* 需安裝 `postcss-mixins`\n* 定義 `@define-mixin 名稱 $param1, $param2(有預設值)`\n* 使用 `@mixin 名稱 $param1` or `@mixin 名稱 $param1 $param2`\n\n````scss\n@define-mixin icon $network, $color: blue {\n    .icon.is-$(network) {\n        color: $color;\n        @mixin-content;\n    }\n    .icon.is-$(network):hover {\n        color: white;\n        background: $color;\n    }\n}\n\n@mixin icon twitter {\n    background: url(twt.png);\n}\n@mixin icon youtube, red {\n    background: url(youtube.png);\n}\n````\n\n<a name=\"rwd-寫法參考\"></a>\n## RWD 寫法參考\n* 定義不同尺寸 `@custom-media --tablets (max-width: 992px);`\n* 使用時 `@media (--tablets) { ... }`\n\n````scss\n@custom-media --phone (width < 768px);\n@custom-media --tablets (width <= 992px);\n\n.banner {\n    width: 666px;\n\n    @media(--tablets) {\n        width: 100%;\n        max-width: 550px;\n    }\n    @media(--phone) {\n        width: 100%;\n    }\n}\n````\n","source":"_posts/PostCSS.md","raw":"---\nlayout: post\ntitle: PostCSS筆記\nauthor: Soar Lin\ndate: 2016-08-28 18:26:47\ntags:\n  - mixins\n  - postcss\n  - RWD\n  - color\n  - css-post-processor\ncategories:\n - Frontend\n---\n<!-- MarkdownTOC -->\n\n- [PostCSS](#postcss)\n  - [搭配 Plugin](#搭配-plugin)\n  - [變數](#變數)\n  - [計算](#計算)\n  - [顏色處理](#顏色處理)\n  - [mixins 混入](#mixins-混入)\n  - [RWD 寫法參考](#rwd-寫法參考)\n\n<!-- /MarkdownTOC -->\n\n<a name=\"postcss\"></a>\n# PostCSS\n\n<a name=\"搭配-plugin\"></a>\n## 搭配 Plugin\n* 需搭配安裝\n  * `postcss-import`\n  * `postcss-mixins`\n  * `postcss-nested`\n  * `postcss-nextcss`\n  * <del>`autoprefixer`</del>, 由於 `postcss-next` 已經自動加入這項功能，因此需要移除 <del>`autoprefixer`</del>\n\n<a name=\"變數\"></a>\n## 變數\n* 定義在 `:root { }` 裡面\n* 使用時透過 `var(變數)` 來使用\n\n````css\n:root {\n    --mainColor: #4fc5cf;\n    --fontColor: #eee;\n}\n\nbody {\n    background-color: var(--mainColor);\n    color: var(--fontColor);\n}\n````\n\n<a name=\"計算\"></a>\n## 計算\n* 使用function `calc`\n\n````css\n:root {\n    --spaceUnit: 10px;\n}\n.mt-20 {\n    margin-top: calc(var(--spaceUnit) * 2);\n}\n````\n\n<a name=\"顏色處理\"></a>\n## 顏色處理\n* `color( [ <color> | <hue> ] <color-adjuster>* )`\n* color-adjuster\n  * `[red( | green( | blue( | alpha( | a(] ['+' | '-']? [<number> | <percentage>] )`\n  * 色調值 HSL中的H `hue( | h(] ['+' | '-' | '*']? <angle> )`\n  * 飽和度 HSL中的S `saturation( | s(] ['+' | '-' | '*']? <percentage> )`\n  * 亮度 HSL中的L `lightness( | l(] ['+' | '-' | '*']? <percentage> )`\n  * 調白 `whiteness( | w(] ['+' | '-' | '*']? <percentage> )` or `tint( <percentage> )`\n  * 調黑 `blackness( | b(] ['+' | '-' | '*']? <percentage> )` or `shade( <percentage> )`\n\n````css\nwhatever {\n    color: color(red a(10%));\n\n    background-color: color(red lightness(50%));\n    /* == color(red l(50%)); */\n\n    border-color: color(hsla(125, 50%, 50%, .4) saturation(+ 10%) w(- 20%));\n}\n````\n\n<a name=\"mixins-混入\"></a>\n## mixins 混入\n* 需安裝 `postcss-mixins`\n* 定義 `@define-mixin 名稱 $param1, $param2(有預設值)`\n* 使用 `@mixin 名稱 $param1` or `@mixin 名稱 $param1 $param2`\n\n````scss\n@define-mixin icon $network, $color: blue {\n    .icon.is-$(network) {\n        color: $color;\n        @mixin-content;\n    }\n    .icon.is-$(network):hover {\n        color: white;\n        background: $color;\n    }\n}\n\n@mixin icon twitter {\n    background: url(twt.png);\n}\n@mixin icon youtube, red {\n    background: url(youtube.png);\n}\n````\n\n<a name=\"rwd-寫法參考\"></a>\n## RWD 寫法參考\n* 定義不同尺寸 `@custom-media --tablets (max-width: 992px);`\n* 使用時 `@media (--tablets) { ... }`\n\n````scss\n@custom-media --phone (width < 768px);\n@custom-media --tablets (width <= 992px);\n\n.banner {\n    width: 666px;\n\n    @media(--tablets) {\n        width: 100%;\n        max-width: 550px;\n    }\n    @media(--phone) {\n        width: 100%;\n    }\n}\n````\n","slug":"PostCSS","published":1,"updated":"2016-08-28T16:18:20.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gho000ascsc53w21j34","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#postcss\">PostCSS</a><ul>\n<li><a href=\"#搭配-plugin\">搭配 Plugin</a></li>\n<li><a href=\"#變數\">變數</a></li>\n<li><a href=\"#計算\">計算</a></li>\n<li><a href=\"#顏色處理\">顏色處理</a></li>\n<li><a href=\"#mixins-混入\">mixins 混入</a></li>\n<li><a href=\"#rwd-寫法參考\">RWD 寫法參考</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"postcss\"></a></p>\n<h1 id=\"PostCSS\"><a href=\"#PostCSS\" class=\"headerlink\" title=\"PostCSS\"></a>PostCSS</h1><p><a name=\"搭配-plugin\"></a></p>\n<h2 id=\"搭配-Plugin\"><a href=\"#搭配-Plugin\" class=\"headerlink\" title=\"搭配 Plugin\"></a>搭配 Plugin</h2><ul>\n<li>需搭配安裝<ul>\n<li><code>postcss-import</code></li>\n<li><code>postcss-mixins</code></li>\n<li><code>postcss-nested</code></li>\n<li><code>postcss-nextcss</code></li>\n<li><del><code>autoprefixer</code></del>, 由於 <code>postcss-next</code> 已經自動加入這項功能，因此需要移除 <del><code>autoprefixer</code></del></li>\n</ul>\n</li>\n</ul>\n<p><a name=\"變數\"></a></p>\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><ul>\n<li>定義在 <code>:root { }</code> 裡面</li>\n<li>使用時透過 <code>var(變數)</code> 來使用</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">--mainColor</span>: <span class=\"number\">#4fc5cf</span>;</div><div class=\"line\">    <span class=\"attribute\">--fontColor</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--mainColor);</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--fontColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"計算\"></a></p>\n<h2 id=\"計算\"><a href=\"#計算\" class=\"headerlink\" title=\"計算\"></a>計算</h2><ul>\n<li>使用function <code>calc</code></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">--spaceUnit</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.mt-20</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"built_in\">calc</span>(var(--spaceUnit) * <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"顏色處理\"></a></p>\n<h2 id=\"顏色處理\"><a href=\"#顏色處理\" class=\"headerlink\" title=\"顏色處理\"></a>顏色處理</h2><ul>\n<li><code>color( [ &lt;color&gt; | &lt;hue&gt; ] &lt;color-adjuster&gt;* )</code></li>\n<li>color-adjuster<ul>\n<li><code>[red( | green( | blue( | alpha( | a(] [&#39;+&#39; | &#39;-&#39;]? [&lt;number&gt; | &lt;percentage&gt;] )</code></li>\n<li>色調值 HSL中的H <code>hue( | h(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;angle&gt; )</code></li>\n<li>飽和度 HSL中的S <code>saturation( | s(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )</code></li>\n<li>亮度 HSL中的L <code>lightness( | l(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )</code></li>\n<li>調白 <code>whiteness( | w(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )</code> or <code>tint( &lt;percentage&gt; )</code></li>\n<li>調黑 <code>blackness( | b(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )</code> or <code>shade( &lt;percentage&gt; )</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">whatever</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">color</span>(red a(10%));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">color</span>(red lightness(50%));</div><div class=\"line\">    <span class=\"comment\">/* == color(red l(50%)); */</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"built_in\">color</span>(hsla(125, 50%, 50%, .4) <span class=\"built_in\">saturation</span>(+ 10%) <span class=\"built_in\">w</span>(- 20%));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"mixins-混入\"></a></p>\n<h2 id=\"mixins-混入\"><a href=\"#mixins-混入\" class=\"headerlink\" title=\"mixins 混入\"></a>mixins 混入</h2><ul>\n<li>需安裝 <code>postcss-mixins</code></li>\n<li>定義 <code>@define-mixin 名稱 $param1, $param2(有預設值)</code></li>\n<li>使用 <code>@mixin 名稱 $param1</code> or <code>@mixin 名稱 $param1 $param2</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\">@define-<span class=\"keyword\">mixin</span> icon <span class=\"variable\">$network</span>, <span class=\"variable\">$color</span>: blue &#123;</div><div class=\"line\">    <span class=\"selector-class\">.icon</span><span class=\"selector-class\">.is-</span>$(network) &#123;</div><div class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</div><div class=\"line\">        @<span class=\"keyword\">mixin</span>-<span class=\"keyword\">content</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-class\">.icon</span><span class=\"selector-class\">.is-</span>$(network):hover &#123;</div><div class=\"line\">        <span class=\"attribute\">color</span>: white;</div><div class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"variable\">$color</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">mixin</span> icon twitter &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: url(twt.png);</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">mixin</span> icon youtube, red &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: url(youtube.png);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"rwd-寫法參考\"></a></p>\n<h2 id=\"RWD-寫法參考\"><a href=\"#RWD-寫法參考\" class=\"headerlink\" title=\"RWD 寫法參考\"></a>RWD 寫法參考</h2><ul>\n<li>定義不同尺寸 <code>@custom-media --tablets (max-width: 992px);</code></li>\n<li>使用時 <code>@media (--tablets) { ... }</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\">@custom-<span class=\"keyword\">media</span> --phone (width &lt; 768px);</div><div class=\"line\">@custom-<span class=\"keyword\">media</span> --tablets (width &lt;= 992px);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.banner</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">666px</span>;</div><div class=\"line\"></div><div class=\"line\">    @<span class=\"keyword\">media</span>(--tablets) &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">max-width</span>: <span class=\"number\">550px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @<span class=\"keyword\">media</span>(--phone) &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#postcss\">PostCSS</a><ul>\n<li><a href=\"#搭配-plugin\">搭配 Plugin</a></li>\n<li><a href=\"#變數\">變數</a></li>\n<li><a href=\"#計算\">計算</a></li>\n<li><a href=\"#顏色處理\">顏色處理</a></li>\n<li><a href=\"#mixins-混入\">mixins 混入</a></li>\n<li><a href=\"#rwd-寫法參考\">RWD 寫法參考</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"postcss\"></a></p>\n<h1 id=\"PostCSS\"><a href=\"#PostCSS\" class=\"headerlink\" title=\"PostCSS\"></a>PostCSS</h1><p><a name=\"搭配-plugin\"></a></p>\n<h2 id=\"搭配-Plugin\"><a href=\"#搭配-Plugin\" class=\"headerlink\" title=\"搭配 Plugin\"></a>搭配 Plugin</h2><ul>\n<li>需搭配安裝<ul>\n<li><code>postcss-import</code></li>\n<li><code>postcss-mixins</code></li>\n<li><code>postcss-nested</code></li>\n<li><code>postcss-nextcss</code></li>\n<li><del><code>autoprefixer</code></del>, 由於 <code>postcss-next</code> 已經自動加入這項功能，因此需要移除 <del><code>autoprefixer</code></del></li>\n</ul>\n</li>\n</ul>\n<p><a name=\"變數\"></a></p>\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><ul>\n<li>定義在 <code>:root { }</code> 裡面</li>\n<li>使用時透過 <code>var(變數)</code> 來使用</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">--mainColor</span>: <span class=\"number\">#4fc5cf</span>;</div><div class=\"line\">    <span class=\"attribute\">--fontColor</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--mainColor);</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--fontColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"計算\"></a></p>\n<h2 id=\"計算\"><a href=\"#計算\" class=\"headerlink\" title=\"計算\"></a>計算</h2><ul>\n<li>使用function <code>calc</code></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">--spaceUnit</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.mt-20</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"built_in\">calc</span>(var(--spaceUnit) * <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"顏色處理\"></a></p>\n<h2 id=\"顏色處理\"><a href=\"#顏色處理\" class=\"headerlink\" title=\"顏色處理\"></a>顏色處理</h2><ul>\n<li><code>color( [ &lt;color&gt; | &lt;hue&gt; ] &lt;color-adjuster&gt;* )</code></li>\n<li>color-adjuster<ul>\n<li><code>[red( | green( | blue( | alpha( | a(] [&#39;+&#39; | &#39;-&#39;]? [&lt;number&gt; | &lt;percentage&gt;] )</code></li>\n<li>色調值 HSL中的H <code>hue( | h(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;angle&gt; )</code></li>\n<li>飽和度 HSL中的S <code>saturation( | s(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )</code></li>\n<li>亮度 HSL中的L <code>lightness( | l(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )</code></li>\n<li>調白 <code>whiteness( | w(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )</code> or <code>tint( &lt;percentage&gt; )</code></li>\n<li>調黑 <code>blackness( | b(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )</code> or <code>shade( &lt;percentage&gt; )</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">whatever</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">color</span>(red a(10%));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">color</span>(red lightness(50%));</div><div class=\"line\">    <span class=\"comment\">/* == color(red l(50%)); */</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"built_in\">color</span>(hsla(125, 50%, 50%, .4) <span class=\"built_in\">saturation</span>(+ 10%) <span class=\"built_in\">w</span>(- 20%));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"mixins-混入\"></a></p>\n<h2 id=\"mixins-混入\"><a href=\"#mixins-混入\" class=\"headerlink\" title=\"mixins 混入\"></a>mixins 混入</h2><ul>\n<li>需安裝 <code>postcss-mixins</code></li>\n<li>定義 <code>@define-mixin 名稱 $param1, $param2(有預設值)</code></li>\n<li>使用 <code>@mixin 名稱 $param1</code> or <code>@mixin 名稱 $param1 $param2</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\">@define-<span class=\"keyword\">mixin</span> icon <span class=\"variable\">$network</span>, <span class=\"variable\">$color</span>: blue &#123;</div><div class=\"line\">    <span class=\"selector-class\">.icon</span><span class=\"selector-class\">.is-</span>$(network) &#123;</div><div class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</div><div class=\"line\">        @<span class=\"keyword\">mixin</span>-<span class=\"keyword\">content</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-class\">.icon</span><span class=\"selector-class\">.is-</span>$(network):hover &#123;</div><div class=\"line\">        <span class=\"attribute\">color</span>: white;</div><div class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"variable\">$color</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">mixin</span> icon twitter &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: url(twt.png);</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">mixin</span> icon youtube, red &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: url(youtube.png);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"rwd-寫法參考\"></a></p>\n<h2 id=\"RWD-寫法參考\"><a href=\"#RWD-寫法參考\" class=\"headerlink\" title=\"RWD 寫法參考\"></a>RWD 寫法參考</h2><ul>\n<li>定義不同尺寸 <code>@custom-media --tablets (max-width: 992px);</code></li>\n<li>使用時 <code>@media (--tablets) { ... }</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\">@custom-<span class=\"keyword\">media</span> --phone (width &lt; 768px);</div><div class=\"line\">@custom-<span class=\"keyword\">media</span> --tablets (width &lt;= 992px);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.banner</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">666px</span>;</div><div class=\"line\"></div><div class=\"line\">    @<span class=\"keyword\">media</span>(--tablets) &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">max-width</span>: <span class=\"number\">550px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @<span class=\"keyword\">media</span>(--phone) &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"SPRINT衝刺計畫 - Part1","author":"Soar Lin","cdn":"header-off","header-img":"","date":"2016-09-15T07:05:04.000Z","_content":"<!-- MarkdownTOC -->\n\n- [SPRINT衝刺計畫](#sprint衝刺計畫)\n    - [做好準備 Set the Stage](#做好準備-set-the-stage)\n        - [先搞定外觀](#先搞定外觀)\n        - [團隊人選](#團隊人選)\n        - [時間與空間](#時間與空間)\n    - [星期一 Monday](#星期一-monday)\n        - [列出衝刺計畫的問題](#列出衝刺計畫的問題)\n        - [示意圖](#示意圖)\n        - [請教專家](#請教專家)\n        - [決定目標](#決定目標)\n    - [促進者筆記](#促進者筆記)\n\n<!-- /MarkdownTOC -->\n\n<a name=\"sprint衝刺計畫\"></a>\n# SPRINT衝刺計畫\n\n期望能夠讓團隊成員完整的空出五天的時間，密集的討論、規劃，來做出產品的原型 (Prototype)，及早透過使用者測試來決定方案是否可行。\n\n1. 星期一 : 界定問題 --> 畫出示意圖 --> 選出重點做為努力目標\n2. 星期二 : 擬出多個相互競爭的潛在方案\n3. 星期三 : 將做一些艱難的決定，並把自己的構想轉化成一個可測試的假說\n4. 星期四 : 將做出一個實際的原型 (Prototype)\n5. 星期五 : 找真實的人，來替原型實地測試\n\n<a name=\"做好準備-set-the-stage\"></a>\n## 做好準備 Set the Stage\n\n[![Set the Stage](https://img.youtube.com/vi/RWjuBX3bW6o/0.jpg)](https://www.youtube.com/watch?v=RWjuBX3bW6o)\n\n衝刺計畫能幫上忙的三種狀況：\n\n- **攸關重大利益**: 解決方案會投入大量時間與金錢時，需確保方向正確，在全速前進\n- **時間緊迫**: 面對一個急迫的期限，為了迅速找到解決問題的方法\n- **陷入僵局**: 有些專案不知如何入手，或失去動力時，它可提供一種解決問題的新方法，產生繼續前進的動力\n\n<a name=\"先搞定外觀\"></a>\n### 先搞定外觀\n顧客先看到的就是產品或服務的外觀，確定合適的外觀後，才能讓用戶較為專心來理解新方案\n\n<a name=\"團隊人選\"></a>\n### 團隊人選\n\n組建一個七個人以內的團隊\n\n* 決策者: 對問題有深入了解，抱持強烈意見和有力標準，幫助團隊找到正確解決方案\n* 財務專家: 解釋錢的流向\n* 行銷專家: 設計傳播公司/產品訊息\n* 顧客專家: 經常面對客戶\n* 技術/物流專家: 了解產品製作/提供什麼\n* 設計專家: 產品設計者\n* 麻煩製造者: 持有反對意見 or 有關解決問題的瘋狂想法，能促使團隊提升表現\n\n**專家客串**: 可以分享所知相關資訊給衝刺團隊\n**促進者**:  管控時間、對話、整個衝刺計畫的過程\n\n<a name=\"時間與空間\"></a>\n### 時間與空間\n\n* 上午10點 ~ 下午5點，每天六個小時\n* 中場休息一下 11:30, 15:30\n* 中午13:00，休息一小時，午餐不要吃太飽\n* 不要使用電子裝置\n    * 休息時間除外\n    * 請走出去使用，不要干擾他人\n* 準備夠大的白板\n* 計時器\n\n<a name=\"星期一-monday\"></a>\n## 星期一 Monday\n週一的結構化討論將為衝刺計畫週開創道路。週一早上，你們將**以終為始**，擬定一個長期目標。接著你們要畫出目標難題的**示意圖**。下午你們則邀請公司的專家來分享他們掌握的資訊。最後你們要選擇一個目標，也就是一週之內可以解決、具有挑戰性的部分問題。\n\n[![Monday](https://img.youtube.com/vi/mC9XoExk_IA/0.jpg)](https://www.youtube.com/watch?v=mC9XoExk_IA)\n\n#### 設定長期目標\n目標應該反映團隊的原則和抱負，確定目標後，將它寫在白板頂部，確保所有人往同一方向前進。\n\n<a name=\"列出衝刺計畫的問題\"></a>\n### 列出衝刺計畫的問題\n以下幾個問題，可以刺激衝刺計畫團隊思考架設和問題：\n\n* 我們希望在這次衝刺計畫中回答什麼問題？\n* 達成我們的長期目標需要哪些條件？\n* 如果我們坐時光機飛到未來，發現我們的專案失敗了，失敗的原因可能會是什麼？\n\n以藍瓶咖啡為例\n\n````\nQ: 接觸新客戶需要什麼條件？\nA: 他們必須信任我們的專業知識。\n\nQ: 我們可以如何把這個假設轉化為一個問題？\nA: 顧客會信任我們的專業知識嗎？\n````\n\n![長期目標與衝刺計畫問題](/images/SPRINT/Goal.jpg)\n\n<a name=\"示意圖\"></a>\n### 示意圖\n每張圖都以顧客為中心，左邊列出關鍵角色。每張圖都是一個故事，有開頭、中間部分與結局。\n\n* 列出重要角色(在左邊)\n* 寫下結局(在右邊)\n* 中間是文字和箭頭\n* 簡單為上: 中間步驟應該介於5~15個左右\n* 尋求協助: 繪製過程中，應不時詢問成員「這個圖看起來對嗎」\n\n![示意圖1](/images/SPRINT/示意圖1.jpg)\n![示意圖2](/images/SPRINT/示意圖2.jpg)\n[示意圖原圖](/images/SPRINT/示意圖_page.jpg)\n\n示意圖可能會持續修改調整，不用太意外\n\n週一剩下的時間，訪問團對中的專家，搜集問題空間的更多資訊。來加入更多問題、更新示意圖，甚至調整長期目標的措辭。\n\n<a name=\"請教專家\"></a>\n### 請教專家\n\n* 策略，先訪問決策者，「這個專案需要什麼條件才能成功？」、「我們有什麼獨特的優勢或機會？」、「最大的風險是什麼？」\n* 顧客的意見，銷售、顧客支援、研究或其他部門\n* 事物的運作方式，設計師、工程師、行銷人員等\n* 之前的努力，檢視一些已經有的方案或半成品，來充實目前構想\n\n訪問流程，每位專家約半小時\n\n1. 介紹衝刺計畫，如果非團隊成員，請向他說明這次衝刺計畫所為何事\n2. 重溫白板上的重點，花兩分鐘向專家介紹長期目標，衝刺計畫問題和示意圖\n3. 打開話題，請專家告訴大家他所知道的，有關目標難題的一切\n4. 問問題，請專家在他額外專長領域提供更多資訊，請他重複認為你們已經知道的東西。他是否能找到示意圖上的缺漏，有在看到什麼機會？「為什麼？」和「請詳述」要求專家提供更多資訊\n5. 更新白板上的內容，增列衝刺計畫問題。修改示意圖甚至是長期目標。\n\n在訪問的過程中，團隊成員寫下「HMW(How Might We)」的筆記，「我們可以如何...?」，準備好便利貼。\n\n1. 便利貼左上角寫著「我們可以如何」(HMW)\n2. 等待\n3. 聽到有意思的話時，靜靜地把它轉化為一條問題\n4. 在便利貼寫下這問題\n5. 撕下便利貼，放在一邊，之後再整理\n\n#### 組織HMW筆記\n\n* 替筆記分類，不用要求完美，先將幾個類別分出來\n* 投票選出重要的HMW\n    1. 每個人給兩張大圓點\n    2. 決策者給四張，因為決策者意見比較重要\n    3. 要求每個人重溫目標和衝刺計畫問題\n    4. 要求每個人選出最有用的HMW問題\n    5. 可以投給自己的筆記，也可兩票都投給同一個筆記\n* 表決結束後，將票數高的筆記貼到示意圖合適的位置\n\n<a name=\"決定目標\"></a>\n### 決定目標\n衝刺計畫的決策者必須要在示意圖上，選定一個目標顧客和一個目標事件。讓衝刺計畫接下來的活動焦點：研擬解決方案、製作和測試原型，全都是基於這個決定。\n\n* 要求決策者決定目標\n* 民意調查(如果決策者需要協助時): 由每一位團員選出自認為最重要的來投票，幫助決策者選定目標\n\n選定目標好，回頭看看衝刺計畫的問題，至少會有一個問題與這目標有關，之後將找這目標顧客來測試解決方案。\n\n<a name=\"促進者筆記\"></a>\n## 促進者筆記\n\n* 尋求許可\n* 持續記錄\n* 明知故問\n* 照顧隊員\n    * 經常休息\n    * 晚一點吃午餐\n    * 午餐別吃太飽\n* 果斷決定，保持進度","source":"_posts/SPRINT衝刺計畫-Part1.md","raw":"---\nlayout: post\ntitle: SPRINT衝刺計畫 - Part1\nauthor: Soar Lin\ncdn: header-off\nheader-img: ''\ndate: 2016-09-15 15:05:04\ntags:\n - SPRINT\n - 衝刺計畫\n - Prototype\ncategories:\n - Workflow\n---\n<!-- MarkdownTOC -->\n\n- [SPRINT衝刺計畫](#sprint衝刺計畫)\n    - [做好準備 Set the Stage](#做好準備-set-the-stage)\n        - [先搞定外觀](#先搞定外觀)\n        - [團隊人選](#團隊人選)\n        - [時間與空間](#時間與空間)\n    - [星期一 Monday](#星期一-monday)\n        - [列出衝刺計畫的問題](#列出衝刺計畫的問題)\n        - [示意圖](#示意圖)\n        - [請教專家](#請教專家)\n        - [決定目標](#決定目標)\n    - [促進者筆記](#促進者筆記)\n\n<!-- /MarkdownTOC -->\n\n<a name=\"sprint衝刺計畫\"></a>\n# SPRINT衝刺計畫\n\n期望能夠讓團隊成員完整的空出五天的時間，密集的討論、規劃，來做出產品的原型 (Prototype)，及早透過使用者測試來決定方案是否可行。\n\n1. 星期一 : 界定問題 --> 畫出示意圖 --> 選出重點做為努力目標\n2. 星期二 : 擬出多個相互競爭的潛在方案\n3. 星期三 : 將做一些艱難的決定，並把自己的構想轉化成一個可測試的假說\n4. 星期四 : 將做出一個實際的原型 (Prototype)\n5. 星期五 : 找真實的人，來替原型實地測試\n\n<a name=\"做好準備-set-the-stage\"></a>\n## 做好準備 Set the Stage\n\n[![Set the Stage](https://img.youtube.com/vi/RWjuBX3bW6o/0.jpg)](https://www.youtube.com/watch?v=RWjuBX3bW6o)\n\n衝刺計畫能幫上忙的三種狀況：\n\n- **攸關重大利益**: 解決方案會投入大量時間與金錢時，需確保方向正確，在全速前進\n- **時間緊迫**: 面對一個急迫的期限，為了迅速找到解決問題的方法\n- **陷入僵局**: 有些專案不知如何入手，或失去動力時，它可提供一種解決問題的新方法，產生繼續前進的動力\n\n<a name=\"先搞定外觀\"></a>\n### 先搞定外觀\n顧客先看到的就是產品或服務的外觀，確定合適的外觀後，才能讓用戶較為專心來理解新方案\n\n<a name=\"團隊人選\"></a>\n### 團隊人選\n\n組建一個七個人以內的團隊\n\n* 決策者: 對問題有深入了解，抱持強烈意見和有力標準，幫助團隊找到正確解決方案\n* 財務專家: 解釋錢的流向\n* 行銷專家: 設計傳播公司/產品訊息\n* 顧客專家: 經常面對客戶\n* 技術/物流專家: 了解產品製作/提供什麼\n* 設計專家: 產品設計者\n* 麻煩製造者: 持有反對意見 or 有關解決問題的瘋狂想法，能促使團隊提升表現\n\n**專家客串**: 可以分享所知相關資訊給衝刺團隊\n**促進者**:  管控時間、對話、整個衝刺計畫的過程\n\n<a name=\"時間與空間\"></a>\n### 時間與空間\n\n* 上午10點 ~ 下午5點，每天六個小時\n* 中場休息一下 11:30, 15:30\n* 中午13:00，休息一小時，午餐不要吃太飽\n* 不要使用電子裝置\n    * 休息時間除外\n    * 請走出去使用，不要干擾他人\n* 準備夠大的白板\n* 計時器\n\n<a name=\"星期一-monday\"></a>\n## 星期一 Monday\n週一的結構化討論將為衝刺計畫週開創道路。週一早上，你們將**以終為始**，擬定一個長期目標。接著你們要畫出目標難題的**示意圖**。下午你們則邀請公司的專家來分享他們掌握的資訊。最後你們要選擇一個目標，也就是一週之內可以解決、具有挑戰性的部分問題。\n\n[![Monday](https://img.youtube.com/vi/mC9XoExk_IA/0.jpg)](https://www.youtube.com/watch?v=mC9XoExk_IA)\n\n#### 設定長期目標\n目標應該反映團隊的原則和抱負，確定目標後，將它寫在白板頂部，確保所有人往同一方向前進。\n\n<a name=\"列出衝刺計畫的問題\"></a>\n### 列出衝刺計畫的問題\n以下幾個問題，可以刺激衝刺計畫團隊思考架設和問題：\n\n* 我們希望在這次衝刺計畫中回答什麼問題？\n* 達成我們的長期目標需要哪些條件？\n* 如果我們坐時光機飛到未來，發現我們的專案失敗了，失敗的原因可能會是什麼？\n\n以藍瓶咖啡為例\n\n````\nQ: 接觸新客戶需要什麼條件？\nA: 他們必須信任我們的專業知識。\n\nQ: 我們可以如何把這個假設轉化為一個問題？\nA: 顧客會信任我們的專業知識嗎？\n````\n\n![長期目標與衝刺計畫問題](/images/SPRINT/Goal.jpg)\n\n<a name=\"示意圖\"></a>\n### 示意圖\n每張圖都以顧客為中心，左邊列出關鍵角色。每張圖都是一個故事，有開頭、中間部分與結局。\n\n* 列出重要角色(在左邊)\n* 寫下結局(在右邊)\n* 中間是文字和箭頭\n* 簡單為上: 中間步驟應該介於5~15個左右\n* 尋求協助: 繪製過程中，應不時詢問成員「這個圖看起來對嗎」\n\n![示意圖1](/images/SPRINT/示意圖1.jpg)\n![示意圖2](/images/SPRINT/示意圖2.jpg)\n[示意圖原圖](/images/SPRINT/示意圖_page.jpg)\n\n示意圖可能會持續修改調整，不用太意外\n\n週一剩下的時間，訪問團對中的專家，搜集問題空間的更多資訊。來加入更多問題、更新示意圖，甚至調整長期目標的措辭。\n\n<a name=\"請教專家\"></a>\n### 請教專家\n\n* 策略，先訪問決策者，「這個專案需要什麼條件才能成功？」、「我們有什麼獨特的優勢或機會？」、「最大的風險是什麼？」\n* 顧客的意見，銷售、顧客支援、研究或其他部門\n* 事物的運作方式，設計師、工程師、行銷人員等\n* 之前的努力，檢視一些已經有的方案或半成品，來充實目前構想\n\n訪問流程，每位專家約半小時\n\n1. 介紹衝刺計畫，如果非團隊成員，請向他說明這次衝刺計畫所為何事\n2. 重溫白板上的重點，花兩分鐘向專家介紹長期目標，衝刺計畫問題和示意圖\n3. 打開話題，請專家告訴大家他所知道的，有關目標難題的一切\n4. 問問題，請專家在他額外專長領域提供更多資訊，請他重複認為你們已經知道的東西。他是否能找到示意圖上的缺漏，有在看到什麼機會？「為什麼？」和「請詳述」要求專家提供更多資訊\n5. 更新白板上的內容，增列衝刺計畫問題。修改示意圖甚至是長期目標。\n\n在訪問的過程中，團隊成員寫下「HMW(How Might We)」的筆記，「我們可以如何...?」，準備好便利貼。\n\n1. 便利貼左上角寫著「我們可以如何」(HMW)\n2. 等待\n3. 聽到有意思的話時，靜靜地把它轉化為一條問題\n4. 在便利貼寫下這問題\n5. 撕下便利貼，放在一邊，之後再整理\n\n#### 組織HMW筆記\n\n* 替筆記分類，不用要求完美，先將幾個類別分出來\n* 投票選出重要的HMW\n    1. 每個人給兩張大圓點\n    2. 決策者給四張，因為決策者意見比較重要\n    3. 要求每個人重溫目標和衝刺計畫問題\n    4. 要求每個人選出最有用的HMW問題\n    5. 可以投給自己的筆記，也可兩票都投給同一個筆記\n* 表決結束後，將票數高的筆記貼到示意圖合適的位置\n\n<a name=\"決定目標\"></a>\n### 決定目標\n衝刺計畫的決策者必須要在示意圖上，選定一個目標顧客和一個目標事件。讓衝刺計畫接下來的活動焦點：研擬解決方案、製作和測試原型，全都是基於這個決定。\n\n* 要求決策者決定目標\n* 民意調查(如果決策者需要協助時): 由每一位團員選出自認為最重要的來投票，幫助決策者選定目標\n\n選定目標好，回頭看看衝刺計畫的問題，至少會有一個問題與這目標有關，之後將找這目標顧客來測試解決方案。\n\n<a name=\"促進者筆記\"></a>\n## 促進者筆記\n\n* 尋求許可\n* 持續記錄\n* 明知故問\n* 照顧隊員\n    * 經常休息\n    * 晚一點吃午餐\n    * 午餐別吃太飽\n* 果斷決定，保持進度","slug":"SPRINT衝刺計畫-Part1","published":1,"updated":"2016-09-16T01:07:02.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46ghq000cscscdfl3fwkh","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sprint衝刺計畫\">SPRINT衝刺計畫</a><ul>\n<li><a href=\"#做好準備-set-the-stage\">做好準備 Set the Stage</a><ul>\n<li><a href=\"#先搞定外觀\">先搞定外觀</a></li>\n<li><a href=\"#團隊人選\">團隊人選</a></li>\n<li><a href=\"#時間與空間\">時間與空間</a></li>\n</ul>\n</li>\n<li><a href=\"#星期一-monday\">星期一 Monday</a><ul>\n<li><a href=\"#列出衝刺計畫的問題\">列出衝刺計畫的問題</a></li>\n<li><a href=\"#示意圖\">示意圖</a></li>\n<li><a href=\"#請教專家\">請教專家</a></li>\n<li><a href=\"#決定目標\">決定目標</a></li>\n</ul>\n</li>\n<li><a href=\"#促進者筆記\">促進者筆記</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"sprint衝刺計畫\"></a></p>\n<h1 id=\"SPRINT衝刺計畫\"><a href=\"#SPRINT衝刺計畫\" class=\"headerlink\" title=\"SPRINT衝刺計畫\"></a>SPRINT衝刺計畫</h1><p>期望能夠讓團隊成員完整的空出五天的時間，密集的討論、規劃，來做出產品的原型 (Prototype)，及早透過使用者測試來決定方案是否可行。</p>\n<ol>\n<li>星期一 : 界定問題 –&gt; 畫出示意圖 –&gt; 選出重點做為努力目標</li>\n<li>星期二 : 擬出多個相互競爭的潛在方案</li>\n<li>星期三 : 將做一些艱難的決定，並把自己的構想轉化成一個可測試的假說</li>\n<li>星期四 : 將做出一個實際的原型 (Prototype)</li>\n<li>星期五 : 找真實的人，來替原型實地測試</li>\n</ol>\n<p><a name=\"做好準備-set-the-stage\"></a></p>\n<h2 id=\"做好準備-Set-the-Stage\"><a href=\"#做好準備-Set-the-Stage\" class=\"headerlink\" title=\"做好準備 Set the Stage\"></a>做好準備 Set the Stage</h2><p><a href=\"https://www.youtube.com/watch?v=RWjuBX3bW6o\" target=\"_blank\" rel=\"external\"><img src=\"https://img.youtube.com/vi/RWjuBX3bW6o/0.jpg\" alt=\"Set the Stage\"></a></p>\n<p>衝刺計畫能幫上忙的三種狀況：</p>\n<ul>\n<li><strong>攸關重大利益</strong>: 解決方案會投入大量時間與金錢時，需確保方向正確，在全速前進</li>\n<li><strong>時間緊迫</strong>: 面對一個急迫的期限，為了迅速找到解決問題的方法</li>\n<li><strong>陷入僵局</strong>: 有些專案不知如何入手，或失去動力時，它可提供一種解決問題的新方法，產生繼續前進的動力</li>\n</ul>\n<p><a name=\"先搞定外觀\"></a></p>\n<h3 id=\"先搞定外觀\"><a href=\"#先搞定外觀\" class=\"headerlink\" title=\"先搞定外觀\"></a>先搞定外觀</h3><p>顧客先看到的就是產品或服務的外觀，確定合適的外觀後，才能讓用戶較為專心來理解新方案</p>\n<p><a name=\"團隊人選\"></a></p>\n<h3 id=\"團隊人選\"><a href=\"#團隊人選\" class=\"headerlink\" title=\"團隊人選\"></a>團隊人選</h3><p>組建一個七個人以內的團隊</p>\n<ul>\n<li>決策者: 對問題有深入了解，抱持強烈意見和有力標準，幫助團隊找到正確解決方案</li>\n<li>財務專家: 解釋錢的流向</li>\n<li>行銷專家: 設計傳播公司/產品訊息</li>\n<li>顧客專家: 經常面對客戶</li>\n<li>技術/物流專家: 了解產品製作/提供什麼</li>\n<li>設計專家: 產品設計者</li>\n<li>麻煩製造者: 持有反對意見 or 有關解決問題的瘋狂想法，能促使團隊提升表現</li>\n</ul>\n<p><strong>專家客串</strong>: 可以分享所知相關資訊給衝刺團隊<br><strong>促進者</strong>:  管控時間、對話、整個衝刺計畫的過程</p>\n<p><a name=\"時間與空間\"></a></p>\n<h3 id=\"時間與空間\"><a href=\"#時間與空間\" class=\"headerlink\" title=\"時間與空間\"></a>時間與空間</h3><ul>\n<li>上午10點 ~ 下午5點，每天六個小時</li>\n<li>中場休息一下 11:30, 15:30</li>\n<li>中午13:00，休息一小時，午餐不要吃太飽</li>\n<li>不要使用電子裝置<ul>\n<li>休息時間除外</li>\n<li>請走出去使用，不要干擾他人</li>\n</ul>\n</li>\n<li>準備夠大的白板</li>\n<li>計時器</li>\n</ul>\n<p><a name=\"星期一-monday\"></a></p>\n<h2 id=\"星期一-Monday\"><a href=\"#星期一-Monday\" class=\"headerlink\" title=\"星期一 Monday\"></a>星期一 Monday</h2><p>週一的結構化討論將為衝刺計畫週開創道路。週一早上，你們將<strong>以終為始</strong>，擬定一個長期目標。接著你們要畫出目標難題的<strong>示意圖</strong>。下午你們則邀請公司的專家來分享他們掌握的資訊。最後你們要選擇一個目標，也就是一週之內可以解決、具有挑戰性的部分問題。</p>\n<p><a href=\"https://www.youtube.com/watch?v=mC9XoExk_IA\" target=\"_blank\" rel=\"external\"><img src=\"https://img.youtube.com/vi/mC9XoExk_IA/0.jpg\" alt=\"Monday\"></a></p>\n<h4 id=\"設定長期目標\"><a href=\"#設定長期目標\" class=\"headerlink\" title=\"設定長期目標\"></a>設定長期目標</h4><p>目標應該反映團隊的原則和抱負，確定目標後，將它寫在白板頂部，確保所有人往同一方向前進。</p>\n<p><a name=\"列出衝刺計畫的問題\"></a></p>\n<h3 id=\"列出衝刺計畫的問題\"><a href=\"#列出衝刺計畫的問題\" class=\"headerlink\" title=\"列出衝刺計畫的問題\"></a>列出衝刺計畫的問題</h3><p>以下幾個問題，可以刺激衝刺計畫團隊思考架設和問題：</p>\n<ul>\n<li>我們希望在這次衝刺計畫中回答什麼問題？</li>\n<li>達成我們的長期目標需要哪些條件？</li>\n<li>如果我們坐時光機飛到未來，發現我們的專案失敗了，失敗的原因可能會是什麼？</li>\n</ul>\n<p>以藍瓶咖啡為例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Q: 接觸新客戶需要什麼條件？</div><div class=\"line\">A: 他們必須信任我們的專業知識。</div><div class=\"line\"></div><div class=\"line\">Q: 我們可以如何把這個假設轉化為一個問題？</div><div class=\"line\">A: 顧客會信任我們的專業知識嗎？</div></pre></td></tr></table></figure>\n<p><img src=\"/images/SPRINT/Goal.jpg\" alt=\"長期目標與衝刺計畫問題\"></p>\n<p><a name=\"示意圖\"></a></p>\n<h3 id=\"示意圖\"><a href=\"#示意圖\" class=\"headerlink\" title=\"示意圖\"></a>示意圖</h3><p>每張圖都以顧客為中心，左邊列出關鍵角色。每張圖都是一個故事，有開頭、中間部分與結局。</p>\n<ul>\n<li>列出重要角色(在左邊)</li>\n<li>寫下結局(在右邊)</li>\n<li>中間是文字和箭頭</li>\n<li>簡單為上: 中間步驟應該介於5~15個左右</li>\n<li>尋求協助: 繪製過程中，應不時詢問成員「這個圖看起來對嗎」</li>\n</ul>\n<p><img src=\"/images/SPRINT/示意圖1.jpg\" alt=\"示意圖1\"><br><img src=\"/images/SPRINT/示意圖2.jpg\" alt=\"示意圖2\"><br><a href=\"/images/SPRINT/示意圖_page.jpg\">示意圖原圖</a></p>\n<p>示意圖可能會持續修改調整，不用太意外</p>\n<p>週一剩下的時間，訪問團對中的專家，搜集問題空間的更多資訊。來加入更多問題、更新示意圖，甚至調整長期目標的措辭。</p>\n<p><a name=\"請教專家\"></a></p>\n<h3 id=\"請教專家\"><a href=\"#請教專家\" class=\"headerlink\" title=\"請教專家\"></a>請教專家</h3><ul>\n<li>策略，先訪問決策者，「這個專案需要什麼條件才能成功？」、「我們有什麼獨特的優勢或機會？」、「最大的風險是什麼？」</li>\n<li>顧客的意見，銷售、顧客支援、研究或其他部門</li>\n<li>事物的運作方式，設計師、工程師、行銷人員等</li>\n<li>之前的努力，檢視一些已經有的方案或半成品，來充實目前構想</li>\n</ul>\n<p>訪問流程，每位專家約半小時</p>\n<ol>\n<li>介紹衝刺計畫，如果非團隊成員，請向他說明這次衝刺計畫所為何事</li>\n<li>重溫白板上的重點，花兩分鐘向專家介紹長期目標，衝刺計畫問題和示意圖</li>\n<li>打開話題，請專家告訴大家他所知道的，有關目標難題的一切</li>\n<li>問問題，請專家在他額外專長領域提供更多資訊，請他重複認為你們已經知道的東西。他是否能找到示意圖上的缺漏，有在看到什麼機會？「為什麼？」和「請詳述」要求專家提供更多資訊</li>\n<li>更新白板上的內容，增列衝刺計畫問題。修改示意圖甚至是長期目標。</li>\n</ol>\n<p>在訪問的過程中，團隊成員寫下「HMW(How Might We)」的筆記，「我們可以如何…?」，準備好便利貼。</p>\n<ol>\n<li>便利貼左上角寫著「我們可以如何」(HMW)</li>\n<li>等待</li>\n<li>聽到有意思的話時，靜靜地把它轉化為一條問題</li>\n<li>在便利貼寫下這問題</li>\n<li>撕下便利貼，放在一邊，之後再整理</li>\n</ol>\n<h4 id=\"組織HMW筆記\"><a href=\"#組織HMW筆記\" class=\"headerlink\" title=\"組織HMW筆記\"></a>組織HMW筆記</h4><ul>\n<li>替筆記分類，不用要求完美，先將幾個類別分出來</li>\n<li>投票選出重要的HMW<ol>\n<li>每個人給兩張大圓點</li>\n<li>決策者給四張，因為決策者意見比較重要</li>\n<li>要求每個人重溫目標和衝刺計畫問題</li>\n<li>要求每個人選出最有用的HMW問題</li>\n<li>可以投給自己的筆記，也可兩票都投給同一個筆記</li>\n</ol>\n</li>\n<li>表決結束後，將票數高的筆記貼到示意圖合適的位置</li>\n</ul>\n<p><a name=\"決定目標\"></a></p>\n<h3 id=\"決定目標\"><a href=\"#決定目標\" class=\"headerlink\" title=\"決定目標\"></a>決定目標</h3><p>衝刺計畫的決策者必須要在示意圖上，選定一個目標顧客和一個目標事件。讓衝刺計畫接下來的活動焦點：研擬解決方案、製作和測試原型，全都是基於這個決定。</p>\n<ul>\n<li>要求決策者決定目標</li>\n<li>民意調查(如果決策者需要協助時): 由每一位團員選出自認為最重要的來投票，幫助決策者選定目標</li>\n</ul>\n<p>選定目標好，回頭看看衝刺計畫的問題，至少會有一個問題與這目標有關，之後將找這目標顧客來測試解決方案。</p>\n<p><a name=\"促進者筆記\"></a></p>\n<h2 id=\"促進者筆記\"><a href=\"#促進者筆記\" class=\"headerlink\" title=\"促進者筆記\"></a>促進者筆記</h2><ul>\n<li>尋求許可</li>\n<li>持續記錄</li>\n<li>明知故問</li>\n<li>照顧隊員<ul>\n<li>經常休息</li>\n<li>晚一點吃午餐</li>\n<li>午餐別吃太飽</li>\n</ul>\n</li>\n<li>果斷決定，保持進度</li>\n</ul>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sprint衝刺計畫\">SPRINT衝刺計畫</a><ul>\n<li><a href=\"#做好準備-set-the-stage\">做好準備 Set the Stage</a><ul>\n<li><a href=\"#先搞定外觀\">先搞定外觀</a></li>\n<li><a href=\"#團隊人選\">團隊人選</a></li>\n<li><a href=\"#時間與空間\">時間與空間</a></li>\n</ul>\n</li>\n<li><a href=\"#星期一-monday\">星期一 Monday</a><ul>\n<li><a href=\"#列出衝刺計畫的問題\">列出衝刺計畫的問題</a></li>\n<li><a href=\"#示意圖\">示意圖</a></li>\n<li><a href=\"#請教專家\">請教專家</a></li>\n<li><a href=\"#決定目標\">決定目標</a></li>\n</ul>\n</li>\n<li><a href=\"#促進者筆記\">促進者筆記</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"sprint衝刺計畫\"></a></p>\n<h1 id=\"SPRINT衝刺計畫\"><a href=\"#SPRINT衝刺計畫\" class=\"headerlink\" title=\"SPRINT衝刺計畫\"></a>SPRINT衝刺計畫</h1><p>期望能夠讓團隊成員完整的空出五天的時間，密集的討論、規劃，來做出產品的原型 (Prototype)，及早透過使用者測試來決定方案是否可行。</p>\n<ol>\n<li>星期一 : 界定問題 –&gt; 畫出示意圖 –&gt; 選出重點做為努力目標</li>\n<li>星期二 : 擬出多個相互競爭的潛在方案</li>\n<li>星期三 : 將做一些艱難的決定，並把自己的構想轉化成一個可測試的假說</li>\n<li>星期四 : 將做出一個實際的原型 (Prototype)</li>\n<li>星期五 : 找真實的人，來替原型實地測試</li>\n</ol>\n<p><a name=\"做好準備-set-the-stage\"></a></p>\n<h2 id=\"做好準備-Set-the-Stage\"><a href=\"#做好準備-Set-the-Stage\" class=\"headerlink\" title=\"做好準備 Set the Stage\"></a>做好準備 Set the Stage</h2><p><a href=\"https://www.youtube.com/watch?v=RWjuBX3bW6o\"><img src=\"https://img.youtube.com/vi/RWjuBX3bW6o/0.jpg\" alt=\"Set the Stage\"></a></p>\n<p>衝刺計畫能幫上忙的三種狀況：</p>\n<ul>\n<li><strong>攸關重大利益</strong>: 解決方案會投入大量時間與金錢時，需確保方向正確，在全速前進</li>\n<li><strong>時間緊迫</strong>: 面對一個急迫的期限，為了迅速找到解決問題的方法</li>\n<li><strong>陷入僵局</strong>: 有些專案不知如何入手，或失去動力時，它可提供一種解決問題的新方法，產生繼續前進的動力</li>\n</ul>\n<p><a name=\"先搞定外觀\"></a></p>\n<h3 id=\"先搞定外觀\"><a href=\"#先搞定外觀\" class=\"headerlink\" title=\"先搞定外觀\"></a>先搞定外觀</h3><p>顧客先看到的就是產品或服務的外觀，確定合適的外觀後，才能讓用戶較為專心來理解新方案</p>\n<p><a name=\"團隊人選\"></a></p>\n<h3 id=\"團隊人選\"><a href=\"#團隊人選\" class=\"headerlink\" title=\"團隊人選\"></a>團隊人選</h3><p>組建一個七個人以內的團隊</p>\n<ul>\n<li>決策者: 對問題有深入了解，抱持強烈意見和有力標準，幫助團隊找到正確解決方案</li>\n<li>財務專家: 解釋錢的流向</li>\n<li>行銷專家: 設計傳播公司/產品訊息</li>\n<li>顧客專家: 經常面對客戶</li>\n<li>技術/物流專家: 了解產品製作/提供什麼</li>\n<li>設計專家: 產品設計者</li>\n<li>麻煩製造者: 持有反對意見 or 有關解決問題的瘋狂想法，能促使團隊提升表現</li>\n</ul>\n<p><strong>專家客串</strong>: 可以分享所知相關資訊給衝刺團隊<br><strong>促進者</strong>:  管控時間、對話、整個衝刺計畫的過程</p>\n<p><a name=\"時間與空間\"></a></p>\n<h3 id=\"時間與空間\"><a href=\"#時間與空間\" class=\"headerlink\" title=\"時間與空間\"></a>時間與空間</h3><ul>\n<li>上午10點 ~ 下午5點，每天六個小時</li>\n<li>中場休息一下 11:30, 15:30</li>\n<li>中午13:00，休息一小時，午餐不要吃太飽</li>\n<li>不要使用電子裝置<ul>\n<li>休息時間除外</li>\n<li>請走出去使用，不要干擾他人</li>\n</ul>\n</li>\n<li>準備夠大的白板</li>\n<li>計時器</li>\n</ul>\n<p><a name=\"星期一-monday\"></a></p>\n<h2 id=\"星期一-Monday\"><a href=\"#星期一-Monday\" class=\"headerlink\" title=\"星期一 Monday\"></a>星期一 Monday</h2><p>週一的結構化討論將為衝刺計畫週開創道路。週一早上，你們將<strong>以終為始</strong>，擬定一個長期目標。接著你們要畫出目標難題的<strong>示意圖</strong>。下午你們則邀請公司的專家來分享他們掌握的資訊。最後你們要選擇一個目標，也就是一週之內可以解決、具有挑戰性的部分問題。</p>\n<p><a href=\"https://www.youtube.com/watch?v=mC9XoExk_IA\"><img src=\"https://img.youtube.com/vi/mC9XoExk_IA/0.jpg\" alt=\"Monday\"></a></p>\n<h4 id=\"設定長期目標\"><a href=\"#設定長期目標\" class=\"headerlink\" title=\"設定長期目標\"></a>設定長期目標</h4><p>目標應該反映團隊的原則和抱負，確定目標後，將它寫在白板頂部，確保所有人往同一方向前進。</p>\n<p><a name=\"列出衝刺計畫的問題\"></a></p>\n<h3 id=\"列出衝刺計畫的問題\"><a href=\"#列出衝刺計畫的問題\" class=\"headerlink\" title=\"列出衝刺計畫的問題\"></a>列出衝刺計畫的問題</h3><p>以下幾個問題，可以刺激衝刺計畫團隊思考架設和問題：</p>\n<ul>\n<li>我們希望在這次衝刺計畫中回答什麼問題？</li>\n<li>達成我們的長期目標需要哪些條件？</li>\n<li>如果我們坐時光機飛到未來，發現我們的專案失敗了，失敗的原因可能會是什麼？</li>\n</ul>\n<p>以藍瓶咖啡為例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Q: 接觸新客戶需要什麼條件？</div><div class=\"line\">A: 他們必須信任我們的專業知識。</div><div class=\"line\"></div><div class=\"line\">Q: 我們可以如何把這個假設轉化為一個問題？</div><div class=\"line\">A: 顧客會信任我們的專業知識嗎？</div></pre></td></tr></table></figure>\n<p><img src=\"/images/SPRINT/Goal.jpg\" alt=\"長期目標與衝刺計畫問題\"></p>\n<p><a name=\"示意圖\"></a></p>\n<h3 id=\"示意圖\"><a href=\"#示意圖\" class=\"headerlink\" title=\"示意圖\"></a>示意圖</h3><p>每張圖都以顧客為中心，左邊列出關鍵角色。每張圖都是一個故事，有開頭、中間部分與結局。</p>\n<ul>\n<li>列出重要角色(在左邊)</li>\n<li>寫下結局(在右邊)</li>\n<li>中間是文字和箭頭</li>\n<li>簡單為上: 中間步驟應該介於5~15個左右</li>\n<li>尋求協助: 繪製過程中，應不時詢問成員「這個圖看起來對嗎」</li>\n</ul>\n<p><img src=\"/images/SPRINT/示意圖1.jpg\" alt=\"示意圖1\"><br><img src=\"/images/SPRINT/示意圖2.jpg\" alt=\"示意圖2\"><br><a href=\"/images/SPRINT/示意圖_page.jpg\">示意圖原圖</a></p>\n<p>示意圖可能會持續修改調整，不用太意外</p>\n<p>週一剩下的時間，訪問團對中的專家，搜集問題空間的更多資訊。來加入更多問題、更新示意圖，甚至調整長期目標的措辭。</p>\n<p><a name=\"請教專家\"></a></p>\n<h3 id=\"請教專家\"><a href=\"#請教專家\" class=\"headerlink\" title=\"請教專家\"></a>請教專家</h3><ul>\n<li>策略，先訪問決策者，「這個專案需要什麼條件才能成功？」、「我們有什麼獨特的優勢或機會？」、「最大的風險是什麼？」</li>\n<li>顧客的意見，銷售、顧客支援、研究或其他部門</li>\n<li>事物的運作方式，設計師、工程師、行銷人員等</li>\n<li>之前的努力，檢視一些已經有的方案或半成品，來充實目前構想</li>\n</ul>\n<p>訪問流程，每位專家約半小時</p>\n<ol>\n<li>介紹衝刺計畫，如果非團隊成員，請向他說明這次衝刺計畫所為何事</li>\n<li>重溫白板上的重點，花兩分鐘向專家介紹長期目標，衝刺計畫問題和示意圖</li>\n<li>打開話題，請專家告訴大家他所知道的，有關目標難題的一切</li>\n<li>問問題，請專家在他額外專長領域提供更多資訊，請他重複認為你們已經知道的東西。他是否能找到示意圖上的缺漏，有在看到什麼機會？「為什麼？」和「請詳述」要求專家提供更多資訊</li>\n<li>更新白板上的內容，增列衝刺計畫問題。修改示意圖甚至是長期目標。</li>\n</ol>\n<p>在訪問的過程中，團隊成員寫下「HMW(How Might We)」的筆記，「我們可以如何…?」，準備好便利貼。</p>\n<ol>\n<li>便利貼左上角寫著「我們可以如何」(HMW)</li>\n<li>等待</li>\n<li>聽到有意思的話時，靜靜地把它轉化為一條問題</li>\n<li>在便利貼寫下這問題</li>\n<li>撕下便利貼，放在一邊，之後再整理</li>\n</ol>\n<h4 id=\"組織HMW筆記\"><a href=\"#組織HMW筆記\" class=\"headerlink\" title=\"組織HMW筆記\"></a>組織HMW筆記</h4><ul>\n<li>替筆記分類，不用要求完美，先將幾個類別分出來</li>\n<li>投票選出重要的HMW<ol>\n<li>每個人給兩張大圓點</li>\n<li>決策者給四張，因為決策者意見比較重要</li>\n<li>要求每個人重溫目標和衝刺計畫問題</li>\n<li>要求每個人選出最有用的HMW問題</li>\n<li>可以投給自己的筆記，也可兩票都投給同一個筆記</li>\n</ol>\n</li>\n<li>表決結束後，將票數高的筆記貼到示意圖合適的位置</li>\n</ul>\n<p><a name=\"決定目標\"></a></p>\n<h3 id=\"決定目標\"><a href=\"#決定目標\" class=\"headerlink\" title=\"決定目標\"></a>決定目標</h3><p>衝刺計畫的決策者必須要在示意圖上，選定一個目標顧客和一個目標事件。讓衝刺計畫接下來的活動焦點：研擬解決方案、製作和測試原型，全都是基於這個決定。</p>\n<ul>\n<li>要求決策者決定目標</li>\n<li>民意調查(如果決策者需要協助時): 由每一位團員選出自認為最重要的來投票，幫助決策者選定目標</li>\n</ul>\n<p>選定目標好，回頭看看衝刺計畫的問題，至少會有一個問題與這目標有關，之後將找這目標顧客來測試解決方案。</p>\n<p><a name=\"促進者筆記\"></a></p>\n<h2 id=\"促進者筆記\"><a href=\"#促進者筆記\" class=\"headerlink\" title=\"促進者筆記\"></a>促進者筆記</h2><ul>\n<li>尋求許可</li>\n<li>持續記錄</li>\n<li>明知故問</li>\n<li>照顧隊員<ul>\n<li>經常休息</li>\n<li>晚一點吃午餐</li>\n<li>午餐別吃太飽</li>\n</ul>\n</li>\n<li>果斷決定，保持進度</li>\n</ul>\n"},{"layout":"post","title":"SPRINT衝刺計畫 - Part2","author":"Soar Lin","cdn":"header-off","header-img":"","date":"2016-09-15T16:07:52.000Z","_content":"<!-- MarkdownTOC -->\n\n- [SPRINT衝刺計畫](#sprint衝刺計畫)\n    - [星期二 Tuesday](#星期二-tuesday)\n        - [重新組合，加以改良](#重新組合，加以改良)\n        - [畫出方案草圖](#畫出方案草圖)\n    - [促進者筆記](#促進者筆記)\n    - [星期三 Wednesday](#星期三-wednesday)\n        - [黏貼決策](#黏貼決策)\n        - [比拼](#比拼)\n        - [分鏡腳本](#分鏡腳本)\n    - [促進者筆記](#促進者筆記-1)\n\n<!-- /MarkdownTOC -->\n\n<a name=\"sprint衝刺計畫\"></a>\n# SPRINT衝刺計畫\n\n<a name=\"星期二-tuesday\"></a>\n## 星期二 Tuesday\n衝刺計畫團隊在週一界定了難題，並選擇了目標。週二你們將提出解決方案。這一天你們將先尋找靈感，也就是檢視一些既有的概念，想想可以如何**重新組合並加以改良**。然後在下午，每一個人將遵循一個強調批判思考而非藝術技巧的四步驟程序，**畫出方案早圖**。衝刺計畫週稍後，最好的一些草圖將成為方案圓形和測試計畫的基礎。週一晚上你們應該好好休息，早上起來吃個均衡的早餐，因為週二這一天非常重要。\n\n[![Tuesday](https://img.youtube.com/vi/n4XBfr7PUnk/0.jpg)](https://www.youtube.com/watch?v=n4XBfr7PUnk)\n\n<a name=\"重新組合，加以改良\"></a>\n### 重新組合，加以改良\n\n* 找尋「材料」，可能來自其他領域、競爭對手、自己的公司\n\n````\n例子：\n藍瓶團隊參考一家巧克力廠商，每一條Tcho巧可力棒包裝紙上，都印有一個簡單的「風味輪」(flavor wheel)，上面只有印六個字 : Bright, Fruity, Floral, Earthy, Nutty和Chocolatey\n因此藍瓶團隊藉由這個概念，創造一組用來描述藍瓶咖啡豆的簡單風味詞彙：\nRich, Chocolatey, comforting....\n````\n#### 閃電型示範\n\n![閃電示範](/images/SPRINT/lightning.jpg)\n\n* 列出清單: 要求團隊每一個人想想哪些產品或服務可以提供有用的靈感，列出一份清單。\n* 3分鐘的示範: 團隊成員逐一介紹自己推薦的產品，向所有人說明該產品的優點。\n* 記錄重點: 持續記錄有用的概念、示意圖，寫下簡單的標題與資料來源\n\n![記錄重點](/images/SPRINT/demo_record.jpg)\n\n記錄下來的概念，應該足以提供每一個人的靈感，在檢視原本的示意圖，看看是否需要將問題區分來分工，或是全體集中在一個重要的目標上，可以要求每個人寫下自己有興趣的部份，加以分工。\n\n<a name=\"畫出方案草圖\"></a>\n### 畫出方案草圖\n不用擔心不會畫圖，只要能畫出示意圖就好，基本上就是一些框框與文字的組合。重要的是方案的素質，而不是示意圖畫的多漂亮。\n\n* 畫圖的力量: 把抽想概念轉化為具體方案最快、最容易的方法；藉由畫出方案草圖來具體化自己的點子，才能讓團隊成員公平的評斷它。\n* 一起獨自努力: 獨自努力讓人有時間去做研究、尋找靈感，以及思考問題。獨自努力產生的責任壓力，促使我們發揮潛能，交出好成果。\n\n#### 四步驟畫圖法\n![四步驟畫圖法](/images/SPRINT/4steps.jpg)\n\n接下來的四個步驟，都不會有人去看別人的筆記、草圖，所以請放心大膽的自由發揮。\n\n1. [**筆記**] 搜集關鍵資料 (20分鐘): 把長期目標抄下，瀏覽示意圖、HMW筆記以及閃電型示範的筆記，給成員20分鐘整理筆記、上網找資料\n2. [**構想**] 畫出粗略方案 (20分鐘): 將手上的一疊筆記，整理出粗略構想，在紙上塗鴉、畫草圖，以及寫上一些標題，20分鐘後再花三分鐘檢視草稿，圈出自己喜歡的部份，在下一階段加以發揮\n3. [**瘋狂八**] 快速擬出八個方案變體 (8分鐘): 瘋狂指的是這項作業的節奏，拿出一張A4大小的紙張，對折三次產生八格。每隔花個一分鐘，再八分鐘內畫出八個簡略的草圖。根據同一個方案，畫出多個方案變體，重點是強迫自己考慮替代方案\n4. [**畫出方案草圖**] 擬定一個具體方案 (30分鐘+): 方案草圖會讓成員檢視，所以必須是深思熟慮後的具體結果，且必須是容易理解的。方案草圖應像分鏡腳本，畫出顧客和你的產品或服務互動時，會看到什麼。謹記幾條重要規則：\n    *  做到不言自明: 週三早上會將草圖貼出給所有人看，所以必須讓人看得懂\n    *  匿名發表\n    *  別怕畫的醜: 一些框框、文字、火材人就很夠了\n    *  文字很重要: 選擇正確的用詞非常重要，不要用無意義的文字來填版，也不要畫波浪線來代表「這裡有文字」，應該好好創造出逼真的效果\n    *  取個吸引人的名字: 請給草圖一個名字，方便之後的評論。也可以藉由草圖的名字，吸引人注意方案背後的概念\n\n![方案草圖](/images/SPRINT/skatch.jpg)\n\n每個人負責一份方案草圖，如果靈感充沛，想多畫幾份也是可以的，但每多一份草圖，週三的檢視就會負擔重一些。\n\n<a name=\"促進者筆記\"></a>\n## 促進者筆記\n\n* 找人參加週五的測試: 週一或週二就應該開始為週五的測試找人\n* 透過Craigslist找人: 貼出可以吸引大眾的通用型廣告，利用問卷來篩選有意參加的人，給予小額報酬\n* 撰寫篩選問卷: 先寫下希望的測試顧客特徵，轉化為適當的問題，針對希望排除的特徵做一樣的事情。問題不能洩漏答案\n* 利用你的人脈網路找人\n\n<a name=\"星期三-wednesday\"></a>\n## 星期三 Wednesday\n到了週三早上，衝刺計畫團隊將有一疊解決方案。這很好，但也是一個問題。你們無法替全部方案做原型，然後一一測試。你們需要一個可靠的計畫。週三早上，你們將評論每一個方案，然後**決定**哪些方案最有機會達成你們的長期目標。在下午，你們將把方案草圖中的最佳場景編排成一個**分鏡腳本**，也就是方案原型的逐步說明。\n\n[![Tuesday](https://img.youtube.com/vi/hmXn4BhGquU/0.jpg)](https://www.youtube.com/watch?v=hmXn4BhGquU)\n\n<a name=\"黏貼決策\"></a>\n### 黏貼決策\n\n\n* 美術館: 用膠帶把方案草圖貼到牆上\n* 熱點圖: 靜靜瀏覽分析所有方案，用圓點標出有意思的部分\n    1. 不說話\n    2. 好好看一份方案草圖\n    3. 在喜歡的旁邊貼上圓點貼紙\n    4. 方案中覺得極有意思的點子，可貼上二或三張圓點貼紙\n    5. 如果對方案有疑慮，寫在便利貼上，貼在草圖下方\n    6. 轉到下一份草圖，重複上述步驟\n\n![熱點圖](/images/SPRINT/hotpoint.jpg)\n\n* 快速評論: 快速討論每個方案中有意思的部份，用便利貼記下大概念\n    1. 衝刺計畫成員聚集在一份草圖前\n    2. 設定三分鐘倒數\n    3. 促進者敘述方案\n    4. 促進者喊出突出的構想，也就是比較多圓點貼紙的部分\n    5. 促進者漏掉突出構想，由其他成員喊出來\n    6. 抄寫員把突出構想寫在便利貼，貼在草圖上方。替每一個構想取一個名字\n    7. 檢視疑慮和問題\n    8. 方案作者請保持沈默，直到獲邀發言(自行公開身份，說說我們遺漏的部分)\n    9. 由方案作者說明成員們沒注意到的部份，並回答問題\n    10. 轉到下一份草圖，重複上述流程\n\n![快速評論](/images/SPRINT/快速評論.jpg)\n\n* 稻草民調: 每個人選一個方案，用圓點貼紙表達自己的意見\n    1. 發給每人一票\n    2. 提醒所有人長期目標和衝刺計畫問題\n    3. 提醒所有人，最好選擇有巨大潛力的大膽構想\n    4. 設定時間，倒數十分鐘\n    5. 每個人私下寫下自己的選擇，可以是整個方案，也可以是方案中的某一個構想\n    6. 時間一到或所有人都準備好的時候，把代表選票的大圓點貼到方案草圖上\n    7. 每個人扼要解釋自己的選擇(1 min)\n\n![稻草民調](/images/SPRINT/稻草民調.jpg)\n\n* 超級票: 決策者用更多圓點貼紙投出「超級票」\n    * 目的是替團隊做出最終決定。每一個決策者可獲得三張特別票，而無論他們把票投給哪些方案或構想，衝刺計畫團隊都將依據此做原型和測試\n    * 可以選擇受歡迎的構想，也可以隨自己喜歡來投票\n    * 投票前，一樣提醒他長期目標與問題\n\n![超級票](/images/SPRINT/supervote.jpg)\n\n得到超級票的方案為贏家，其他留待日後參考。\n\n<a name=\"比拼\"></a>\n### 比拼\n\n有時候有兩個以上的方案都獲得了超級票而勝出，如果資源充足，可以都將方案做出原型來星期五的使用者測試驗證，但如果可以融合兩個方案，也有機會做出一個更棒的原型來進入測試。\n\n如果決定要比拼，請替原型取個感覺真實的品牌名稱，營造原型的真實性，也避免顧客不把它當一回事。\n\n* 記下後表決\n    1. 發給每個成員一張紙和一支筆\n    2. 每個人花3分鐘，靜靜地寫下自己的構想\n    3. 每個人花2分鐘做編輯，選出自己最滿意的2-3個構想\n    4. 把各人的最佳構想寫在白板上。如果團隊有七個人，總共大概會有15~20個構想\n    5. 每個人花2分鐘，從白板上靜靜地選出自己最喜歡的構想\n    6. 各人逐一喊出自己最喜歡的構想。白板上的構想每得一票，旁邊就畫一個圓點\n    7. 決策者做出最終決定。他一樣可以尊重多數人決定，也可以堅持自己獨特的想法\n\n![記下後表決](/images/SPRINT/write_vote.jpg)\n\n<a name=\"分鏡腳本\"></a>\n### 分鏡腳本\n\n![分鏡腳本](/images/SPRINT/分鏡腳本.jpg)\n\n* 畫網格，大概需要15個框格，從顧客接觸到產品的開場開始設計 `e.g. APP 從 App Store開始`，虛擬的媒體報導也是個好的開場\n* 選擇一個開場\n    * 網路搜尋\n    * 雜誌\n    * 商店貨架\n    * 應用程式商店\n    * 媒體報導\n    * **臉書**或**推特**\n* **填入腳本內容**，團隊成員一起完成每一步，盡可能用方案上的便利貼，忽略一些無法運作的「死胡同」(實際測試時，顧客可能也會忽略這些)。若要填補缺口，盡量從「日後參考方案」中挑選可用材料，避免當場創造新構想，請遵循以下指引：\n    * 利用既有材料\n    * 不要集體撰文: 不該試圖集體把文字改到理想狀態，容易浪費時間\n    * 細節夠用就好: 不要過度仔細，不必想好所有的細節，標上「週四負責人決定」\n    * 讓決策者決定: 因為大多精力在上午耗盡，這裡可多仰賴決策者決定\n    * 有疑問時，大膽一點: 衝刺計畫最好用來測試潛在報酬很高、相當冒險的方案。\n    * 把故事控制在15分鐘以內\n\n![分鏡範例](/images/SPRINT/分鏡範例.jpg)\n\n<a name=\"促進者筆記-1\"></a>\n## 促進者筆記\n\n* 避免耗盡力氣\n週三是必須接連做出很多決定的一天，因此容易耗盡決策電力。需保持警惕，留意看來無法快速得出結論的討論。出現這種情況，應該請出決策者來做決定。\n    * 小細節: 等到週四在處理\n    * 新點子: 先記下來，等到衝刺計畫結束再去探索","source":"_posts/SPRINT衝刺計畫-Part2.md","raw":"---\nlayout: post\ntitle: SPRINT衝刺計畫 - Part2\nauthor: Soar Lin\ncdn: header-off\nheader-img: ''\ndate: 2016-09-16 00:07:52\ntags:\n - SPRINT\n - 衝刺計畫\n - Prototype\ncategories:\n - Workflow\n---\n<!-- MarkdownTOC -->\n\n- [SPRINT衝刺計畫](#sprint衝刺計畫)\n    - [星期二 Tuesday](#星期二-tuesday)\n        - [重新組合，加以改良](#重新組合，加以改良)\n        - [畫出方案草圖](#畫出方案草圖)\n    - [促進者筆記](#促進者筆記)\n    - [星期三 Wednesday](#星期三-wednesday)\n        - [黏貼決策](#黏貼決策)\n        - [比拼](#比拼)\n        - [分鏡腳本](#分鏡腳本)\n    - [促進者筆記](#促進者筆記-1)\n\n<!-- /MarkdownTOC -->\n\n<a name=\"sprint衝刺計畫\"></a>\n# SPRINT衝刺計畫\n\n<a name=\"星期二-tuesday\"></a>\n## 星期二 Tuesday\n衝刺計畫團隊在週一界定了難題，並選擇了目標。週二你們將提出解決方案。這一天你們將先尋找靈感，也就是檢視一些既有的概念，想想可以如何**重新組合並加以改良**。然後在下午，每一個人將遵循一個強調批判思考而非藝術技巧的四步驟程序，**畫出方案早圖**。衝刺計畫週稍後，最好的一些草圖將成為方案圓形和測試計畫的基礎。週一晚上你們應該好好休息，早上起來吃個均衡的早餐，因為週二這一天非常重要。\n\n[![Tuesday](https://img.youtube.com/vi/n4XBfr7PUnk/0.jpg)](https://www.youtube.com/watch?v=n4XBfr7PUnk)\n\n<a name=\"重新組合，加以改良\"></a>\n### 重新組合，加以改良\n\n* 找尋「材料」，可能來自其他領域、競爭對手、自己的公司\n\n````\n例子：\n藍瓶團隊參考一家巧克力廠商，每一條Tcho巧可力棒包裝紙上，都印有一個簡單的「風味輪」(flavor wheel)，上面只有印六個字 : Bright, Fruity, Floral, Earthy, Nutty和Chocolatey\n因此藍瓶團隊藉由這個概念，創造一組用來描述藍瓶咖啡豆的簡單風味詞彙：\nRich, Chocolatey, comforting....\n````\n#### 閃電型示範\n\n![閃電示範](/images/SPRINT/lightning.jpg)\n\n* 列出清單: 要求團隊每一個人想想哪些產品或服務可以提供有用的靈感，列出一份清單。\n* 3分鐘的示範: 團隊成員逐一介紹自己推薦的產品，向所有人說明該產品的優點。\n* 記錄重點: 持續記錄有用的概念、示意圖，寫下簡單的標題與資料來源\n\n![記錄重點](/images/SPRINT/demo_record.jpg)\n\n記錄下來的概念，應該足以提供每一個人的靈感，在檢視原本的示意圖，看看是否需要將問題區分來分工，或是全體集中在一個重要的目標上，可以要求每個人寫下自己有興趣的部份，加以分工。\n\n<a name=\"畫出方案草圖\"></a>\n### 畫出方案草圖\n不用擔心不會畫圖，只要能畫出示意圖就好，基本上就是一些框框與文字的組合。重要的是方案的素質，而不是示意圖畫的多漂亮。\n\n* 畫圖的力量: 把抽想概念轉化為具體方案最快、最容易的方法；藉由畫出方案草圖來具體化自己的點子，才能讓團隊成員公平的評斷它。\n* 一起獨自努力: 獨自努力讓人有時間去做研究、尋找靈感，以及思考問題。獨自努力產生的責任壓力，促使我們發揮潛能，交出好成果。\n\n#### 四步驟畫圖法\n![四步驟畫圖法](/images/SPRINT/4steps.jpg)\n\n接下來的四個步驟，都不會有人去看別人的筆記、草圖，所以請放心大膽的自由發揮。\n\n1. [**筆記**] 搜集關鍵資料 (20分鐘): 把長期目標抄下，瀏覽示意圖、HMW筆記以及閃電型示範的筆記，給成員20分鐘整理筆記、上網找資料\n2. [**構想**] 畫出粗略方案 (20分鐘): 將手上的一疊筆記，整理出粗略構想，在紙上塗鴉、畫草圖，以及寫上一些標題，20分鐘後再花三分鐘檢視草稿，圈出自己喜歡的部份，在下一階段加以發揮\n3. [**瘋狂八**] 快速擬出八個方案變體 (8分鐘): 瘋狂指的是這項作業的節奏，拿出一張A4大小的紙張，對折三次產生八格。每隔花個一分鐘，再八分鐘內畫出八個簡略的草圖。根據同一個方案，畫出多個方案變體，重點是強迫自己考慮替代方案\n4. [**畫出方案草圖**] 擬定一個具體方案 (30分鐘+): 方案草圖會讓成員檢視，所以必須是深思熟慮後的具體結果，且必須是容易理解的。方案草圖應像分鏡腳本，畫出顧客和你的產品或服務互動時，會看到什麼。謹記幾條重要規則：\n    *  做到不言自明: 週三早上會將草圖貼出給所有人看，所以必須讓人看得懂\n    *  匿名發表\n    *  別怕畫的醜: 一些框框、文字、火材人就很夠了\n    *  文字很重要: 選擇正確的用詞非常重要，不要用無意義的文字來填版，也不要畫波浪線來代表「這裡有文字」，應該好好創造出逼真的效果\n    *  取個吸引人的名字: 請給草圖一個名字，方便之後的評論。也可以藉由草圖的名字，吸引人注意方案背後的概念\n\n![方案草圖](/images/SPRINT/skatch.jpg)\n\n每個人負責一份方案草圖，如果靈感充沛，想多畫幾份也是可以的，但每多一份草圖，週三的檢視就會負擔重一些。\n\n<a name=\"促進者筆記\"></a>\n## 促進者筆記\n\n* 找人參加週五的測試: 週一或週二就應該開始為週五的測試找人\n* 透過Craigslist找人: 貼出可以吸引大眾的通用型廣告，利用問卷來篩選有意參加的人，給予小額報酬\n* 撰寫篩選問卷: 先寫下希望的測試顧客特徵，轉化為適當的問題，針對希望排除的特徵做一樣的事情。問題不能洩漏答案\n* 利用你的人脈網路找人\n\n<a name=\"星期三-wednesday\"></a>\n## 星期三 Wednesday\n到了週三早上，衝刺計畫團隊將有一疊解決方案。這很好，但也是一個問題。你們無法替全部方案做原型，然後一一測試。你們需要一個可靠的計畫。週三早上，你們將評論每一個方案，然後**決定**哪些方案最有機會達成你們的長期目標。在下午，你們將把方案草圖中的最佳場景編排成一個**分鏡腳本**，也就是方案原型的逐步說明。\n\n[![Tuesday](https://img.youtube.com/vi/hmXn4BhGquU/0.jpg)](https://www.youtube.com/watch?v=hmXn4BhGquU)\n\n<a name=\"黏貼決策\"></a>\n### 黏貼決策\n\n\n* 美術館: 用膠帶把方案草圖貼到牆上\n* 熱點圖: 靜靜瀏覽分析所有方案，用圓點標出有意思的部分\n    1. 不說話\n    2. 好好看一份方案草圖\n    3. 在喜歡的旁邊貼上圓點貼紙\n    4. 方案中覺得極有意思的點子，可貼上二或三張圓點貼紙\n    5. 如果對方案有疑慮，寫在便利貼上，貼在草圖下方\n    6. 轉到下一份草圖，重複上述步驟\n\n![熱點圖](/images/SPRINT/hotpoint.jpg)\n\n* 快速評論: 快速討論每個方案中有意思的部份，用便利貼記下大概念\n    1. 衝刺計畫成員聚集在一份草圖前\n    2. 設定三分鐘倒數\n    3. 促進者敘述方案\n    4. 促進者喊出突出的構想，也就是比較多圓點貼紙的部分\n    5. 促進者漏掉突出構想，由其他成員喊出來\n    6. 抄寫員把突出構想寫在便利貼，貼在草圖上方。替每一個構想取一個名字\n    7. 檢視疑慮和問題\n    8. 方案作者請保持沈默，直到獲邀發言(自行公開身份，說說我們遺漏的部分)\n    9. 由方案作者說明成員們沒注意到的部份，並回答問題\n    10. 轉到下一份草圖，重複上述流程\n\n![快速評論](/images/SPRINT/快速評論.jpg)\n\n* 稻草民調: 每個人選一個方案，用圓點貼紙表達自己的意見\n    1. 發給每人一票\n    2. 提醒所有人長期目標和衝刺計畫問題\n    3. 提醒所有人，最好選擇有巨大潛力的大膽構想\n    4. 設定時間，倒數十分鐘\n    5. 每個人私下寫下自己的選擇，可以是整個方案，也可以是方案中的某一個構想\n    6. 時間一到或所有人都準備好的時候，把代表選票的大圓點貼到方案草圖上\n    7. 每個人扼要解釋自己的選擇(1 min)\n\n![稻草民調](/images/SPRINT/稻草民調.jpg)\n\n* 超級票: 決策者用更多圓點貼紙投出「超級票」\n    * 目的是替團隊做出最終決定。每一個決策者可獲得三張特別票，而無論他們把票投給哪些方案或構想，衝刺計畫團隊都將依據此做原型和測試\n    * 可以選擇受歡迎的構想，也可以隨自己喜歡來投票\n    * 投票前，一樣提醒他長期目標與問題\n\n![超級票](/images/SPRINT/supervote.jpg)\n\n得到超級票的方案為贏家，其他留待日後參考。\n\n<a name=\"比拼\"></a>\n### 比拼\n\n有時候有兩個以上的方案都獲得了超級票而勝出，如果資源充足，可以都將方案做出原型來星期五的使用者測試驗證，但如果可以融合兩個方案，也有機會做出一個更棒的原型來進入測試。\n\n如果決定要比拼，請替原型取個感覺真實的品牌名稱，營造原型的真實性，也避免顧客不把它當一回事。\n\n* 記下後表決\n    1. 發給每個成員一張紙和一支筆\n    2. 每個人花3分鐘，靜靜地寫下自己的構想\n    3. 每個人花2分鐘做編輯，選出自己最滿意的2-3個構想\n    4. 把各人的最佳構想寫在白板上。如果團隊有七個人，總共大概會有15~20個構想\n    5. 每個人花2分鐘，從白板上靜靜地選出自己最喜歡的構想\n    6. 各人逐一喊出自己最喜歡的構想。白板上的構想每得一票，旁邊就畫一個圓點\n    7. 決策者做出最終決定。他一樣可以尊重多數人決定，也可以堅持自己獨特的想法\n\n![記下後表決](/images/SPRINT/write_vote.jpg)\n\n<a name=\"分鏡腳本\"></a>\n### 分鏡腳本\n\n![分鏡腳本](/images/SPRINT/分鏡腳本.jpg)\n\n* 畫網格，大概需要15個框格，從顧客接觸到產品的開場開始設計 `e.g. APP 從 App Store開始`，虛擬的媒體報導也是個好的開場\n* 選擇一個開場\n    * 網路搜尋\n    * 雜誌\n    * 商店貨架\n    * 應用程式商店\n    * 媒體報導\n    * **臉書**或**推特**\n* **填入腳本內容**，團隊成員一起完成每一步，盡可能用方案上的便利貼，忽略一些無法運作的「死胡同」(實際測試時，顧客可能也會忽略這些)。若要填補缺口，盡量從「日後參考方案」中挑選可用材料，避免當場創造新構想，請遵循以下指引：\n    * 利用既有材料\n    * 不要集體撰文: 不該試圖集體把文字改到理想狀態，容易浪費時間\n    * 細節夠用就好: 不要過度仔細，不必想好所有的細節，標上「週四負責人決定」\n    * 讓決策者決定: 因為大多精力在上午耗盡，這裡可多仰賴決策者決定\n    * 有疑問時，大膽一點: 衝刺計畫最好用來測試潛在報酬很高、相當冒險的方案。\n    * 把故事控制在15分鐘以內\n\n![分鏡範例](/images/SPRINT/分鏡範例.jpg)\n\n<a name=\"促進者筆記-1\"></a>\n## 促進者筆記\n\n* 避免耗盡力氣\n週三是必須接連做出很多決定的一天，因此容易耗盡決策電力。需保持警惕，留意看來無法快速得出結論的討論。出現這種情況，應該請出決策者來做決定。\n    * 小細節: 等到週四在處理\n    * 新點子: 先記下來，等到衝刺計畫結束再去探索","slug":"SPRINT衝刺計畫-Part2","published":1,"updated":"2016-09-16T07:33:07.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46ghw000escscjh3gievj","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sprint衝刺計畫\">SPRINT衝刺計畫</a><ul>\n<li><a href=\"#星期二-tuesday\">星期二 Tuesday</a><ul>\n<li><a href=\"#重新組合，加以改良\">重新組合，加以改良</a></li>\n<li><a href=\"#畫出方案草圖\">畫出方案草圖</a></li>\n</ul>\n</li>\n<li><a href=\"#促進者筆記\">促進者筆記</a></li>\n<li><a href=\"#星期三-wednesday\">星期三 Wednesday</a><ul>\n<li><a href=\"#黏貼決策\">黏貼決策</a></li>\n<li><a href=\"#比拼\">比拼</a></li>\n<li><a href=\"#分鏡腳本\">分鏡腳本</a></li>\n</ul>\n</li>\n<li><a href=\"#促進者筆記-1\">促進者筆記</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"sprint衝刺計畫\"></a></p>\n<h1 id=\"SPRINT衝刺計畫\"><a href=\"#SPRINT衝刺計畫\" class=\"headerlink\" title=\"SPRINT衝刺計畫\"></a>SPRINT衝刺計畫</h1><p><a name=\"星期二-tuesday\"></a></p>\n<h2 id=\"星期二-Tuesday\"><a href=\"#星期二-Tuesday\" class=\"headerlink\" title=\"星期二 Tuesday\"></a>星期二 Tuesday</h2><p>衝刺計畫團隊在週一界定了難題，並選擇了目標。週二你們將提出解決方案。這一天你們將先尋找靈感，也就是檢視一些既有的概念，想想可以如何<strong>重新組合並加以改良</strong>。然後在下午，每一個人將遵循一個強調批判思考而非藝術技巧的四步驟程序，<strong>畫出方案早圖</strong>。衝刺計畫週稍後，最好的一些草圖將成為方案圓形和測試計畫的基礎。週一晚上你們應該好好休息，早上起來吃個均衡的早餐，因為週二這一天非常重要。</p>\n<p><a href=\"https://www.youtube.com/watch?v=n4XBfr7PUnk\" target=\"_blank\" rel=\"external\"><img src=\"https://img.youtube.com/vi/n4XBfr7PUnk/0.jpg\" alt=\"Tuesday\"></a></p>\n<p><a name=\"重新組合，加以改良\"></a></p>\n<h3 id=\"重新組合，加以改良\"><a href=\"#重新組合，加以改良\" class=\"headerlink\" title=\"重新組合，加以改良\"></a>重新組合，加以改良</h3><ul>\n<li>找尋「材料」，可能來自其他領域、競爭對手、自己的公司</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">例子：</div><div class=\"line\">藍瓶團隊參考一家巧克力廠商，每一條Tcho巧可力棒包裝紙上，都印有一個簡單的「風味輪」(flavor wheel)，上面只有印六個字 : Bright, Fruity, Floral, Earthy, Nutty和Chocolatey</div><div class=\"line\">因此藍瓶團隊藉由這個概念，創造一組用來描述藍瓶咖啡豆的簡單風味詞彙：</div><div class=\"line\">Rich, Chocolatey, comforting....</div></pre></td></tr></table></figure>\n<h4 id=\"閃電型示範\"><a href=\"#閃電型示範\" class=\"headerlink\" title=\"閃電型示範\"></a>閃電型示範</h4><p><img src=\"/images/SPRINT/lightning.jpg\" alt=\"閃電示範\"></p>\n<ul>\n<li>列出清單: 要求團隊每一個人想想哪些產品或服務可以提供有用的靈感，列出一份清單。</li>\n<li>3分鐘的示範: 團隊成員逐一介紹自己推薦的產品，向所有人說明該產品的優點。</li>\n<li>記錄重點: 持續記錄有用的概念、示意圖，寫下簡單的標題與資料來源</li>\n</ul>\n<p><img src=\"/images/SPRINT/demo_record.jpg\" alt=\"記錄重點\"></p>\n<p>記錄下來的概念，應該足以提供每一個人的靈感，在檢視原本的示意圖，看看是否需要將問題區分來分工，或是全體集中在一個重要的目標上，可以要求每個人寫下自己有興趣的部份，加以分工。</p>\n<p><a name=\"畫出方案草圖\"></a></p>\n<h3 id=\"畫出方案草圖\"><a href=\"#畫出方案草圖\" class=\"headerlink\" title=\"畫出方案草圖\"></a>畫出方案草圖</h3><p>不用擔心不會畫圖，只要能畫出示意圖就好，基本上就是一些框框與文字的組合。重要的是方案的素質，而不是示意圖畫的多漂亮。</p>\n<ul>\n<li>畫圖的力量: 把抽想概念轉化為具體方案最快、最容易的方法；藉由畫出方案草圖來具體化自己的點子，才能讓團隊成員公平的評斷它。</li>\n<li>一起獨自努力: 獨自努力讓人有時間去做研究、尋找靈感，以及思考問題。獨自努力產生的責任壓力，促使我們發揮潛能，交出好成果。</li>\n</ul>\n<h4 id=\"四步驟畫圖法\"><a href=\"#四步驟畫圖法\" class=\"headerlink\" title=\"四步驟畫圖法\"></a>四步驟畫圖法</h4><p><img src=\"/images/SPRINT/4steps.jpg\" alt=\"四步驟畫圖法\"></p>\n<p>接下來的四個步驟，都不會有人去看別人的筆記、草圖，所以請放心大膽的自由發揮。</p>\n<ol>\n<li>[<strong>筆記</strong>] 搜集關鍵資料 (20分鐘): 把長期目標抄下，瀏覽示意圖、HMW筆記以及閃電型示範的筆記，給成員20分鐘整理筆記、上網找資料</li>\n<li>[<strong>構想</strong>] 畫出粗略方案 (20分鐘): 將手上的一疊筆記，整理出粗略構想，在紙上塗鴉、畫草圖，以及寫上一些標題，20分鐘後再花三分鐘檢視草稿，圈出自己喜歡的部份，在下一階段加以發揮</li>\n<li>[<strong>瘋狂八</strong>] 快速擬出八個方案變體 (8分鐘): 瘋狂指的是這項作業的節奏，拿出一張A4大小的紙張，對折三次產生八格。每隔花個一分鐘，再八分鐘內畫出八個簡略的草圖。根據同一個方案，畫出多個方案變體，重點是強迫自己考慮替代方案</li>\n<li>[<strong>畫出方案草圖</strong>] 擬定一個具體方案 (30分鐘+): 方案草圖會讓成員檢視，所以必須是深思熟慮後的具體結果，且必須是容易理解的。方案草圖應像分鏡腳本，畫出顧客和你的產品或服務互動時，會看到什麼。謹記幾條重要規則：<ul>\n<li>做到不言自明: 週三早上會將草圖貼出給所有人看，所以必須讓人看得懂</li>\n<li>匿名發表</li>\n<li>別怕畫的醜: 一些框框、文字、火材人就很夠了</li>\n<li>文字很重要: 選擇正確的用詞非常重要，不要用無意義的文字來填版，也不要畫波浪線來代表「這裡有文字」，應該好好創造出逼真的效果</li>\n<li>取個吸引人的名字: 請給草圖一個名字，方便之後的評論。也可以藉由草圖的名字，吸引人注意方案背後的概念</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/SPRINT/skatch.jpg\" alt=\"方案草圖\"></p>\n<p>每個人負責一份方案草圖，如果靈感充沛，想多畫幾份也是可以的，但每多一份草圖，週三的檢視就會負擔重一些。</p>\n<p><a name=\"促進者筆記\"></a></p>\n<h2 id=\"促進者筆記\"><a href=\"#促進者筆記\" class=\"headerlink\" title=\"促進者筆記\"></a>促進者筆記</h2><ul>\n<li>找人參加週五的測試: 週一或週二就應該開始為週五的測試找人</li>\n<li>透過Craigslist找人: 貼出可以吸引大眾的通用型廣告，利用問卷來篩選有意參加的人，給予小額報酬</li>\n<li>撰寫篩選問卷: 先寫下希望的測試顧客特徵，轉化為適當的問題，針對希望排除的特徵做一樣的事情。問題不能洩漏答案</li>\n<li>利用你的人脈網路找人</li>\n</ul>\n<p><a name=\"星期三-wednesday\"></a></p>\n<h2 id=\"星期三-Wednesday\"><a href=\"#星期三-Wednesday\" class=\"headerlink\" title=\"星期三 Wednesday\"></a>星期三 Wednesday</h2><p>到了週三早上，衝刺計畫團隊將有一疊解決方案。這很好，但也是一個問題。你們無法替全部方案做原型，然後一一測試。你們需要一個可靠的計畫。週三早上，你們將評論每一個方案，然後<strong>決定</strong>哪些方案最有機會達成你們的長期目標。在下午，你們將把方案草圖中的最佳場景編排成一個<strong>分鏡腳本</strong>，也就是方案原型的逐步說明。</p>\n<p><a href=\"https://www.youtube.com/watch?v=hmXn4BhGquU\" target=\"_blank\" rel=\"external\"><img src=\"https://img.youtube.com/vi/hmXn4BhGquU/0.jpg\" alt=\"Tuesday\"></a></p>\n<p><a name=\"黏貼決策\"></a></p>\n<h3 id=\"黏貼決策\"><a href=\"#黏貼決策\" class=\"headerlink\" title=\"黏貼決策\"></a>黏貼決策</h3><ul>\n<li>美術館: 用膠帶把方案草圖貼到牆上</li>\n<li>熱點圖: 靜靜瀏覽分析所有方案，用圓點標出有意思的部分<ol>\n<li>不說話</li>\n<li>好好看一份方案草圖</li>\n<li>在喜歡的旁邊貼上圓點貼紙</li>\n<li>方案中覺得極有意思的點子，可貼上二或三張圓點貼紙</li>\n<li>如果對方案有疑慮，寫在便利貼上，貼在草圖下方</li>\n<li>轉到下一份草圖，重複上述步驟</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/hotpoint.jpg\" alt=\"熱點圖\"></p>\n<ul>\n<li>快速評論: 快速討論每個方案中有意思的部份，用便利貼記下大概念<ol>\n<li>衝刺計畫成員聚集在一份草圖前</li>\n<li>設定三分鐘倒數</li>\n<li>促進者敘述方案</li>\n<li>促進者喊出突出的構想，也就是比較多圓點貼紙的部分</li>\n<li>促進者漏掉突出構想，由其他成員喊出來</li>\n<li>抄寫員把突出構想寫在便利貼，貼在草圖上方。替每一個構想取一個名字</li>\n<li>檢視疑慮和問題</li>\n<li>方案作者請保持沈默，直到獲邀發言(自行公開身份，說說我們遺漏的部分)</li>\n<li>由方案作者說明成員們沒注意到的部份，並回答問題</li>\n<li>轉到下一份草圖，重複上述流程</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/快速評論.jpg\" alt=\"快速評論\"></p>\n<ul>\n<li>稻草民調: 每個人選一個方案，用圓點貼紙表達自己的意見<ol>\n<li>發給每人一票</li>\n<li>提醒所有人長期目標和衝刺計畫問題</li>\n<li>提醒所有人，最好選擇有巨大潛力的大膽構想</li>\n<li>設定時間，倒數十分鐘</li>\n<li>每個人私下寫下自己的選擇，可以是整個方案，也可以是方案中的某一個構想</li>\n<li>時間一到或所有人都準備好的時候，把代表選票的大圓點貼到方案草圖上</li>\n<li>每個人扼要解釋自己的選擇(1 min)</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/稻草民調.jpg\" alt=\"稻草民調\"></p>\n<ul>\n<li>超級票: 決策者用更多圓點貼紙投出「超級票」<ul>\n<li>目的是替團隊做出最終決定。每一個決策者可獲得三張特別票，而無論他們把票投給哪些方案或構想，衝刺計畫團隊都將依據此做原型和測試</li>\n<li>可以選擇受歡迎的構想，也可以隨自己喜歡來投票</li>\n<li>投票前，一樣提醒他長期目標與問題</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/supervote.jpg\" alt=\"超級票\"></p>\n<p>得到超級票的方案為贏家，其他留待日後參考。</p>\n<p><a name=\"比拼\"></a></p>\n<h3 id=\"比拼\"><a href=\"#比拼\" class=\"headerlink\" title=\"比拼\"></a>比拼</h3><p>有時候有兩個以上的方案都獲得了超級票而勝出，如果資源充足，可以都將方案做出原型來星期五的使用者測試驗證，但如果可以融合兩個方案，也有機會做出一個更棒的原型來進入測試。</p>\n<p>如果決定要比拼，請替原型取個感覺真實的品牌名稱，營造原型的真實性，也避免顧客不把它當一回事。</p>\n<ul>\n<li>記下後表決<ol>\n<li>發給每個成員一張紙和一支筆</li>\n<li>每個人花3分鐘，靜靜地寫下自己的構想</li>\n<li>每個人花2分鐘做編輯，選出自己最滿意的2-3個構想</li>\n<li>把各人的最佳構想寫在白板上。如果團隊有七個人，總共大概會有15~20個構想</li>\n<li>每個人花2分鐘，從白板上靜靜地選出自己最喜歡的構想</li>\n<li>各人逐一喊出自己最喜歡的構想。白板上的構想每得一票，旁邊就畫一個圓點</li>\n<li>決策者做出最終決定。他一樣可以尊重多數人決定，也可以堅持自己獨特的想法</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/write_vote.jpg\" alt=\"記下後表決\"></p>\n<p><a name=\"分鏡腳本\"></a></p>\n<h3 id=\"分鏡腳本\"><a href=\"#分鏡腳本\" class=\"headerlink\" title=\"分鏡腳本\"></a>分鏡腳本</h3><p><img src=\"/images/SPRINT/分鏡腳本.jpg\" alt=\"分鏡腳本\"></p>\n<ul>\n<li>畫網格，大概需要15個框格，從顧客接觸到產品的開場開始設計 <code>e.g. APP 從 App Store開始</code>，虛擬的媒體報導也是個好的開場</li>\n<li>選擇一個開場<ul>\n<li>網路搜尋</li>\n<li>雜誌</li>\n<li>商店貨架</li>\n<li>應用程式商店</li>\n<li>媒體報導</li>\n<li><strong>臉書</strong>或<strong>推特</strong></li>\n</ul>\n</li>\n<li><strong>填入腳本內容</strong>，團隊成員一起完成每一步，盡可能用方案上的便利貼，忽略一些無法運作的「死胡同」(實際測試時，顧客可能也會忽略這些)。若要填補缺口，盡量從「日後參考方案」中挑選可用材料，避免當場創造新構想，請遵循以下指引：<ul>\n<li>利用既有材料</li>\n<li>不要集體撰文: 不該試圖集體把文字改到理想狀態，容易浪費時間</li>\n<li>細節夠用就好: 不要過度仔細，不必想好所有的細節，標上「週四負責人決定」</li>\n<li>讓決策者決定: 因為大多精力在上午耗盡，這裡可多仰賴決策者決定</li>\n<li>有疑問時，大膽一點: 衝刺計畫最好用來測試潛在報酬很高、相當冒險的方案。</li>\n<li>把故事控制在15分鐘以內</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/分鏡範例.jpg\" alt=\"分鏡範例\"></p>\n<p><a name=\"促進者筆記-1\"></a></p>\n<h2 id=\"促進者筆記-1\"><a href=\"#促進者筆記-1\" class=\"headerlink\" title=\"促進者筆記\"></a>促進者筆記</h2><ul>\n<li>避免耗盡力氣<br>週三是必須接連做出很多決定的一天，因此容易耗盡決策電力。需保持警惕，留意看來無法快速得出結論的討論。出現這種情況，應該請出決策者來做決定。<ul>\n<li>小細節: 等到週四在處理</li>\n<li>新點子: 先記下來，等到衝刺計畫結束再去探索</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sprint衝刺計畫\">SPRINT衝刺計畫</a><ul>\n<li><a href=\"#星期二-tuesday\">星期二 Tuesday</a><ul>\n<li><a href=\"#重新組合，加以改良\">重新組合，加以改良</a></li>\n<li><a href=\"#畫出方案草圖\">畫出方案草圖</a></li>\n</ul>\n</li>\n<li><a href=\"#促進者筆記\">促進者筆記</a></li>\n<li><a href=\"#星期三-wednesday\">星期三 Wednesday</a><ul>\n<li><a href=\"#黏貼決策\">黏貼決策</a></li>\n<li><a href=\"#比拼\">比拼</a></li>\n<li><a href=\"#分鏡腳本\">分鏡腳本</a></li>\n</ul>\n</li>\n<li><a href=\"#促進者筆記-1\">促進者筆記</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"sprint衝刺計畫\"></a></p>\n<h1 id=\"SPRINT衝刺計畫\"><a href=\"#SPRINT衝刺計畫\" class=\"headerlink\" title=\"SPRINT衝刺計畫\"></a>SPRINT衝刺計畫</h1><p><a name=\"星期二-tuesday\"></a></p>\n<h2 id=\"星期二-Tuesday\"><a href=\"#星期二-Tuesday\" class=\"headerlink\" title=\"星期二 Tuesday\"></a>星期二 Tuesday</h2><p>衝刺計畫團隊在週一界定了難題，並選擇了目標。週二你們將提出解決方案。這一天你們將先尋找靈感，也就是檢視一些既有的概念，想想可以如何<strong>重新組合並加以改良</strong>。然後在下午，每一個人將遵循一個強調批判思考而非藝術技巧的四步驟程序，<strong>畫出方案早圖</strong>。衝刺計畫週稍後，最好的一些草圖將成為方案圓形和測試計畫的基礎。週一晚上你們應該好好休息，早上起來吃個均衡的早餐，因為週二這一天非常重要。</p>\n<p><a href=\"https://www.youtube.com/watch?v=n4XBfr7PUnk\"><img src=\"https://img.youtube.com/vi/n4XBfr7PUnk/0.jpg\" alt=\"Tuesday\"></a></p>\n<p><a name=\"重新組合，加以改良\"></a></p>\n<h3 id=\"重新組合，加以改良\"><a href=\"#重新組合，加以改良\" class=\"headerlink\" title=\"重新組合，加以改良\"></a>重新組合，加以改良</h3><ul>\n<li>找尋「材料」，可能來自其他領域、競爭對手、自己的公司</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">例子：</div><div class=\"line\">藍瓶團隊參考一家巧克力廠商，每一條Tcho巧可力棒包裝紙上，都印有一個簡單的「風味輪」(flavor wheel)，上面只有印六個字 : Bright, Fruity, Floral, Earthy, Nutty和Chocolatey</div><div class=\"line\">因此藍瓶團隊藉由這個概念，創造一組用來描述藍瓶咖啡豆的簡單風味詞彙：</div><div class=\"line\">Rich, Chocolatey, comforting....</div></pre></td></tr></table></figure>\n<h4 id=\"閃電型示範\"><a href=\"#閃電型示範\" class=\"headerlink\" title=\"閃電型示範\"></a>閃電型示範</h4><p><img src=\"/images/SPRINT/lightning.jpg\" alt=\"閃電示範\"></p>\n<ul>\n<li>列出清單: 要求團隊每一個人想想哪些產品或服務可以提供有用的靈感，列出一份清單。</li>\n<li>3分鐘的示範: 團隊成員逐一介紹自己推薦的產品，向所有人說明該產品的優點。</li>\n<li>記錄重點: 持續記錄有用的概念、示意圖，寫下簡單的標題與資料來源</li>\n</ul>\n<p><img src=\"/images/SPRINT/demo_record.jpg\" alt=\"記錄重點\"></p>\n<p>記錄下來的概念，應該足以提供每一個人的靈感，在檢視原本的示意圖，看看是否需要將問題區分來分工，或是全體集中在一個重要的目標上，可以要求每個人寫下自己有興趣的部份，加以分工。</p>\n<p><a name=\"畫出方案草圖\"></a></p>\n<h3 id=\"畫出方案草圖\"><a href=\"#畫出方案草圖\" class=\"headerlink\" title=\"畫出方案草圖\"></a>畫出方案草圖</h3><p>不用擔心不會畫圖，只要能畫出示意圖就好，基本上就是一些框框與文字的組合。重要的是方案的素質，而不是示意圖畫的多漂亮。</p>\n<ul>\n<li>畫圖的力量: 把抽想概念轉化為具體方案最快、最容易的方法；藉由畫出方案草圖來具體化自己的點子，才能讓團隊成員公平的評斷它。</li>\n<li>一起獨自努力: 獨自努力讓人有時間去做研究、尋找靈感，以及思考問題。獨自努力產生的責任壓力，促使我們發揮潛能，交出好成果。</li>\n</ul>\n<h4 id=\"四步驟畫圖法\"><a href=\"#四步驟畫圖法\" class=\"headerlink\" title=\"四步驟畫圖法\"></a>四步驟畫圖法</h4><p><img src=\"/images/SPRINT/4steps.jpg\" alt=\"四步驟畫圖法\"></p>\n<p>接下來的四個步驟，都不會有人去看別人的筆記、草圖，所以請放心大膽的自由發揮。</p>\n<ol>\n<li>[<strong>筆記</strong>] 搜集關鍵資料 (20分鐘): 把長期目標抄下，瀏覽示意圖、HMW筆記以及閃電型示範的筆記，給成員20分鐘整理筆記、上網找資料</li>\n<li>[<strong>構想</strong>] 畫出粗略方案 (20分鐘): 將手上的一疊筆記，整理出粗略構想，在紙上塗鴉、畫草圖，以及寫上一些標題，20分鐘後再花三分鐘檢視草稿，圈出自己喜歡的部份，在下一階段加以發揮</li>\n<li>[<strong>瘋狂八</strong>] 快速擬出八個方案變體 (8分鐘): 瘋狂指的是這項作業的節奏，拿出一張A4大小的紙張，對折三次產生八格。每隔花個一分鐘，再八分鐘內畫出八個簡略的草圖。根據同一個方案，畫出多個方案變體，重點是強迫自己考慮替代方案</li>\n<li>[<strong>畫出方案草圖</strong>] 擬定一個具體方案 (30分鐘+): 方案草圖會讓成員檢視，所以必須是深思熟慮後的具體結果，且必須是容易理解的。方案草圖應像分鏡腳本，畫出顧客和你的產品或服務互動時，會看到什麼。謹記幾條重要規則：<ul>\n<li>做到不言自明: 週三早上會將草圖貼出給所有人看，所以必須讓人看得懂</li>\n<li>匿名發表</li>\n<li>別怕畫的醜: 一些框框、文字、火材人就很夠了</li>\n<li>文字很重要: 選擇正確的用詞非常重要，不要用無意義的文字來填版，也不要畫波浪線來代表「這裡有文字」，應該好好創造出逼真的效果</li>\n<li>取個吸引人的名字: 請給草圖一個名字，方便之後的評論。也可以藉由草圖的名字，吸引人注意方案背後的概念</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/SPRINT/skatch.jpg\" alt=\"方案草圖\"></p>\n<p>每個人負責一份方案草圖，如果靈感充沛，想多畫幾份也是可以的，但每多一份草圖，週三的檢視就會負擔重一些。</p>\n<p><a name=\"促進者筆記\"></a></p>\n<h2 id=\"促進者筆記\"><a href=\"#促進者筆記\" class=\"headerlink\" title=\"促進者筆記\"></a>促進者筆記</h2><ul>\n<li>找人參加週五的測試: 週一或週二就應該開始為週五的測試找人</li>\n<li>透過Craigslist找人: 貼出可以吸引大眾的通用型廣告，利用問卷來篩選有意參加的人，給予小額報酬</li>\n<li>撰寫篩選問卷: 先寫下希望的測試顧客特徵，轉化為適當的問題，針對希望排除的特徵做一樣的事情。問題不能洩漏答案</li>\n<li>利用你的人脈網路找人</li>\n</ul>\n<p><a name=\"星期三-wednesday\"></a></p>\n<h2 id=\"星期三-Wednesday\"><a href=\"#星期三-Wednesday\" class=\"headerlink\" title=\"星期三 Wednesday\"></a>星期三 Wednesday</h2><p>到了週三早上，衝刺計畫團隊將有一疊解決方案。這很好，但也是一個問題。你們無法替全部方案做原型，然後一一測試。你們需要一個可靠的計畫。週三早上，你們將評論每一個方案，然後<strong>決定</strong>哪些方案最有機會達成你們的長期目標。在下午，你們將把方案草圖中的最佳場景編排成一個<strong>分鏡腳本</strong>，也就是方案原型的逐步說明。</p>\n<p><a href=\"https://www.youtube.com/watch?v=hmXn4BhGquU\"><img src=\"https://img.youtube.com/vi/hmXn4BhGquU/0.jpg\" alt=\"Tuesday\"></a></p>\n<p><a name=\"黏貼決策\"></a></p>\n<h3 id=\"黏貼決策\"><a href=\"#黏貼決策\" class=\"headerlink\" title=\"黏貼決策\"></a>黏貼決策</h3><ul>\n<li>美術館: 用膠帶把方案草圖貼到牆上</li>\n<li>熱點圖: 靜靜瀏覽分析所有方案，用圓點標出有意思的部分<ol>\n<li>不說話</li>\n<li>好好看一份方案草圖</li>\n<li>在喜歡的旁邊貼上圓點貼紙</li>\n<li>方案中覺得極有意思的點子，可貼上二或三張圓點貼紙</li>\n<li>如果對方案有疑慮，寫在便利貼上，貼在草圖下方</li>\n<li>轉到下一份草圖，重複上述步驟</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/hotpoint.jpg\" alt=\"熱點圖\"></p>\n<ul>\n<li>快速評論: 快速討論每個方案中有意思的部份，用便利貼記下大概念<ol>\n<li>衝刺計畫成員聚集在一份草圖前</li>\n<li>設定三分鐘倒數</li>\n<li>促進者敘述方案</li>\n<li>促進者喊出突出的構想，也就是比較多圓點貼紙的部分</li>\n<li>促進者漏掉突出構想，由其他成員喊出來</li>\n<li>抄寫員把突出構想寫在便利貼，貼在草圖上方。替每一個構想取一個名字</li>\n<li>檢視疑慮和問題</li>\n<li>方案作者請保持沈默，直到獲邀發言(自行公開身份，說說我們遺漏的部分)</li>\n<li>由方案作者說明成員們沒注意到的部份，並回答問題</li>\n<li>轉到下一份草圖，重複上述流程</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/快速評論.jpg\" alt=\"快速評論\"></p>\n<ul>\n<li>稻草民調: 每個人選一個方案，用圓點貼紙表達自己的意見<ol>\n<li>發給每人一票</li>\n<li>提醒所有人長期目標和衝刺計畫問題</li>\n<li>提醒所有人，最好選擇有巨大潛力的大膽構想</li>\n<li>設定時間，倒數十分鐘</li>\n<li>每個人私下寫下自己的選擇，可以是整個方案，也可以是方案中的某一個構想</li>\n<li>時間一到或所有人都準備好的時候，把代表選票的大圓點貼到方案草圖上</li>\n<li>每個人扼要解釋自己的選擇(1 min)</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/稻草民調.jpg\" alt=\"稻草民調\"></p>\n<ul>\n<li>超級票: 決策者用更多圓點貼紙投出「超級票」<ul>\n<li>目的是替團隊做出最終決定。每一個決策者可獲得三張特別票，而無論他們把票投給哪些方案或構想，衝刺計畫團隊都將依據此做原型和測試</li>\n<li>可以選擇受歡迎的構想，也可以隨自己喜歡來投票</li>\n<li>投票前，一樣提醒他長期目標與問題</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/supervote.jpg\" alt=\"超級票\"></p>\n<p>得到超級票的方案為贏家，其他留待日後參考。</p>\n<p><a name=\"比拼\"></a></p>\n<h3 id=\"比拼\"><a href=\"#比拼\" class=\"headerlink\" title=\"比拼\"></a>比拼</h3><p>有時候有兩個以上的方案都獲得了超級票而勝出，如果資源充足，可以都將方案做出原型來星期五的使用者測試驗證，但如果可以融合兩個方案，也有機會做出一個更棒的原型來進入測試。</p>\n<p>如果決定要比拼，請替原型取個感覺真實的品牌名稱，營造原型的真實性，也避免顧客不把它當一回事。</p>\n<ul>\n<li>記下後表決<ol>\n<li>發給每個成員一張紙和一支筆</li>\n<li>每個人花3分鐘，靜靜地寫下自己的構想</li>\n<li>每個人花2分鐘做編輯，選出自己最滿意的2-3個構想</li>\n<li>把各人的最佳構想寫在白板上。如果團隊有七個人，總共大概會有15~20個構想</li>\n<li>每個人花2分鐘，從白板上靜靜地選出自己最喜歡的構想</li>\n<li>各人逐一喊出自己最喜歡的構想。白板上的構想每得一票，旁邊就畫一個圓點</li>\n<li>決策者做出最終決定。他一樣可以尊重多數人決定，也可以堅持自己獨特的想法</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/write_vote.jpg\" alt=\"記下後表決\"></p>\n<p><a name=\"分鏡腳本\"></a></p>\n<h3 id=\"分鏡腳本\"><a href=\"#分鏡腳本\" class=\"headerlink\" title=\"分鏡腳本\"></a>分鏡腳本</h3><p><img src=\"/images/SPRINT/分鏡腳本.jpg\" alt=\"分鏡腳本\"></p>\n<ul>\n<li>畫網格，大概需要15個框格，從顧客接觸到產品的開場開始設計 <code>e.g. APP 從 App Store開始</code>，虛擬的媒體報導也是個好的開場</li>\n<li>選擇一個開場<ul>\n<li>網路搜尋</li>\n<li>雜誌</li>\n<li>商店貨架</li>\n<li>應用程式商店</li>\n<li>媒體報導</li>\n<li><strong>臉書</strong>或<strong>推特</strong></li>\n</ul>\n</li>\n<li><strong>填入腳本內容</strong>，團隊成員一起完成每一步，盡可能用方案上的便利貼，忽略一些無法運作的「死胡同」(實際測試時，顧客可能也會忽略這些)。若要填補缺口，盡量從「日後參考方案」中挑選可用材料，避免當場創造新構想，請遵循以下指引：<ul>\n<li>利用既有材料</li>\n<li>不要集體撰文: 不該試圖集體把文字改到理想狀態，容易浪費時間</li>\n<li>細節夠用就好: 不要過度仔細，不必想好所有的細節，標上「週四負責人決定」</li>\n<li>讓決策者決定: 因為大多精力在上午耗盡，這裡可多仰賴決策者決定</li>\n<li>有疑問時，大膽一點: 衝刺計畫最好用來測試潛在報酬很高、相當冒險的方案。</li>\n<li>把故事控制在15分鐘以內</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/SPRINT/分鏡範例.jpg\" alt=\"分鏡範例\"></p>\n<p><a name=\"促進者筆記-1\"></a></p>\n<h2 id=\"促進者筆記-1\"><a href=\"#促進者筆記-1\" class=\"headerlink\" title=\"促進者筆記\"></a>促進者筆記</h2><ul>\n<li>避免耗盡力氣<br>週三是必須接連做出很多決定的一天，因此容易耗盡決策電力。需保持警惕，留意看來無法快速得出結論的討論。出現這種情況，應該請出決策者來做決定。<ul>\n<li>小細節: 等到週四在處理</li>\n<li>新點子: 先記下來，等到衝刺計畫結束再去探索</li>\n</ul>\n</li>\n</ul>\n"},{"layout":"post","title":"SPRINT衝刺計畫 - Part3","author":"Soar Lin","cdn":"header-off","header-img":"","date":"2016-09-16T07:34:30.000Z","_content":"<!-- MarkdownTOC -->\n\n- [SPRINT衝刺計畫](#sprint衝刺計畫)\n    - [星期四 Thursday](#星期四-thursday)\n        - [原型心態](#原型心態)\n        - [原型](#原型)\n    - [星期五 Friday](#星期五-friday)\n        - [小數據](#小數據)\n        - [五幕式訪談](#五幕式訪談)\n        - [集體做訪談筆記](#集體做訪談筆記)\n    - [檢查表](#檢查表)\n        - [做好準備](#做好準備)\n        - [關鍵概念](#關鍵概念)\n        - [衝刺計畫用品](#衝刺計畫用品)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"sprint衝刺計畫\"></a>\n# SPRINT衝刺計畫\n\n<a name=\"星期四-thursday\"></a>\n## 星期四 Thursday\n你們在週三創造出一個分鏡腳本。週四你們將基於**「模擬」原則**，根據這個腳本做出一個逼真的方案**原型**。在接下來幾章，我們將說明可以幫助你們只用七個小時便做出原型的心態、策略和工具。\n\n[![Thursday](https://img.youtube.com/vi/MRDDLHDqc9o/0.jpg)](https://www.youtube.com/watch?v=MRDDLHDqc9o)\n\n花在某件東西上的時間越久，對它的依戀性往往卻強，而認真看待負面測試結果的可能性就越低。如果只花一天時間，你將能接受意見回饋。如果已經投入三個月，很可能已經決心撐到底。\n\n<a name=\"原型心態\"></a>\n### 原型心態\n\n1. 無論是什麼方案，都可以做原型\n2. 原型是可以捨棄的\n3. 做到剛好能滿足測試需求即可\n4. 原型看起來必須夠真實\n\n理想的原型品質是剛剛好，品質太差，顧客會不相信這個產品，如果追求太高，又太花時間。\n\n````\n範例: FITSTAR\n\n問題: 我們可以如何說明一種新的健身應用程式？\n形式: 模擬App Store與iPad應用程式\n工具: Keynote、真人演出、iPhone影片、iPad\n````\n````\n範例: SLACK\n\n問題: 要向非科技業的用戶說明Slack這個軟體，最好的方法是什麼？\n形式: 兩個相互競爭的網站，包括一些有互動功能的軟體\n工具: Keynote, InVision, 真實的Slack軟體, 真人演出\n````\n````\n範例: FOUNDATION MEDICINE\n\n問題: 腫瘤科醫師做治療決定時，需要哪些必要的資料?\n形式: 紙本醫學報告，只有第一頁的實質內容\n工具: Keynote, 逼真的檢驗數據, 印表機\n````\n````\n範例: SAVIOKE\n\n問題: 飯店房客對有個性的機器人會有什麼反應？\n形式: 真實的機器人加iPad觸控螢幕\n工具: Keynote, 音效樣本庫, iPad, 機器人, 遙控工具, 飯店客戶, 真人演出\n````\n````\n範例: ONE MEDICAL GROUP\n\n問題: 主要替專業人士看診的診所，可以轉型為適合有孩子的家庭嗎？\n形式: 一家診所，只做一晚的測試\n工具: 診所, 診所職員, 香蕉, 蠟筆\n````\n\n<a name=\"原型\"></a>\n### 原型\n每一個原型都是獨特的，因此沒有精確地逐步程序可以分享給大家。不過有四項作業總是可以幫助我們走對路：\n\n#### 選對工具\n* 如果原型在**螢幕**上(網站、應用程式、軟體等等)，請使用**Keynote、PowerPoint**，或做網站的工具**Squarespace**\n* 如果原型是**紙本**(報告、宣傳冊、傳單等等)，請使用**Keynote、PowerPoint**，或文字處理軟體如**Microsoft Word**\n* 如果原型是某種**服務**(顧客支援、客戶服務、醫療等等)，請寫**腳本**，然後安排衝刺計畫團隊成員當演員。\n* 如果是實體空間(商店、辦公樓大廳等等)，請找一個**既有空間**加以改裝\n* 如果是**某種物件**(實體產品、機器等等)，請找某個**既有物件**加以改裝、用**3D印表機印出原型**，或是用Keynote、PowerPoint，配合該物件照片或示意圖，**做出行銷材料的原型**\n\n#### 分工解決\n促進者應該幫忙衝刺團隊分配以下工作：\n\n* 製作者(Maker)，至少2名\n* 整合者(Stitcher)，1名\n* 寫作者(Writer)，1名\n    * 文字對原型的重要性，需具備相關背景知識\n* 資料搜集者(Asset Collector)，至少1名\n    * 四處搜集製作原型所需的素材\n* 採訪者(Interviewer)，1名\n    * 先寫好採訪腳本，最好不要參與原型製作，避免投入感情\n\n#### 整合\n整合者確保原型中的日期、時間、名字和其他內容並無矛盾。\n\n#### 試運轉\n最好能在下午三點左右做原型的試運轉，以便有足夠的時間來糾正錯誤和修補漏洞。讓所有人暫停工作聚在一起，請整合者排演整個原型，邊演邊解釋。\n試運轉主要觀眾，是週五要採訪顧客的採訪者。採訪者必須先熟悉原型和衝刺計畫問題，以便從訪問中得到最多有用的資料。\n\n<a name=\"星期五-friday\"></a>\n## 星期五 Friday\n衝刺計畫始於一項大挑戰和一個傑出的團隊─沒有很多其他東西。當衝刺計畫週來到週五時，你們已經研擬出有希望的方案，選出當中的最佳方案，並且做出了逼真的原型。光是這樣已經是收穫豐富的一週。但你們將在週五再進一步，**訪問顧客**，並觀察他們對原型的反應，**從中吸取教訓**。週五的測試確立整個衝刺計畫過程的價值：測試完成後，你們將知道自己還有多遠的路要走，以及下一步該做什麼。\n\n[![Thursday](https://img.youtube.com/vi/wz7Bo4-CnFg/0.jpg)](https://www.youtube.com/watch?v=wz7Bo4-CnFg)\n\n<a name=\"小數據\"></a>\n### 小數據\n\n找5個顧客來訪問，**5是神奇數字**，同一個研究裡，訪問五個人之後，做更多的訪問產生的貢獻很紹，投資報酬率像石頭一樣快速下降。\n\n![測試用戶人數與可用性問題](/images/SPRINT/testuser.jpg)\n\n<a name=\"五幕式訪談\"></a>\n### 五幕式訪談\n\n訪問分兩個房間進行，衝刺計畫團隊成員觀看直播，採訪人員在另一間小房間\n\n1. 友善地歡迎受訪顧客，開個好頭\n2. 藉由連串的開放式、一般背景問題瞭解客戶\n3. 介紹原型\n4. 一些具體操作，藉此瞭解顧客對原型的反應\n5. 快速的總結討論，藉此紀錄顧客整體想法和印象\n\n* 友善的歡迎\n\n讓採訪者感到輕鬆自在，並事先告知且得到顧客同意後進行(務必簽署公司律師堅持使用的法律文件許可和發明轉讓條款)。必須要讓受訪的顧客感到自在，誠實的回答問題。\n\n* 背景問題\n\n藉由開始發問一些跟顧客背景有關的問題，來漸漸引導到一些相關的問題上\n\n* 介紹原型\n\n採訪者應該提醒顧客，你們在測試的是原型，而不是顧客：\n\n「你提供的意見，無所謂對錯。因為**這原型不是我設計的**，你批評他不會讓我受傷，你稱讚他也不會讓我開心。事實上，坦率、真誠的回饋對我們最有幫助」\n\n時時提醒顧客隨時說出心中所想\n\n* 提示和操作\n\n適當的操作指示，顧客最好能自行摸索出如何使用原型。顧客做這些事情時，採訪者應適時提問，幫助他說出自己的想法：\n\n````\n那是什麼？有什麼用處？\n你對那東西有什麼想法？\n你估計那可以產生什麼作用？\n你看著這裡時，想到什麼？\n你在找什麼？\n你接下來將做什麼？為什麼？\n````\n\n* 快速的總結討論\n\n一些總結問題：\n\n````\n比起你在使用的東西，你覺得這產品如何？\n這產品有哪些方面是你喜歡的？哪些方面是你不喜歡的？\n你會怎麼向朋友描述這產品？\n如果你可以許三個願改善這產品，你的願望是什麼？\n````\n\n如果測試兩款或更多原型，再多問一些比較類的問題，訪問結束後，感謝顧客且送出禮券，然後送他離開。過成功應該多鼓勵顧客講話，同時保持中立。不需要做筆記，讓衝刺計畫室裡的成員來做筆記。\n\n<a name=\"集體做訪談筆記\"></a>\n### 集體做訪談筆記\n在衝刺計畫室裡的一塊大白板上畫一個表格，要有五欄(每個受訪者一欄)，以及數列(每個原型一列 or 原型每一部分一列又或者一條衝刺計畫問題一列)\n\n![訪談筆記](/images/SPRINT/interview_note.jpg)\n\n發便利貼與白板筆給每一個人，正面的用綠色，負面的用紅色，中性用黑色。或是在便利貼左上用加號表示正面筆記，減號表示負面筆記。記住，如果顧客使用原型上遇到問題，不是他的問題，是你們的問題。最後把整理好的便利貼，貼到表格相關位置。\n\n#### 尋找型態\n\n成員靠近白板與便利貼，從中找尋自己看到的型態，把它記下。個別尋找五分鐘後，每個人分享自己看到的型態。\n\n#### 回到未來\n\n回顧週一所訂下的衝刺計畫問題，並看看目前的原型是否能解決這個問題。\n\n#### 每次都是贏家\n\n衝刺計畫最好的一點，就是不可能毫無收穫。不論邀請顧客來測試的結果是好是壞，都對接下來要做的東西有幫助。\n\n\n<a name=\"檢查表\"></a>\n## 檢查表\n\n<a name=\"做好準備\"></a>\n### 做好準備\n\n* 選個大難題: 適用三種情況：事情攸關重大利益、時間緊迫，或者陷入了僵局\n* 找一位(或兩位)決策者: 如果決策者無法全程參與，請他派一名代表\n* 組織衝刺計畫團隊: 人數應該控制在七人以內，並確保團隊成員具備多元技能\n* 安排專家客串: 安排重要的專家在週一下午受訪\n* 選一位促進者: 負責管理時間、對話和整個衝刺計畫的過程，必須有信心引導會議，包括眾人的討論\n* 在日程表上空出五個整天\n* 預定一間房間，準備兩大塊白板\n\n<a name=\"關鍵概念\"></a>\n### 關鍵概念\n\n* 避免干擾: 不要使用筆電、手機、iPad等平板電腦\n* 計時器: 緊湊的時間安排，可以增強人們對衝刺計畫流程的信心、專注力和急迫感\n* 晚一點吃午餐: 上午11:30休息一下吃點零食，下午一點在吃午餐，避開午餐尖峰時段\n\n<a name=\"衝刺計畫用品\"></a>\n### 衝刺計畫用品\n\n* 大量的白板\n* 3吋乘5吋的黃色便利貼\n* 黑色白板筆\n* 綠色和紅色白板筆\n* 黑色氈尖筆: 中等筆頭\n* 列印用紙\n* 膠帶\n* 小圓點貼紙\n* 大圓點貼紙\n* Time Timer計時器\n* 健康的零食\n","source":"_posts/SPRINT衝刺計畫-Part3.md","raw":"---\nlayout: post\ntitle: SPRINT衝刺計畫 - Part3\nauthor: Soar Lin\ncdn: header-off\nheader-img: ''\ndate: 2016-09-16 15:34:30\ntags:\n - SPRINT\n - 衝刺計畫\n - Prototype\ncategories:\n - Workflow\n---\n<!-- MarkdownTOC -->\n\n- [SPRINT衝刺計畫](#sprint衝刺計畫)\n    - [星期四 Thursday](#星期四-thursday)\n        - [原型心態](#原型心態)\n        - [原型](#原型)\n    - [星期五 Friday](#星期五-friday)\n        - [小數據](#小數據)\n        - [五幕式訪談](#五幕式訪談)\n        - [集體做訪談筆記](#集體做訪談筆記)\n    - [檢查表](#檢查表)\n        - [做好準備](#做好準備)\n        - [關鍵概念](#關鍵概念)\n        - [衝刺計畫用品](#衝刺計畫用品)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"sprint衝刺計畫\"></a>\n# SPRINT衝刺計畫\n\n<a name=\"星期四-thursday\"></a>\n## 星期四 Thursday\n你們在週三創造出一個分鏡腳本。週四你們將基於**「模擬」原則**，根據這個腳本做出一個逼真的方案**原型**。在接下來幾章，我們將說明可以幫助你們只用七個小時便做出原型的心態、策略和工具。\n\n[![Thursday](https://img.youtube.com/vi/MRDDLHDqc9o/0.jpg)](https://www.youtube.com/watch?v=MRDDLHDqc9o)\n\n花在某件東西上的時間越久，對它的依戀性往往卻強，而認真看待負面測試結果的可能性就越低。如果只花一天時間，你將能接受意見回饋。如果已經投入三個月，很可能已經決心撐到底。\n\n<a name=\"原型心態\"></a>\n### 原型心態\n\n1. 無論是什麼方案，都可以做原型\n2. 原型是可以捨棄的\n3. 做到剛好能滿足測試需求即可\n4. 原型看起來必須夠真實\n\n理想的原型品質是剛剛好，品質太差，顧客會不相信這個產品，如果追求太高，又太花時間。\n\n````\n範例: FITSTAR\n\n問題: 我們可以如何說明一種新的健身應用程式？\n形式: 模擬App Store與iPad應用程式\n工具: Keynote、真人演出、iPhone影片、iPad\n````\n````\n範例: SLACK\n\n問題: 要向非科技業的用戶說明Slack這個軟體，最好的方法是什麼？\n形式: 兩個相互競爭的網站，包括一些有互動功能的軟體\n工具: Keynote, InVision, 真實的Slack軟體, 真人演出\n````\n````\n範例: FOUNDATION MEDICINE\n\n問題: 腫瘤科醫師做治療決定時，需要哪些必要的資料?\n形式: 紙本醫學報告，只有第一頁的實質內容\n工具: Keynote, 逼真的檢驗數據, 印表機\n````\n````\n範例: SAVIOKE\n\n問題: 飯店房客對有個性的機器人會有什麼反應？\n形式: 真實的機器人加iPad觸控螢幕\n工具: Keynote, 音效樣本庫, iPad, 機器人, 遙控工具, 飯店客戶, 真人演出\n````\n````\n範例: ONE MEDICAL GROUP\n\n問題: 主要替專業人士看診的診所，可以轉型為適合有孩子的家庭嗎？\n形式: 一家診所，只做一晚的測試\n工具: 診所, 診所職員, 香蕉, 蠟筆\n````\n\n<a name=\"原型\"></a>\n### 原型\n每一個原型都是獨特的，因此沒有精確地逐步程序可以分享給大家。不過有四項作業總是可以幫助我們走對路：\n\n#### 選對工具\n* 如果原型在**螢幕**上(網站、應用程式、軟體等等)，請使用**Keynote、PowerPoint**，或做網站的工具**Squarespace**\n* 如果原型是**紙本**(報告、宣傳冊、傳單等等)，請使用**Keynote、PowerPoint**，或文字處理軟體如**Microsoft Word**\n* 如果原型是某種**服務**(顧客支援、客戶服務、醫療等等)，請寫**腳本**，然後安排衝刺計畫團隊成員當演員。\n* 如果是實體空間(商店、辦公樓大廳等等)，請找一個**既有空間**加以改裝\n* 如果是**某種物件**(實體產品、機器等等)，請找某個**既有物件**加以改裝、用**3D印表機印出原型**，或是用Keynote、PowerPoint，配合該物件照片或示意圖，**做出行銷材料的原型**\n\n#### 分工解決\n促進者應該幫忙衝刺團隊分配以下工作：\n\n* 製作者(Maker)，至少2名\n* 整合者(Stitcher)，1名\n* 寫作者(Writer)，1名\n    * 文字對原型的重要性，需具備相關背景知識\n* 資料搜集者(Asset Collector)，至少1名\n    * 四處搜集製作原型所需的素材\n* 採訪者(Interviewer)，1名\n    * 先寫好採訪腳本，最好不要參與原型製作，避免投入感情\n\n#### 整合\n整合者確保原型中的日期、時間、名字和其他內容並無矛盾。\n\n#### 試運轉\n最好能在下午三點左右做原型的試運轉，以便有足夠的時間來糾正錯誤和修補漏洞。讓所有人暫停工作聚在一起，請整合者排演整個原型，邊演邊解釋。\n試運轉主要觀眾，是週五要採訪顧客的採訪者。採訪者必須先熟悉原型和衝刺計畫問題，以便從訪問中得到最多有用的資料。\n\n<a name=\"星期五-friday\"></a>\n## 星期五 Friday\n衝刺計畫始於一項大挑戰和一個傑出的團隊─沒有很多其他東西。當衝刺計畫週來到週五時，你們已經研擬出有希望的方案，選出當中的最佳方案，並且做出了逼真的原型。光是這樣已經是收穫豐富的一週。但你們將在週五再進一步，**訪問顧客**，並觀察他們對原型的反應，**從中吸取教訓**。週五的測試確立整個衝刺計畫過程的價值：測試完成後，你們將知道自己還有多遠的路要走，以及下一步該做什麼。\n\n[![Thursday](https://img.youtube.com/vi/wz7Bo4-CnFg/0.jpg)](https://www.youtube.com/watch?v=wz7Bo4-CnFg)\n\n<a name=\"小數據\"></a>\n### 小數據\n\n找5個顧客來訪問，**5是神奇數字**，同一個研究裡，訪問五個人之後，做更多的訪問產生的貢獻很紹，投資報酬率像石頭一樣快速下降。\n\n![測試用戶人數與可用性問題](/images/SPRINT/testuser.jpg)\n\n<a name=\"五幕式訪談\"></a>\n### 五幕式訪談\n\n訪問分兩個房間進行，衝刺計畫團隊成員觀看直播，採訪人員在另一間小房間\n\n1. 友善地歡迎受訪顧客，開個好頭\n2. 藉由連串的開放式、一般背景問題瞭解客戶\n3. 介紹原型\n4. 一些具體操作，藉此瞭解顧客對原型的反應\n5. 快速的總結討論，藉此紀錄顧客整體想法和印象\n\n* 友善的歡迎\n\n讓採訪者感到輕鬆自在，並事先告知且得到顧客同意後進行(務必簽署公司律師堅持使用的法律文件許可和發明轉讓條款)。必須要讓受訪的顧客感到自在，誠實的回答問題。\n\n* 背景問題\n\n藉由開始發問一些跟顧客背景有關的問題，來漸漸引導到一些相關的問題上\n\n* 介紹原型\n\n採訪者應該提醒顧客，你們在測試的是原型，而不是顧客：\n\n「你提供的意見，無所謂對錯。因為**這原型不是我設計的**，你批評他不會讓我受傷，你稱讚他也不會讓我開心。事實上，坦率、真誠的回饋對我們最有幫助」\n\n時時提醒顧客隨時說出心中所想\n\n* 提示和操作\n\n適當的操作指示，顧客最好能自行摸索出如何使用原型。顧客做這些事情時，採訪者應適時提問，幫助他說出自己的想法：\n\n````\n那是什麼？有什麼用處？\n你對那東西有什麼想法？\n你估計那可以產生什麼作用？\n你看著這裡時，想到什麼？\n你在找什麼？\n你接下來將做什麼？為什麼？\n````\n\n* 快速的總結討論\n\n一些總結問題：\n\n````\n比起你在使用的東西，你覺得這產品如何？\n這產品有哪些方面是你喜歡的？哪些方面是你不喜歡的？\n你會怎麼向朋友描述這產品？\n如果你可以許三個願改善這產品，你的願望是什麼？\n````\n\n如果測試兩款或更多原型，再多問一些比較類的問題，訪問結束後，感謝顧客且送出禮券，然後送他離開。過成功應該多鼓勵顧客講話，同時保持中立。不需要做筆記，讓衝刺計畫室裡的成員來做筆記。\n\n<a name=\"集體做訪談筆記\"></a>\n### 集體做訪談筆記\n在衝刺計畫室裡的一塊大白板上畫一個表格，要有五欄(每個受訪者一欄)，以及數列(每個原型一列 or 原型每一部分一列又或者一條衝刺計畫問題一列)\n\n![訪談筆記](/images/SPRINT/interview_note.jpg)\n\n發便利貼與白板筆給每一個人，正面的用綠色，負面的用紅色，中性用黑色。或是在便利貼左上用加號表示正面筆記，減號表示負面筆記。記住，如果顧客使用原型上遇到問題，不是他的問題，是你們的問題。最後把整理好的便利貼，貼到表格相關位置。\n\n#### 尋找型態\n\n成員靠近白板與便利貼，從中找尋自己看到的型態，把它記下。個別尋找五分鐘後，每個人分享自己看到的型態。\n\n#### 回到未來\n\n回顧週一所訂下的衝刺計畫問題，並看看目前的原型是否能解決這個問題。\n\n#### 每次都是贏家\n\n衝刺計畫最好的一點，就是不可能毫無收穫。不論邀請顧客來測試的結果是好是壞，都對接下來要做的東西有幫助。\n\n\n<a name=\"檢查表\"></a>\n## 檢查表\n\n<a name=\"做好準備\"></a>\n### 做好準備\n\n* 選個大難題: 適用三種情況：事情攸關重大利益、時間緊迫，或者陷入了僵局\n* 找一位(或兩位)決策者: 如果決策者無法全程參與，請他派一名代表\n* 組織衝刺計畫團隊: 人數應該控制在七人以內，並確保團隊成員具備多元技能\n* 安排專家客串: 安排重要的專家在週一下午受訪\n* 選一位促進者: 負責管理時間、對話和整個衝刺計畫的過程，必須有信心引導會議，包括眾人的討論\n* 在日程表上空出五個整天\n* 預定一間房間，準備兩大塊白板\n\n<a name=\"關鍵概念\"></a>\n### 關鍵概念\n\n* 避免干擾: 不要使用筆電、手機、iPad等平板電腦\n* 計時器: 緊湊的時間安排，可以增強人們對衝刺計畫流程的信心、專注力和急迫感\n* 晚一點吃午餐: 上午11:30休息一下吃點零食，下午一點在吃午餐，避開午餐尖峰時段\n\n<a name=\"衝刺計畫用品\"></a>\n### 衝刺計畫用品\n\n* 大量的白板\n* 3吋乘5吋的黃色便利貼\n* 黑色白板筆\n* 綠色和紅色白板筆\n* 黑色氈尖筆: 中等筆頭\n* 列印用紙\n* 膠帶\n* 小圓點貼紙\n* 大圓點貼紙\n* Time Timer計時器\n* 健康的零食\n","slug":"SPRINT衝刺計畫-Part3","published":1,"updated":"2016-09-17T09:14:12.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gi1000iscscn0zx4lhp","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sprint衝刺計畫\">SPRINT衝刺計畫</a><ul>\n<li><a href=\"#星期四-thursday\">星期四 Thursday</a><ul>\n<li><a href=\"#原型心態\">原型心態</a></li>\n<li><a href=\"#原型\">原型</a></li>\n</ul>\n</li>\n<li><a href=\"#星期五-friday\">星期五 Friday</a><ul>\n<li><a href=\"#小數據\">小數據</a></li>\n<li><a href=\"#五幕式訪談\">五幕式訪談</a></li>\n<li><a href=\"#集體做訪談筆記\">集體做訪談筆記</a></li>\n</ul>\n</li>\n<li><a href=\"#檢查表\">檢查表</a><ul>\n<li><a href=\"#做好準備\">做好準備</a></li>\n<li><a href=\"#關鍵概念\">關鍵概念</a></li>\n<li><a href=\"#衝刺計畫用品\">衝刺計畫用品</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"sprint衝刺計畫\"></a></p>\n<h1 id=\"SPRINT衝刺計畫\"><a href=\"#SPRINT衝刺計畫\" class=\"headerlink\" title=\"SPRINT衝刺計畫\"></a>SPRINT衝刺計畫</h1><p><a name=\"星期四-thursday\"></a></p>\n<h2 id=\"星期四-Thursday\"><a href=\"#星期四-Thursday\" class=\"headerlink\" title=\"星期四 Thursday\"></a>星期四 Thursday</h2><p>你們在週三創造出一個分鏡腳本。週四你們將基於<strong>「模擬」原則</strong>，根據這個腳本做出一個逼真的方案<strong>原型</strong>。在接下來幾章，我們將說明可以幫助你們只用七個小時便做出原型的心態、策略和工具。</p>\n<p><a href=\"https://www.youtube.com/watch?v=MRDDLHDqc9o\" target=\"_blank\" rel=\"external\"><img src=\"https://img.youtube.com/vi/MRDDLHDqc9o/0.jpg\" alt=\"Thursday\"></a></p>\n<p>花在某件東西上的時間越久，對它的依戀性往往卻強，而認真看待負面測試結果的可能性就越低。如果只花一天時間，你將能接受意見回饋。如果已經投入三個月，很可能已經決心撐到底。</p>\n<p><a name=\"原型心態\"></a></p>\n<h3 id=\"原型心態\"><a href=\"#原型心態\" class=\"headerlink\" title=\"原型心態\"></a>原型心態</h3><ol>\n<li>無論是什麼方案，都可以做原型</li>\n<li>原型是可以捨棄的</li>\n<li>做到剛好能滿足測試需求即可</li>\n<li>原型看起來必須夠真實</li>\n</ol>\n<p>理想的原型品質是剛剛好，品質太差，顧客會不相信這個產品，如果追求太高，又太花時間。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: FITSTAR</div><div class=\"line\"></div><div class=\"line\">問題: 我們可以如何說明一種新的健身應用程式？</div><div class=\"line\">形式: 模擬App Store與iPad應用程式</div><div class=\"line\">工具: Keynote、真人演出、iPhone影片、iPad</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: SLACK</div><div class=\"line\"></div><div class=\"line\">問題: 要向非科技業的用戶說明Slack這個軟體，最好的方法是什麼？</div><div class=\"line\">形式: 兩個相互競爭的網站，包括一些有互動功能的軟體</div><div class=\"line\">工具: Keynote, InVision, 真實的Slack軟體, 真人演出</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: FOUNDATION MEDICINE</div><div class=\"line\"></div><div class=\"line\">問題: 腫瘤科醫師做治療決定時，需要哪些必要的資料?</div><div class=\"line\">形式: 紙本醫學報告，只有第一頁的實質內容</div><div class=\"line\">工具: Keynote, 逼真的檢驗數據, 印表機</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: SAVIOKE</div><div class=\"line\"></div><div class=\"line\">問題: 飯店房客對有個性的機器人會有什麼反應？</div><div class=\"line\">形式: 真實的機器人加iPad觸控螢幕</div><div class=\"line\">工具: Keynote, 音效樣本庫, iPad, 機器人, 遙控工具, 飯店客戶, 真人演出</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: ONE MEDICAL GROUP</div><div class=\"line\"></div><div class=\"line\">問題: 主要替專業人士看診的診所，可以轉型為適合有孩子的家庭嗎？</div><div class=\"line\">形式: 一家診所，只做一晚的測試</div><div class=\"line\">工具: 診所, 診所職員, 香蕉, 蠟筆</div></pre></td></tr></table></figure>\n<p><a name=\"原型\"></a></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>每一個原型都是獨特的，因此沒有精確地逐步程序可以分享給大家。不過有四項作業總是可以幫助我們走對路：</p>\n<h4 id=\"選對工具\"><a href=\"#選對工具\" class=\"headerlink\" title=\"選對工具\"></a>選對工具</h4><ul>\n<li>如果原型在<strong>螢幕</strong>上(網站、應用程式、軟體等等)，請使用<strong>Keynote、PowerPoint</strong>，或做網站的工具<strong>Squarespace</strong></li>\n<li>如果原型是<strong>紙本</strong>(報告、宣傳冊、傳單等等)，請使用<strong>Keynote、PowerPoint</strong>，或文字處理軟體如<strong>Microsoft Word</strong></li>\n<li>如果原型是某種<strong>服務</strong>(顧客支援、客戶服務、醫療等等)，請寫<strong>腳本</strong>，然後安排衝刺計畫團隊成員當演員。</li>\n<li>如果是實體空間(商店、辦公樓大廳等等)，請找一個<strong>既有空間</strong>加以改裝</li>\n<li>如果是<strong>某種物件</strong>(實體產品、機器等等)，請找某個<strong>既有物件</strong>加以改裝、用<strong>3D印表機印出原型</strong>，或是用Keynote、PowerPoint，配合該物件照片或示意圖，<strong>做出行銷材料的原型</strong></li>\n</ul>\n<h4 id=\"分工解決\"><a href=\"#分工解決\" class=\"headerlink\" title=\"分工解決\"></a>分工解決</h4><p>促進者應該幫忙衝刺團隊分配以下工作：</p>\n<ul>\n<li>製作者(Maker)，至少2名</li>\n<li>整合者(Stitcher)，1名</li>\n<li>寫作者(Writer)，1名<ul>\n<li>文字對原型的重要性，需具備相關背景知識</li>\n</ul>\n</li>\n<li>資料搜集者(Asset Collector)，至少1名<ul>\n<li>四處搜集製作原型所需的素材</li>\n</ul>\n</li>\n<li>採訪者(Interviewer)，1名<ul>\n<li>先寫好採訪腳本，最好不要參與原型製作，避免投入感情</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h4><p>整合者確保原型中的日期、時間、名字和其他內容並無矛盾。</p>\n<h4 id=\"試運轉\"><a href=\"#試運轉\" class=\"headerlink\" title=\"試運轉\"></a>試運轉</h4><p>最好能在下午三點左右做原型的試運轉，以便有足夠的時間來糾正錯誤和修補漏洞。讓所有人暫停工作聚在一起，請整合者排演整個原型，邊演邊解釋。<br>試運轉主要觀眾，是週五要採訪顧客的採訪者。採訪者必須先熟悉原型和衝刺計畫問題，以便從訪問中得到最多有用的資料。</p>\n<p><a name=\"星期五-friday\"></a></p>\n<h2 id=\"星期五-Friday\"><a href=\"#星期五-Friday\" class=\"headerlink\" title=\"星期五 Friday\"></a>星期五 Friday</h2><p>衝刺計畫始於一項大挑戰和一個傑出的團隊─沒有很多其他東西。當衝刺計畫週來到週五時，你們已經研擬出有希望的方案，選出當中的最佳方案，並且做出了逼真的原型。光是這樣已經是收穫豐富的一週。但你們將在週五再進一步，<strong>訪問顧客</strong>，並觀察他們對原型的反應，<strong>從中吸取教訓</strong>。週五的測試確立整個衝刺計畫過程的價值：測試完成後，你們將知道自己還有多遠的路要走，以及下一步該做什麼。</p>\n<p><a href=\"https://www.youtube.com/watch?v=wz7Bo4-CnFg\" target=\"_blank\" rel=\"external\"><img src=\"https://img.youtube.com/vi/wz7Bo4-CnFg/0.jpg\" alt=\"Thursday\"></a></p>\n<p><a name=\"小數據\"></a></p>\n<h3 id=\"小數據\"><a href=\"#小數據\" class=\"headerlink\" title=\"小數據\"></a>小數據</h3><p>找5個顧客來訪問，<strong>5是神奇數字</strong>，同一個研究裡，訪問五個人之後，做更多的訪問產生的貢獻很紹，投資報酬率像石頭一樣快速下降。</p>\n<p><img src=\"/images/SPRINT/testuser.jpg\" alt=\"測試用戶人數與可用性問題\"></p>\n<p><a name=\"五幕式訪談\"></a></p>\n<h3 id=\"五幕式訪談\"><a href=\"#五幕式訪談\" class=\"headerlink\" title=\"五幕式訪談\"></a>五幕式訪談</h3><p>訪問分兩個房間進行，衝刺計畫團隊成員觀看直播，採訪人員在另一間小房間</p>\n<ol>\n<li>友善地歡迎受訪顧客，開個好頭</li>\n<li>藉由連串的開放式、一般背景問題瞭解客戶</li>\n<li>介紹原型</li>\n<li>一些具體操作，藉此瞭解顧客對原型的反應</li>\n<li>快速的總結討論，藉此紀錄顧客整體想法和印象</li>\n</ol>\n<ul>\n<li>友善的歡迎</li>\n</ul>\n<p>讓採訪者感到輕鬆自在，並事先告知且得到顧客同意後進行(務必簽署公司律師堅持使用的法律文件許可和發明轉讓條款)。必須要讓受訪的顧客感到自在，誠實的回答問題。</p>\n<ul>\n<li>背景問題</li>\n</ul>\n<p>藉由開始發問一些跟顧客背景有關的問題，來漸漸引導到一些相關的問題上</p>\n<ul>\n<li>介紹原型</li>\n</ul>\n<p>採訪者應該提醒顧客，你們在測試的是原型，而不是顧客：</p>\n<p>「你提供的意見，無所謂對錯。因為<strong>這原型不是我設計的</strong>，你批評他不會讓我受傷，你稱讚他也不會讓我開心。事實上，坦率、真誠的回饋對我們最有幫助」</p>\n<p>時時提醒顧客隨時說出心中所想</p>\n<ul>\n<li>提示和操作</li>\n</ul>\n<p>適當的操作指示，顧客最好能自行摸索出如何使用原型。顧客做這些事情時，採訪者應適時提問，幫助他說出自己的想法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">那是什麼？有什麼用處？</div><div class=\"line\">你對那東西有什麼想法？</div><div class=\"line\">你估計那可以產生什麼作用？</div><div class=\"line\">你看著這裡時，想到什麼？</div><div class=\"line\">你在找什麼？</div><div class=\"line\">你接下來將做什麼？為什麼？</div></pre></td></tr></table></figure>\n<ul>\n<li>快速的總結討論</li>\n</ul>\n<p>一些總結問題：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">比起你在使用的東西，你覺得這產品如何？</div><div class=\"line\">這產品有哪些方面是你喜歡的？哪些方面是你不喜歡的？</div><div class=\"line\">你會怎麼向朋友描述這產品？</div><div class=\"line\">如果你可以許三個願改善這產品，你的願望是什麼？</div></pre></td></tr></table></figure>\n<p>如果測試兩款或更多原型，再多問一些比較類的問題，訪問結束後，感謝顧客且送出禮券，然後送他離開。過成功應該多鼓勵顧客講話，同時保持中立。不需要做筆記，讓衝刺計畫室裡的成員來做筆記。</p>\n<p><a name=\"集體做訪談筆記\"></a></p>\n<h3 id=\"集體做訪談筆記\"><a href=\"#集體做訪談筆記\" class=\"headerlink\" title=\"集體做訪談筆記\"></a>集體做訪談筆記</h3><p>在衝刺計畫室裡的一塊大白板上畫一個表格，要有五欄(每個受訪者一欄)，以及數列(每個原型一列 or 原型每一部分一列又或者一條衝刺計畫問題一列)</p>\n<p><img src=\"/images/SPRINT/interview_note.jpg\" alt=\"訪談筆記\"></p>\n<p>發便利貼與白板筆給每一個人，正面的用綠色，負面的用紅色，中性用黑色。或是在便利貼左上用加號表示正面筆記，減號表示負面筆記。記住，如果顧客使用原型上遇到問題，不是他的問題，是你們的問題。最後把整理好的便利貼，貼到表格相關位置。</p>\n<h4 id=\"尋找型態\"><a href=\"#尋找型態\" class=\"headerlink\" title=\"尋找型態\"></a>尋找型態</h4><p>成員靠近白板與便利貼，從中找尋自己看到的型態，把它記下。個別尋找五分鐘後，每個人分享自己看到的型態。</p>\n<h4 id=\"回到未來\"><a href=\"#回到未來\" class=\"headerlink\" title=\"回到未來\"></a>回到未來</h4><p>回顧週一所訂下的衝刺計畫問題，並看看目前的原型是否能解決這個問題。</p>\n<h4 id=\"每次都是贏家\"><a href=\"#每次都是贏家\" class=\"headerlink\" title=\"每次都是贏家\"></a>每次都是贏家</h4><p>衝刺計畫最好的一點，就是不可能毫無收穫。不論邀請顧客來測試的結果是好是壞，都對接下來要做的東西有幫助。</p>\n<p><a name=\"檢查表\"></a></p>\n<h2 id=\"檢查表\"><a href=\"#檢查表\" class=\"headerlink\" title=\"檢查表\"></a>檢查表</h2><p><a name=\"做好準備\"></a></p>\n<h3 id=\"做好準備\"><a href=\"#做好準備\" class=\"headerlink\" title=\"做好準備\"></a>做好準備</h3><ul>\n<li>選個大難題: 適用三種情況：事情攸關重大利益、時間緊迫，或者陷入了僵局</li>\n<li>找一位(或兩位)決策者: 如果決策者無法全程參與，請他派一名代表</li>\n<li>組織衝刺計畫團隊: 人數應該控制在七人以內，並確保團隊成員具備多元技能</li>\n<li>安排專家客串: 安排重要的專家在週一下午受訪</li>\n<li>選一位促進者: 負責管理時間、對話和整個衝刺計畫的過程，必須有信心引導會議，包括眾人的討論</li>\n<li>在日程表上空出五個整天</li>\n<li>預定一間房間，準備兩大塊白板</li>\n</ul>\n<p><a name=\"關鍵概念\"></a></p>\n<h3 id=\"關鍵概念\"><a href=\"#關鍵概念\" class=\"headerlink\" title=\"關鍵概念\"></a>關鍵概念</h3><ul>\n<li>避免干擾: 不要使用筆電、手機、iPad等平板電腦</li>\n<li>計時器: 緊湊的時間安排，可以增強人們對衝刺計畫流程的信心、專注力和急迫感</li>\n<li>晚一點吃午餐: 上午11:30休息一下吃點零食，下午一點在吃午餐，避開午餐尖峰時段</li>\n</ul>\n<p><a name=\"衝刺計畫用品\"></a></p>\n<h3 id=\"衝刺計畫用品\"><a href=\"#衝刺計畫用品\" class=\"headerlink\" title=\"衝刺計畫用品\"></a>衝刺計畫用品</h3><ul>\n<li>大量的白板</li>\n<li>3吋乘5吋的黃色便利貼</li>\n<li>黑色白板筆</li>\n<li>綠色和紅色白板筆</li>\n<li>黑色氈尖筆: 中等筆頭</li>\n<li>列印用紙</li>\n<li>膠帶</li>\n<li>小圓點貼紙</li>\n<li>大圓點貼紙</li>\n<li>Time Timer計時器</li>\n<li>健康的零食</li>\n</ul>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sprint衝刺計畫\">SPRINT衝刺計畫</a><ul>\n<li><a href=\"#星期四-thursday\">星期四 Thursday</a><ul>\n<li><a href=\"#原型心態\">原型心態</a></li>\n<li><a href=\"#原型\">原型</a></li>\n</ul>\n</li>\n<li><a href=\"#星期五-friday\">星期五 Friday</a><ul>\n<li><a href=\"#小數據\">小數據</a></li>\n<li><a href=\"#五幕式訪談\">五幕式訪談</a></li>\n<li><a href=\"#集體做訪談筆記\">集體做訪談筆記</a></li>\n</ul>\n</li>\n<li><a href=\"#檢查表\">檢查表</a><ul>\n<li><a href=\"#做好準備\">做好準備</a></li>\n<li><a href=\"#關鍵概念\">關鍵概念</a></li>\n<li><a href=\"#衝刺計畫用品\">衝刺計畫用品</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"sprint衝刺計畫\"></a></p>\n<h1 id=\"SPRINT衝刺計畫\"><a href=\"#SPRINT衝刺計畫\" class=\"headerlink\" title=\"SPRINT衝刺計畫\"></a>SPRINT衝刺計畫</h1><p><a name=\"星期四-thursday\"></a></p>\n<h2 id=\"星期四-Thursday\"><a href=\"#星期四-Thursday\" class=\"headerlink\" title=\"星期四 Thursday\"></a>星期四 Thursday</h2><p>你們在週三創造出一個分鏡腳本。週四你們將基於<strong>「模擬」原則</strong>，根據這個腳本做出一個逼真的方案<strong>原型</strong>。在接下來幾章，我們將說明可以幫助你們只用七個小時便做出原型的心態、策略和工具。</p>\n<p><a href=\"https://www.youtube.com/watch?v=MRDDLHDqc9o\"><img src=\"https://img.youtube.com/vi/MRDDLHDqc9o/0.jpg\" alt=\"Thursday\"></a></p>\n<p>花在某件東西上的時間越久，對它的依戀性往往卻強，而認真看待負面測試結果的可能性就越低。如果只花一天時間，你將能接受意見回饋。如果已經投入三個月，很可能已經決心撐到底。</p>\n<p><a name=\"原型心態\"></a></p>\n<h3 id=\"原型心態\"><a href=\"#原型心態\" class=\"headerlink\" title=\"原型心態\"></a>原型心態</h3><ol>\n<li>無論是什麼方案，都可以做原型</li>\n<li>原型是可以捨棄的</li>\n<li>做到剛好能滿足測試需求即可</li>\n<li>原型看起來必須夠真實</li>\n</ol>\n<p>理想的原型品質是剛剛好，品質太差，顧客會不相信這個產品，如果追求太高，又太花時間。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: FITSTAR</div><div class=\"line\"></div><div class=\"line\">問題: 我們可以如何說明一種新的健身應用程式？</div><div class=\"line\">形式: 模擬App Store與iPad應用程式</div><div class=\"line\">工具: Keynote、真人演出、iPhone影片、iPad</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: SLACK</div><div class=\"line\"></div><div class=\"line\">問題: 要向非科技業的用戶說明Slack這個軟體，最好的方法是什麼？</div><div class=\"line\">形式: 兩個相互競爭的網站，包括一些有互動功能的軟體</div><div class=\"line\">工具: Keynote, InVision, 真實的Slack軟體, 真人演出</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: FOUNDATION MEDICINE</div><div class=\"line\"></div><div class=\"line\">問題: 腫瘤科醫師做治療決定時，需要哪些必要的資料?</div><div class=\"line\">形式: 紙本醫學報告，只有第一頁的實質內容</div><div class=\"line\">工具: Keynote, 逼真的檢驗數據, 印表機</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: SAVIOKE</div><div class=\"line\"></div><div class=\"line\">問題: 飯店房客對有個性的機器人會有什麼反應？</div><div class=\"line\">形式: 真實的機器人加iPad觸控螢幕</div><div class=\"line\">工具: Keynote, 音效樣本庫, iPad, 機器人, 遙控工具, 飯店客戶, 真人演出</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">範例: ONE MEDICAL GROUP</div><div class=\"line\"></div><div class=\"line\">問題: 主要替專業人士看診的診所，可以轉型為適合有孩子的家庭嗎？</div><div class=\"line\">形式: 一家診所，只做一晚的測試</div><div class=\"line\">工具: 診所, 診所職員, 香蕉, 蠟筆</div></pre></td></tr></table></figure>\n<p><a name=\"原型\"></a></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>每一個原型都是獨特的，因此沒有精確地逐步程序可以分享給大家。不過有四項作業總是可以幫助我們走對路：</p>\n<h4 id=\"選對工具\"><a href=\"#選對工具\" class=\"headerlink\" title=\"選對工具\"></a>選對工具</h4><ul>\n<li>如果原型在<strong>螢幕</strong>上(網站、應用程式、軟體等等)，請使用<strong>Keynote、PowerPoint</strong>，或做網站的工具<strong>Squarespace</strong></li>\n<li>如果原型是<strong>紙本</strong>(報告、宣傳冊、傳單等等)，請使用<strong>Keynote、PowerPoint</strong>，或文字處理軟體如<strong>Microsoft Word</strong></li>\n<li>如果原型是某種<strong>服務</strong>(顧客支援、客戶服務、醫療等等)，請寫<strong>腳本</strong>，然後安排衝刺計畫團隊成員當演員。</li>\n<li>如果是實體空間(商店、辦公樓大廳等等)，請找一個<strong>既有空間</strong>加以改裝</li>\n<li>如果是<strong>某種物件</strong>(實體產品、機器等等)，請找某個<strong>既有物件</strong>加以改裝、用<strong>3D印表機印出原型</strong>，或是用Keynote、PowerPoint，配合該物件照片或示意圖，<strong>做出行銷材料的原型</strong></li>\n</ul>\n<h4 id=\"分工解決\"><a href=\"#分工解決\" class=\"headerlink\" title=\"分工解決\"></a>分工解決</h4><p>促進者應該幫忙衝刺團隊分配以下工作：</p>\n<ul>\n<li>製作者(Maker)，至少2名</li>\n<li>整合者(Stitcher)，1名</li>\n<li>寫作者(Writer)，1名<ul>\n<li>文字對原型的重要性，需具備相關背景知識</li>\n</ul>\n</li>\n<li>資料搜集者(Asset Collector)，至少1名<ul>\n<li>四處搜集製作原型所需的素材</li>\n</ul>\n</li>\n<li>採訪者(Interviewer)，1名<ul>\n<li>先寫好採訪腳本，最好不要參與原型製作，避免投入感情</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h4><p>整合者確保原型中的日期、時間、名字和其他內容並無矛盾。</p>\n<h4 id=\"試運轉\"><a href=\"#試運轉\" class=\"headerlink\" title=\"試運轉\"></a>試運轉</h4><p>最好能在下午三點左右做原型的試運轉，以便有足夠的時間來糾正錯誤和修補漏洞。讓所有人暫停工作聚在一起，請整合者排演整個原型，邊演邊解釋。<br>試運轉主要觀眾，是週五要採訪顧客的採訪者。採訪者必須先熟悉原型和衝刺計畫問題，以便從訪問中得到最多有用的資料。</p>\n<p><a name=\"星期五-friday\"></a></p>\n<h2 id=\"星期五-Friday\"><a href=\"#星期五-Friday\" class=\"headerlink\" title=\"星期五 Friday\"></a>星期五 Friday</h2><p>衝刺計畫始於一項大挑戰和一個傑出的團隊─沒有很多其他東西。當衝刺計畫週來到週五時，你們已經研擬出有希望的方案，選出當中的最佳方案，並且做出了逼真的原型。光是這樣已經是收穫豐富的一週。但你們將在週五再進一步，<strong>訪問顧客</strong>，並觀察他們對原型的反應，<strong>從中吸取教訓</strong>。週五的測試確立整個衝刺計畫過程的價值：測試完成後，你們將知道自己還有多遠的路要走，以及下一步該做什麼。</p>\n<p><a href=\"https://www.youtube.com/watch?v=wz7Bo4-CnFg\"><img src=\"https://img.youtube.com/vi/wz7Bo4-CnFg/0.jpg\" alt=\"Thursday\"></a></p>\n<p><a name=\"小數據\"></a></p>\n<h3 id=\"小數據\"><a href=\"#小數據\" class=\"headerlink\" title=\"小數據\"></a>小數據</h3><p>找5個顧客來訪問，<strong>5是神奇數字</strong>，同一個研究裡，訪問五個人之後，做更多的訪問產生的貢獻很紹，投資報酬率像石頭一樣快速下降。</p>\n<p><img src=\"/images/SPRINT/testuser.jpg\" alt=\"測試用戶人數與可用性問題\"></p>\n<p><a name=\"五幕式訪談\"></a></p>\n<h3 id=\"五幕式訪談\"><a href=\"#五幕式訪談\" class=\"headerlink\" title=\"五幕式訪談\"></a>五幕式訪談</h3><p>訪問分兩個房間進行，衝刺計畫團隊成員觀看直播，採訪人員在另一間小房間</p>\n<ol>\n<li>友善地歡迎受訪顧客，開個好頭</li>\n<li>藉由連串的開放式、一般背景問題瞭解客戶</li>\n<li>介紹原型</li>\n<li>一些具體操作，藉此瞭解顧客對原型的反應</li>\n<li>快速的總結討論，藉此紀錄顧客整體想法和印象</li>\n</ol>\n<ul>\n<li>友善的歡迎</li>\n</ul>\n<p>讓採訪者感到輕鬆自在，並事先告知且得到顧客同意後進行(務必簽署公司律師堅持使用的法律文件許可和發明轉讓條款)。必須要讓受訪的顧客感到自在，誠實的回答問題。</p>\n<ul>\n<li>背景問題</li>\n</ul>\n<p>藉由開始發問一些跟顧客背景有關的問題，來漸漸引導到一些相關的問題上</p>\n<ul>\n<li>介紹原型</li>\n</ul>\n<p>採訪者應該提醒顧客，你們在測試的是原型，而不是顧客：</p>\n<p>「你提供的意見，無所謂對錯。因為<strong>這原型不是我設計的</strong>，你批評他不會讓我受傷，你稱讚他也不會讓我開心。事實上，坦率、真誠的回饋對我們最有幫助」</p>\n<p>時時提醒顧客隨時說出心中所想</p>\n<ul>\n<li>提示和操作</li>\n</ul>\n<p>適當的操作指示，顧客最好能自行摸索出如何使用原型。顧客做這些事情時，採訪者應適時提問，幫助他說出自己的想法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">那是什麼？有什麼用處？</div><div class=\"line\">你對那東西有什麼想法？</div><div class=\"line\">你估計那可以產生什麼作用？</div><div class=\"line\">你看著這裡時，想到什麼？</div><div class=\"line\">你在找什麼？</div><div class=\"line\">你接下來將做什麼？為什麼？</div></pre></td></tr></table></figure>\n<ul>\n<li>快速的總結討論</li>\n</ul>\n<p>一些總結問題：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">比起你在使用的東西，你覺得這產品如何？</div><div class=\"line\">這產品有哪些方面是你喜歡的？哪些方面是你不喜歡的？</div><div class=\"line\">你會怎麼向朋友描述這產品？</div><div class=\"line\">如果你可以許三個願改善這產品，你的願望是什麼？</div></pre></td></tr></table></figure>\n<p>如果測試兩款或更多原型，再多問一些比較類的問題，訪問結束後，感謝顧客且送出禮券，然後送他離開。過成功應該多鼓勵顧客講話，同時保持中立。不需要做筆記，讓衝刺計畫室裡的成員來做筆記。</p>\n<p><a name=\"集體做訪談筆記\"></a></p>\n<h3 id=\"集體做訪談筆記\"><a href=\"#集體做訪談筆記\" class=\"headerlink\" title=\"集體做訪談筆記\"></a>集體做訪談筆記</h3><p>在衝刺計畫室裡的一塊大白板上畫一個表格，要有五欄(每個受訪者一欄)，以及數列(每個原型一列 or 原型每一部分一列又或者一條衝刺計畫問題一列)</p>\n<p><img src=\"/images/SPRINT/interview_note.jpg\" alt=\"訪談筆記\"></p>\n<p>發便利貼與白板筆給每一個人，正面的用綠色，負面的用紅色，中性用黑色。或是在便利貼左上用加號表示正面筆記，減號表示負面筆記。記住，如果顧客使用原型上遇到問題，不是他的問題，是你們的問題。最後把整理好的便利貼，貼到表格相關位置。</p>\n<h4 id=\"尋找型態\"><a href=\"#尋找型態\" class=\"headerlink\" title=\"尋找型態\"></a>尋找型態</h4><p>成員靠近白板與便利貼，從中找尋自己看到的型態，把它記下。個別尋找五分鐘後，每個人分享自己看到的型態。</p>\n<h4 id=\"回到未來\"><a href=\"#回到未來\" class=\"headerlink\" title=\"回到未來\"></a>回到未來</h4><p>回顧週一所訂下的衝刺計畫問題，並看看目前的原型是否能解決這個問題。</p>\n<h4 id=\"每次都是贏家\"><a href=\"#每次都是贏家\" class=\"headerlink\" title=\"每次都是贏家\"></a>每次都是贏家</h4><p>衝刺計畫最好的一點，就是不可能毫無收穫。不論邀請顧客來測試的結果是好是壞，都對接下來要做的東西有幫助。</p>\n<p><a name=\"檢查表\"></a></p>\n<h2 id=\"檢查表\"><a href=\"#檢查表\" class=\"headerlink\" title=\"檢查表\"></a>檢查表</h2><p><a name=\"做好準備\"></a></p>\n<h3 id=\"做好準備\"><a href=\"#做好準備\" class=\"headerlink\" title=\"做好準備\"></a>做好準備</h3><ul>\n<li>選個大難題: 適用三種情況：事情攸關重大利益、時間緊迫，或者陷入了僵局</li>\n<li>找一位(或兩位)決策者: 如果決策者無法全程參與，請他派一名代表</li>\n<li>組織衝刺計畫團隊: 人數應該控制在七人以內，並確保團隊成員具備多元技能</li>\n<li>安排專家客串: 安排重要的專家在週一下午受訪</li>\n<li>選一位促進者: 負責管理時間、對話和整個衝刺計畫的過程，必須有信心引導會議，包括眾人的討論</li>\n<li>在日程表上空出五個整天</li>\n<li>預定一間房間，準備兩大塊白板</li>\n</ul>\n<p><a name=\"關鍵概念\"></a></p>\n<h3 id=\"關鍵概念\"><a href=\"#關鍵概念\" class=\"headerlink\" title=\"關鍵概念\"></a>關鍵概念</h3><ul>\n<li>避免干擾: 不要使用筆電、手機、iPad等平板電腦</li>\n<li>計時器: 緊湊的時間安排，可以增強人們對衝刺計畫流程的信心、專注力和急迫感</li>\n<li>晚一點吃午餐: 上午11:30休息一下吃點零食，下午一點在吃午餐，避開午餐尖峰時段</li>\n</ul>\n<p><a name=\"衝刺計畫用品\"></a></p>\n<h3 id=\"衝刺計畫用品\"><a href=\"#衝刺計畫用品\" class=\"headerlink\" title=\"衝刺計畫用品\"></a>衝刺計畫用品</h3><ul>\n<li>大量的白板</li>\n<li>3吋乘5吋的黃色便利貼</li>\n<li>黑色白板筆</li>\n<li>綠色和紅色白板筆</li>\n<li>黑色氈尖筆: 中等筆頭</li>\n<li>列印用紙</li>\n<li>膠帶</li>\n<li>小圓點貼紙</li>\n<li>大圓點貼紙</li>\n<li>Time Timer計時器</li>\n<li>健康的零食</li>\n</ul>\n"},{"layout":"post","title":"Sass筆記","author":"Soar Lin","date":"2016-08-28T10:24:40.000Z","_content":"<!-- MarkdownTOC -->\n\n- [Sass](#sass)\n  - [變數](#變數)\n  - [計算](#計算)\n  - [顏色處理](#顏色處理)\n  - [mixins 混入](#mixins-混入)\n  - [RWD 寫法參考](#rwd-寫法參考)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"sass\"></a>\n# Sass\n<a name=\"變數\"></a>\n## 變數\n* 開頭錢($)字號, e.g. `$mainColor`, `$spaceUnit`\n* 使用時，直接使用定義好的變數\n\n````scss\n$warm_grey: #8b8a8a;\n\nh3.title {\n    color: $warm_grey;\n}\n````\n\n<a name=\"計算\"></a>\n## 計算\n* 支援`+`,`-`,`*`,`/`與`%`\n\n````scss\n.container { width: 100%; }\n\narticle[role=\"main\"] {\n    float: left;\n    width: 600px / 960px * 100%;\n}\n\naside[role=\"complementary\"] {\n    float: right;\n    width: 300px / 960px * 100%;\n}\n````\n\n* 迴圈處理 `@for $i from 1 through 5 { ... } `\n\n````scss\n@for $i from 1 through 5 {\n  .mt-#{$i}0 { margin-top: 10px * $i; }\n  .mb-#{$i}0 { margin-bottom: 10px * $i; }\n}\n````\n\n<a name=\"顏色處理\"></a>\n## 顏色處理\n* 調整亮度，HSL 模式中的 L\n  * 調高亮度 `lighten($base-color, 10%)`\n  * 降低亮度 `darken($base-color, 10%)`\n* 飽和度，HSL 模式中的 S\n  * 調高飽和度 `saturate( $base-color, 20% )`\n  * 降低飽和度 `desaturate( $base-color, 20% )`\n* 色調值，HSL 模式中的 H\n  * 調整 `adjust-hue( $base-color, 20% )`\n* 透明度\n  * `rgba( $base-color, .7 )`\n* 色調與陰影 Tint & Shade, 增加白色色調或黑色色調\n  * 增加白色(Tint) `tint( $base-color, 10% )`\n  * 增加黑色(Shade) `shade( $base-color, 10% )`\n\n<a name=\"mixins-混入\"></a>\n## mixins 混入\n* 定義時，用 `@mixin mixin_name(param)`, `param`為可選\n* 引用時，使用 `@include mixin_name`\n\n````scss\n@mixin shadow($color) {\n    box-shadow: 1px 1px 0 1px darken($color, 15%);\n}\n\n.button {\n    @include shadow(#23abc1);\n}\n````\n\n<a name=\"rwd-寫法參考\"></a>\n## RWD 寫法參考\n1. 使用變數定義不同尺寸\n2. 利用 `@mixin Name` 與 `@content` 兩個特性來達成\n3. 使用 `@include Name` 來引用\n\n````scss\n$padWidth: 992px;\n$phoneWidth: 415px;\n\n@mixin tablet {\n    @media screen and (max-width: $padWidth) {\n        @content;\n    }\n}\n@mixin phone {\n    @media screen and (max-width: $phoneWidth) {\n        @content;\n    }\n}\n\n.back-top {\n    position: fixed;\n    right: 30px;\n    bottom: 30px;\n\n    @include tablet {\n        right: 20px;\n        bottom: 20px;\n    }\n    @include phone {\n        right: 10px;\n        bottom: 10px;\n    }\n}\n````","source":"_posts/Sass筆記.md","raw":"---\nlayout: post\ntitle: Sass筆記\nauthor: Soar Lin\ndate: 2016-08-28 18:24:40\ntags:\n  - mixins\n  - RWD\n  - color\n  - sass\n  - css-preprocessor\ncategories:\n - Frontend\n---\n<!-- MarkdownTOC -->\n\n- [Sass](#sass)\n  - [變數](#變數)\n  - [計算](#計算)\n  - [顏色處理](#顏色處理)\n  - [mixins 混入](#mixins-混入)\n  - [RWD 寫法參考](#rwd-寫法參考)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"sass\"></a>\n# Sass\n<a name=\"變數\"></a>\n## 變數\n* 開頭錢($)字號, e.g. `$mainColor`, `$spaceUnit`\n* 使用時，直接使用定義好的變數\n\n````scss\n$warm_grey: #8b8a8a;\n\nh3.title {\n    color: $warm_grey;\n}\n````\n\n<a name=\"計算\"></a>\n## 計算\n* 支援`+`,`-`,`*`,`/`與`%`\n\n````scss\n.container { width: 100%; }\n\narticle[role=\"main\"] {\n    float: left;\n    width: 600px / 960px * 100%;\n}\n\naside[role=\"complementary\"] {\n    float: right;\n    width: 300px / 960px * 100%;\n}\n````\n\n* 迴圈處理 `@for $i from 1 through 5 { ... } `\n\n````scss\n@for $i from 1 through 5 {\n  .mt-#{$i}0 { margin-top: 10px * $i; }\n  .mb-#{$i}0 { margin-bottom: 10px * $i; }\n}\n````\n\n<a name=\"顏色處理\"></a>\n## 顏色處理\n* 調整亮度，HSL 模式中的 L\n  * 調高亮度 `lighten($base-color, 10%)`\n  * 降低亮度 `darken($base-color, 10%)`\n* 飽和度，HSL 模式中的 S\n  * 調高飽和度 `saturate( $base-color, 20% )`\n  * 降低飽和度 `desaturate( $base-color, 20% )`\n* 色調值，HSL 模式中的 H\n  * 調整 `adjust-hue( $base-color, 20% )`\n* 透明度\n  * `rgba( $base-color, .7 )`\n* 色調與陰影 Tint & Shade, 增加白色色調或黑色色調\n  * 增加白色(Tint) `tint( $base-color, 10% )`\n  * 增加黑色(Shade) `shade( $base-color, 10% )`\n\n<a name=\"mixins-混入\"></a>\n## mixins 混入\n* 定義時，用 `@mixin mixin_name(param)`, `param`為可選\n* 引用時，使用 `@include mixin_name`\n\n````scss\n@mixin shadow($color) {\n    box-shadow: 1px 1px 0 1px darken($color, 15%);\n}\n\n.button {\n    @include shadow(#23abc1);\n}\n````\n\n<a name=\"rwd-寫法參考\"></a>\n## RWD 寫法參考\n1. 使用變數定義不同尺寸\n2. 利用 `@mixin Name` 與 `@content` 兩個特性來達成\n3. 使用 `@include Name` 來引用\n\n````scss\n$padWidth: 992px;\n$phoneWidth: 415px;\n\n@mixin tablet {\n    @media screen and (max-width: $padWidth) {\n        @content;\n    }\n}\n@mixin phone {\n    @media screen and (max-width: $phoneWidth) {\n        @content;\n    }\n}\n\n.back-top {\n    position: fixed;\n    right: 30px;\n    bottom: 30px;\n\n    @include tablet {\n        right: 20px;\n        bottom: 20px;\n    }\n    @include phone {\n        right: 10px;\n        bottom: 10px;\n    }\n}\n````","slug":"Sass筆記","published":1,"updated":"2016-08-28T16:18:19.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gi4000jscsccgxjfxqk","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sass\">Sass</a><ul>\n<li><a href=\"#變數\">變數</a></li>\n<li><a href=\"#計算\">計算</a></li>\n<li><a href=\"#顏色處理\">顏色處理</a></li>\n<li><a href=\"#mixins-混入\">mixins 混入</a></li>\n<li><a href=\"#rwd-寫法參考\">RWD 寫法參考</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"sass\"></a></p>\n<h1 id=\"Sass\"><a href=\"#Sass\" class=\"headerlink\" title=\"Sass\"></a>Sass</h1><p><a name=\"變數\"></a></p>\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><ul>\n<li>開頭錢($)字號, e.g. <code>$mainColor</code>, <code>$spaceUnit</code></li>\n<li>使用時，直接使用定義好的變數</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$warm_grey</span>: <span class=\"number\">#8b8a8a</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">h3</span><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$warm_grey</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"計算\"></a></p>\n<h2 id=\"計算\"><a href=\"#計算\" class=\"headerlink\" title=\"計算\"></a>計算</h2><ul>\n<li>支援<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>與<code>%</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[role=\"main\"]</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span> / <span class=\"number\">960px</span> * <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">aside</span><span class=\"selector-attr\">[role=\"complementary\"]</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: right;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span> / <span class=\"number\">960px</span> * <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>迴圈處理 <code>@for $i from 1 through 5 { ... }</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through 5 &#123;</div><div class=\"line\">  <span class=\"selector-class\">.mt-</span>#&#123;<span class=\"variable\">$i</span>&#125;0 &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span> * <span class=\"variable\">$i</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.mb-</span>#&#123;<span class=\"variable\">$i</span>&#125;0 &#123; <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span> * <span class=\"variable\">$i</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"顏色處理\"></a></p>\n<h2 id=\"顏色處理\"><a href=\"#顏色處理\" class=\"headerlink\" title=\"顏色處理\"></a>顏色處理</h2><ul>\n<li>調整亮度，HSL 模式中的 L<ul>\n<li>調高亮度 <code>lighten($base-color, 10%)</code></li>\n<li>降低亮度 <code>darken($base-color, 10%)</code></li>\n</ul>\n</li>\n<li>飽和度，HSL 模式中的 S<ul>\n<li>調高飽和度 <code>saturate( $base-color, 20% )</code></li>\n<li>降低飽和度 <code>desaturate( $base-color, 20% )</code></li>\n</ul>\n</li>\n<li>色調值，HSL 模式中的 H<ul>\n<li>調整 <code>adjust-hue( $base-color, 20% )</code></li>\n</ul>\n</li>\n<li>透明度<ul>\n<li><code>rgba( $base-color, .7 )</code></li>\n</ul>\n</li>\n<li>色調與陰影 Tint &amp; Shade, 增加白色色調或黑色色調<ul>\n<li>增加白色(Tint) <code>tint( $base-color, 10% )</code></li>\n<li>增加黑色(Shade) <code>shade( $base-color, 10% )</code></li>\n</ul>\n</li>\n</ul>\n<p><a name=\"mixins-混入\"></a></p>\n<h2 id=\"mixins-混入\"><a href=\"#mixins-混入\" class=\"headerlink\" title=\"mixins 混入\"></a>mixins 混入</h2><ul>\n<li>定義時，用 <code>@mixin mixin_name(param)</code>, <code>param</code>為可選</li>\n<li>引用時，使用 <code>@include mixin_name</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> shadow(<span class=\"variable\">$color</span>) &#123;</div><div class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(<span class=\"variable\">$color</span>, <span class=\"number\">15%</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.button</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">include</span> shadow(<span class=\"number\">#23abc1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"rwd-寫法參考\"></a></p>\n<h2 id=\"RWD-寫法參考\"><a href=\"#RWD-寫法參考\" class=\"headerlink\" title=\"RWD 寫法參考\"></a>RWD 寫法參考</h2><ol>\n<li>使用變數定義不同尺寸</li>\n<li>利用 <code>@mixin Name</code> 與 <code>@content</code> 兩個特性來達成</li>\n<li>使用 <code>@include Name</code> 來引用</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$padWidth</span>: <span class=\"number\">992px</span>;</div><div class=\"line\"><span class=\"variable\">$phoneWidth</span>: <span class=\"number\">415px</span>;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">mixin</span> tablet &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> screen and (max-width: <span class=\"variable\">$padWidth</span>) &#123;</div><div class=\"line\">        @<span class=\"keyword\">content</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">mixin</span> phone &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> screen and (max-width: <span class=\"variable\">$phoneWidth</span>) &#123;</div><div class=\"line\">        @<span class=\"keyword\">content</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.back-top</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: fixed;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">30px</span>;</div><div class=\"line\"></div><div class=\"line\">    @<span class=\"keyword\">include</span> tablet &#123;</div><div class=\"line\">        <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @<span class=\"keyword\">include</span> phone &#123;</div><div class=\"line\">        <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sass\">Sass</a><ul>\n<li><a href=\"#變數\">變數</a></li>\n<li><a href=\"#計算\">計算</a></li>\n<li><a href=\"#顏色處理\">顏色處理</a></li>\n<li><a href=\"#mixins-混入\">mixins 混入</a></li>\n<li><a href=\"#rwd-寫法參考\">RWD 寫法參考</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"sass\"></a></p>\n<h1 id=\"Sass\"><a href=\"#Sass\" class=\"headerlink\" title=\"Sass\"></a>Sass</h1><p><a name=\"變數\"></a></p>\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><ul>\n<li>開頭錢($)字號, e.g. <code>$mainColor</code>, <code>$spaceUnit</code></li>\n<li>使用時，直接使用定義好的變數</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$warm_grey</span>: <span class=\"number\">#8b8a8a</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">h3</span><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$warm_grey</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"計算\"></a></p>\n<h2 id=\"計算\"><a href=\"#計算\" class=\"headerlink\" title=\"計算\"></a>計算</h2><ul>\n<li>支援<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>與<code>%</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[role=\"main\"]</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span> / <span class=\"number\">960px</span> * <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">aside</span><span class=\"selector-attr\">[role=\"complementary\"]</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: right;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span> / <span class=\"number\">960px</span> * <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>迴圈處理 <code>@for $i from 1 through 5 { ... }</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through 5 &#123;</div><div class=\"line\">  <span class=\"selector-class\">.mt-</span>#&#123;<span class=\"variable\">$i</span>&#125;0 &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span> * <span class=\"variable\">$i</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.mb-</span>#&#123;<span class=\"variable\">$i</span>&#125;0 &#123; <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span> * <span class=\"variable\">$i</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"顏色處理\"></a></p>\n<h2 id=\"顏色處理\"><a href=\"#顏色處理\" class=\"headerlink\" title=\"顏色處理\"></a>顏色處理</h2><ul>\n<li>調整亮度，HSL 模式中的 L<ul>\n<li>調高亮度 <code>lighten($base-color, 10%)</code></li>\n<li>降低亮度 <code>darken($base-color, 10%)</code></li>\n</ul>\n</li>\n<li>飽和度，HSL 模式中的 S<ul>\n<li>調高飽和度 <code>saturate( $base-color, 20% )</code></li>\n<li>降低飽和度 <code>desaturate( $base-color, 20% )</code></li>\n</ul>\n</li>\n<li>色調值，HSL 模式中的 H<ul>\n<li>調整 <code>adjust-hue( $base-color, 20% )</code></li>\n</ul>\n</li>\n<li>透明度<ul>\n<li><code>rgba( $base-color, .7 )</code></li>\n</ul>\n</li>\n<li>色調與陰影 Tint &amp; Shade, 增加白色色調或黑色色調<ul>\n<li>增加白色(Tint) <code>tint( $base-color, 10% )</code></li>\n<li>增加黑色(Shade) <code>shade( $base-color, 10% )</code></li>\n</ul>\n</li>\n</ul>\n<p><a name=\"mixins-混入\"></a></p>\n<h2 id=\"mixins-混入\"><a href=\"#mixins-混入\" class=\"headerlink\" title=\"mixins 混入\"></a>mixins 混入</h2><ul>\n<li>定義時，用 <code>@mixin mixin_name(param)</code>, <code>param</code>為可選</li>\n<li>引用時，使用 <code>@include mixin_name</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> shadow(<span class=\"variable\">$color</span>) &#123;</div><div class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(<span class=\"variable\">$color</span>, <span class=\"number\">15%</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.button</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">include</span> shadow(<span class=\"number\">#23abc1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"rwd-寫法參考\"></a></p>\n<h2 id=\"RWD-寫法參考\"><a href=\"#RWD-寫法參考\" class=\"headerlink\" title=\"RWD 寫法參考\"></a>RWD 寫法參考</h2><ol>\n<li>使用變數定義不同尺寸</li>\n<li>利用 <code>@mixin Name</code> 與 <code>@content</code> 兩個特性來達成</li>\n<li>使用 <code>@include Name</code> 來引用</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$padWidth</span>: <span class=\"number\">992px</span>;</div><div class=\"line\"><span class=\"variable\">$phoneWidth</span>: <span class=\"number\">415px</span>;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">mixin</span> tablet &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> screen and (max-width: <span class=\"variable\">$padWidth</span>) &#123;</div><div class=\"line\">        @<span class=\"keyword\">content</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">mixin</span> phone &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> screen and (max-width: <span class=\"variable\">$phoneWidth</span>) &#123;</div><div class=\"line\">        @<span class=\"keyword\">content</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.back-top</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: fixed;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">30px</span>;</div><div class=\"line\"></div><div class=\"line\">    @<span class=\"keyword\">include</span> tablet &#123;</div><div class=\"line\">        <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @<span class=\"keyword\">include</span> phone &#123;</div><div class=\"line\">        <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"Transcoding AWS S3 media files using AWS Lambda","author":"Soar Lin","cdn":"header-off","header-img":"","date":"2016-09-11T06:37:23.000Z","_content":"<!-- MarkdownTOC -->\n\n- [需要工具](#需要工具)\n- [參考文獻](#參考文獻)\n- [操作步驟](#操作步驟)\n    - [Step 1. Create Lambda function](#step-1-create-lambda-function)\n    - [Step 2. Use example code](#step-2-use-example-code)\n    - [Step 3. Setting event trigger](#step-3-setting-event-trigger)\n    - [Step 4. Naming and setting role authority](#step-4-naming-and-setting-role-authority)\n    - [Step 5. Check setting](#step-5-check-setting)\n- [Lambda 使用方法](#lambda-使用方法)\n\n<!-- /MarkdownTOC -->\n\n最近因為工作上的需求，需要把影片檔案轉換成串流的格式，還好有想到去年似乎有參加一場 AWS 開發者大會聽到類似這樣的技術，這樣就不用自己很辛苦的架設一台 Streaming Server 了，但是缺點就是當 AWS 的服務用的越爽，就會被 AWS 給綁架，以後沒 AWS 可以用怎麼辦！！！\n\n<a name=\"需要工具\"></a>\n## 需要工具\n\n整個作法其實不算很複雜，但是必須先理解滿多服務如何使用，這裡大致上會使用到的 AWS 服務項目有：S3, Elastic Transcoder, Lambda。\n\n - S3 : 儲存空間\n - Elastic Transcoder : 轉檔服務，可將 S3 上的影音檔轉成各種格式\n - Lambda : 類似可自行撰寫的 API，來完成一些制式的工作項目\n\n首先，需自行花點時間了解 Elastic Transcoder 的操作與使用，這部份可自行上網找尋相關資訊，或參考[這篇](https://foliovision.com/player/video-hosting/securing-your-video/hls-stream)。\n\n如果 Elastic Transcoder 都已經了解怎麼操作，就算是已經理解這像轉檔服務的使用方式，接著就是透過 Lambda 的方式將這些工作自動化，所以接下來的重頭戲就是如何撰寫 Lambda 的 function 了，沒記錯的話，目前提供三種語法來撰寫，有 Python、Node.js、Java 三種，就請大家找個自己最熟悉或擅長的程式語言吧！\n\n底下我會以 Node.js 的語法來當範例，因為 Python 跟 Java 都很不熟，node.js 至少算是 javascript 的好親戚，平時多少有再寫。\n\n<a name=\"參考文獻\"></a>\n## 參考文獻\n\n先附上個人參考文獻，其實能力好的，看完這兩篇，大概也不用我多廢話了\n\n - [Using AWS Lambda for Web Video Transcoding](https://tonym.us/using-aws-lambda-for-web-video-transcoding.html)\n - [Automating Transcoding using AWS service (Elastic Transcoder , Lambda, S3 notifications)](https://axcessblog.wordpress.com/2015/09/21/automating-transcoding-using-aws-service-elastic-transcoder-lambda-s3-notifications/)\n\n<a name=\"操作步驟\"></a>\n## 操作步驟\n底下先來看圖說故事，先到 AWS Lambda 內去建立一個 function，內容是由 S3 bucket 內特定資料夾(video/)內，建立(新增/上傳)了一個 mp4 檔案時，所觸發的條件。\n\n<a name=\"step-1-create-lambda-function\"></a>\n### Step 1. Create Lambda function\n\n![Create Lambda function](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step1.jpg)\n\n<a name=\"step-2-use-example-code\"></a>\n### Step 2. Use example code\n\n有範例程式就選來用吧！不然就得自己從頭寫，挺麻煩的\n![Use example code](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step2.jpg)\n\n<a name=\"step-3-setting-event-trigger\"></a>\n### Step 3. Setting event trigger\n\n確定好觸發 Lambda 的條件設定\n![Setting event trigger](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step3.jpg)\n\n<a name=\"step-4-naming-and-setting-role-authority\"></a>\n### Step 4. Naming and setting role authority\n\n命名以及設定執行 Lambda 的角色權限\n![Naming and setting role authority](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-1.jpg) ![Naming and setting role authority](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-2.jpg)\n\n在此提供該角色權限的 Policy\n\n````javascript\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": \"arn:aws:logs:*:*:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\",\n                \"s3:PutObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::*\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1441234334958\",\n            \"Action\": [\n                \"elastictranscoder:CreateJob\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\n````\n\n<a name=\"step-5-check-setting\"></a>\n### Step 5. Check setting\n\n檢查一下所有的設定，沒問題就繼續了！\n![Check setting](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step5.jpg)\n\n<a name=\"lambda-使用方法\"></a>\n## Lambda 使用方法\n\n畫面截圖後簡單說明\n![Lambda-use-1](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda1.jpg)\n\n測試檔的用法\n\n 1. 左上角的 Action -> Configure test event\n 2. 然後選澤 S3 Put 的範例來修改，進行測試\n 3. 請到 S3 上找個檔案來比對修改測試檔範例，改好後測試的結果應該如上一張圖。\n\n![Lambda-use-2](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda2.jpg) ![Lambda-use-3](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda3.jpg)\n\n再熟悉 lambda 的使用方式後，就可以開始撰寫轉檔的部份了，其實就是再 S3 上傳 mp4 檔後，建立一個 __Elastic Transcoder__ 的工作來進行轉檔\n\n````javascript\nconsole.log('Loading function');\nvar AWS = require('aws-sdk');\nvar s3 = new AWS.S3({ apiVersion: '2006-03-01' });\nvar eltr = new AWS.ElasticTranscoder({\n    apiVersion: '2012-09-25',\n    region: 'ap-northeast-1'\n});\nvar pipelineId = '1453215075XXX-XXXXXX';  // please use your pipeline id\n// System preset: HLS 1.5M\nvar preset_HLS_15M  = '1351620000001-200020';\n// return basename without extension\nfunction basename(path) {\n   return path.split('/').reverse()[0].split('.')[0];\n}\nexports.handler = function(event, context) {\n    var bucket = event.Records[0].s3.bucket.name;\n    var key    = event.Records[0].s3.object.key;\n    var params = {\n        Bucket: bucket,\n        Key: key\n    };\n    s3.getObject(params, function(err, data) {\n        if (err) {\n            console.log(err);\n            var message = \"Error getting object \" + key + \" from bucket \" + bucket +\n                \". Make sure they exist and your bucket is in the same region as this function.\";\n            console.log(message);\n            context.fail(message);\n        } else {\n            /* Below section can be used if you want to put any check based on metadata */\n            if (data.ContentType == 'video/mp4') {\n                console.log('Found new video: ' + key + ', sending to ET');\n                sendVideoToET(key, context);\n            } else {\n                console.log('Upload ' + key + 'was not video');\n                console.log(JSON.stringify(data.Metadata));\n                context.fail();\n            }\n        }\n    });\n};\nfunction sendVideoToET(key, context) {\n    var params = {\n        PipelineId: pipelineId,\n        OutputKeyPrefix: null,\n        Input: {\n            Key: key,\n            FrameRate: 'auto',\n            Resolution: 'auto',\n            AspectRatio: 'auto',\n            Interlaced: 'auto',\n            Container: 'auto'\n        },\n        Output: {\n            Key: 'stream/' + basename(key),\n            ThumbnailPattern: 'stream-thumb/' + basename(key) + '-thumb-{count}',\n            PresetId: preset_HLS_15M,\n            Rotate: 'auto',\n            SegmentDuration: \"10\"\n        }\n    };\n    eltr.createJob(params, function(err, data) {\n        if (err) {\n            console.log(err, err.stack); // an error occurred\n            context.fail();\n        }else {\n            console.log(\"Create Job Success\");\n            context.succeed();\n        }\n    });\n}\n````\n\n先到自己 S3 bucket 上建立 video 目錄，然後傳個 mp4 擋上去，接著修改一下 test configure 的內容，使用剛剛傳上去的 mp4 檔來測試，當測試成功後，再回到 S3 bucket 內，應該就可以看到轉出來的檔案在 stream 目錄下，以及縮圖在 stream-thumb 下","source":"_posts/Transcoding-AWS-S3-media-files-using-AWS-Lambda.md","raw":"---\nlayout: post\ntitle: Transcoding AWS S3 media files using AWS Lambda\nauthor: Soar Lin\ncdn: header-off\nheader-img: ''\ndate: 2016-09-11 14:37:23\ntags:\n - s3\n - elastictranscoder\n - lambda\n - node.js\ncategories:\n - AWS\n---\n<!-- MarkdownTOC -->\n\n- [需要工具](#需要工具)\n- [參考文獻](#參考文獻)\n- [操作步驟](#操作步驟)\n    - [Step 1. Create Lambda function](#step-1-create-lambda-function)\n    - [Step 2. Use example code](#step-2-use-example-code)\n    - [Step 3. Setting event trigger](#step-3-setting-event-trigger)\n    - [Step 4. Naming and setting role authority](#step-4-naming-and-setting-role-authority)\n    - [Step 5. Check setting](#step-5-check-setting)\n- [Lambda 使用方法](#lambda-使用方法)\n\n<!-- /MarkdownTOC -->\n\n最近因為工作上的需求，需要把影片檔案轉換成串流的格式，還好有想到去年似乎有參加一場 AWS 開發者大會聽到類似這樣的技術，這樣就不用自己很辛苦的架設一台 Streaming Server 了，但是缺點就是當 AWS 的服務用的越爽，就會被 AWS 給綁架，以後沒 AWS 可以用怎麼辦！！！\n\n<a name=\"需要工具\"></a>\n## 需要工具\n\n整個作法其實不算很複雜，但是必須先理解滿多服務如何使用，這裡大致上會使用到的 AWS 服務項目有：S3, Elastic Transcoder, Lambda。\n\n - S3 : 儲存空間\n - Elastic Transcoder : 轉檔服務，可將 S3 上的影音檔轉成各種格式\n - Lambda : 類似可自行撰寫的 API，來完成一些制式的工作項目\n\n首先，需自行花點時間了解 Elastic Transcoder 的操作與使用，這部份可自行上網找尋相關資訊，或參考[這篇](https://foliovision.com/player/video-hosting/securing-your-video/hls-stream)。\n\n如果 Elastic Transcoder 都已經了解怎麼操作，就算是已經理解這像轉檔服務的使用方式，接著就是透過 Lambda 的方式將這些工作自動化，所以接下來的重頭戲就是如何撰寫 Lambda 的 function 了，沒記錯的話，目前提供三種語法來撰寫，有 Python、Node.js、Java 三種，就請大家找個自己最熟悉或擅長的程式語言吧！\n\n底下我會以 Node.js 的語法來當範例，因為 Python 跟 Java 都很不熟，node.js 至少算是 javascript 的好親戚，平時多少有再寫。\n\n<a name=\"參考文獻\"></a>\n## 參考文獻\n\n先附上個人參考文獻，其實能力好的，看完這兩篇，大概也不用我多廢話了\n\n - [Using AWS Lambda for Web Video Transcoding](https://tonym.us/using-aws-lambda-for-web-video-transcoding.html)\n - [Automating Transcoding using AWS service (Elastic Transcoder , Lambda, S3 notifications)](https://axcessblog.wordpress.com/2015/09/21/automating-transcoding-using-aws-service-elastic-transcoder-lambda-s3-notifications/)\n\n<a name=\"操作步驟\"></a>\n## 操作步驟\n底下先來看圖說故事，先到 AWS Lambda 內去建立一個 function，內容是由 S3 bucket 內特定資料夾(video/)內，建立(新增/上傳)了一個 mp4 檔案時，所觸發的條件。\n\n<a name=\"step-1-create-lambda-function\"></a>\n### Step 1. Create Lambda function\n\n![Create Lambda function](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step1.jpg)\n\n<a name=\"step-2-use-example-code\"></a>\n### Step 2. Use example code\n\n有範例程式就選來用吧！不然就得自己從頭寫，挺麻煩的\n![Use example code](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step2.jpg)\n\n<a name=\"step-3-setting-event-trigger\"></a>\n### Step 3. Setting event trigger\n\n確定好觸發 Lambda 的條件設定\n![Setting event trigger](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step3.jpg)\n\n<a name=\"step-4-naming-and-setting-role-authority\"></a>\n### Step 4. Naming and setting role authority\n\n命名以及設定執行 Lambda 的角色權限\n![Naming and setting role authority](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-1.jpg) ![Naming and setting role authority](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-2.jpg)\n\n在此提供該角色權限的 Policy\n\n````javascript\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": \"arn:aws:logs:*:*:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\",\n                \"s3:PutObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::*\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1441234334958\",\n            \"Action\": [\n                \"elastictranscoder:CreateJob\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\n````\n\n<a name=\"step-5-check-setting\"></a>\n### Step 5. Check setting\n\n檢查一下所有的設定，沒問題就繼續了！\n![Check setting](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step5.jpg)\n\n<a name=\"lambda-使用方法\"></a>\n## Lambda 使用方法\n\n畫面截圖後簡單說明\n![Lambda-use-1](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda1.jpg)\n\n測試檔的用法\n\n 1. 左上角的 Action -> Configure test event\n 2. 然後選澤 S3 Put 的範例來修改，進行測試\n 3. 請到 S3 上找個檔案來比對修改測試檔範例，改好後測試的結果應該如上一張圖。\n\n![Lambda-use-2](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda2.jpg) ![Lambda-use-3](/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda3.jpg)\n\n再熟悉 lambda 的使用方式後，就可以開始撰寫轉檔的部份了，其實就是再 S3 上傳 mp4 檔後，建立一個 __Elastic Transcoder__ 的工作來進行轉檔\n\n````javascript\nconsole.log('Loading function');\nvar AWS = require('aws-sdk');\nvar s3 = new AWS.S3({ apiVersion: '2006-03-01' });\nvar eltr = new AWS.ElasticTranscoder({\n    apiVersion: '2012-09-25',\n    region: 'ap-northeast-1'\n});\nvar pipelineId = '1453215075XXX-XXXXXX';  // please use your pipeline id\n// System preset: HLS 1.5M\nvar preset_HLS_15M  = '1351620000001-200020';\n// return basename without extension\nfunction basename(path) {\n   return path.split('/').reverse()[0].split('.')[0];\n}\nexports.handler = function(event, context) {\n    var bucket = event.Records[0].s3.bucket.name;\n    var key    = event.Records[0].s3.object.key;\n    var params = {\n        Bucket: bucket,\n        Key: key\n    };\n    s3.getObject(params, function(err, data) {\n        if (err) {\n            console.log(err);\n            var message = \"Error getting object \" + key + \" from bucket \" + bucket +\n                \". Make sure they exist and your bucket is in the same region as this function.\";\n            console.log(message);\n            context.fail(message);\n        } else {\n            /* Below section can be used if you want to put any check based on metadata */\n            if (data.ContentType == 'video/mp4') {\n                console.log('Found new video: ' + key + ', sending to ET');\n                sendVideoToET(key, context);\n            } else {\n                console.log('Upload ' + key + 'was not video');\n                console.log(JSON.stringify(data.Metadata));\n                context.fail();\n            }\n        }\n    });\n};\nfunction sendVideoToET(key, context) {\n    var params = {\n        PipelineId: pipelineId,\n        OutputKeyPrefix: null,\n        Input: {\n            Key: key,\n            FrameRate: 'auto',\n            Resolution: 'auto',\n            AspectRatio: 'auto',\n            Interlaced: 'auto',\n            Container: 'auto'\n        },\n        Output: {\n            Key: 'stream/' + basename(key),\n            ThumbnailPattern: 'stream-thumb/' + basename(key) + '-thumb-{count}',\n            PresetId: preset_HLS_15M,\n            Rotate: 'auto',\n            SegmentDuration: \"10\"\n        }\n    };\n    eltr.createJob(params, function(err, data) {\n        if (err) {\n            console.log(err, err.stack); // an error occurred\n            context.fail();\n        }else {\n            console.log(\"Create Job Success\");\n            context.succeed();\n        }\n    });\n}\n````\n\n先到自己 S3 bucket 上建立 video 目錄，然後傳個 mp4 擋上去，接著修改一下 test configure 的內容，使用剛剛傳上去的 mp4 檔來測試，當測試成功後，再回到 S3 bucket 內，應該就可以看到轉出來的檔案在 stream 目錄下，以及縮圖在 stream-thumb 下","slug":"Transcoding-AWS-S3-media-files-using-AWS-Lambda","published":1,"updated":"2016-09-11T07:02:55.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gi8000nscscnnxu7nfr","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#需要工具\">需要工具</a></li>\n<li><a href=\"#參考文獻\">參考文獻</a></li>\n<li><a href=\"#操作步驟\">操作步驟</a><ul>\n<li><a href=\"#step-1-create-lambda-function\">Step 1. Create Lambda function</a></li>\n<li><a href=\"#step-2-use-example-code\">Step 2. Use example code</a></li>\n<li><a href=\"#step-3-setting-event-trigger\">Step 3. Setting event trigger</a></li>\n<li><a href=\"#step-4-naming-and-setting-role-authority\">Step 4. Naming and setting role authority</a></li>\n<li><a href=\"#step-5-check-setting\">Step 5. Check setting</a></li>\n</ul>\n</li>\n<li><a href=\"#lambda-使用方法\">Lambda 使用方法</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<p>最近因為工作上的需求，需要把影片檔案轉換成串流的格式，還好有想到去年似乎有參加一場 AWS 開發者大會聽到類似這樣的技術，這樣就不用自己很辛苦的架設一台 Streaming Server 了，但是缺點就是當 AWS 的服務用的越爽，就會被 AWS 給綁架，以後沒 AWS 可以用怎麼辦！！！</p>\n<p><a name=\"需要工具\"></a></p>\n<h2 id=\"需要工具\"><a href=\"#需要工具\" class=\"headerlink\" title=\"需要工具\"></a>需要工具</h2><p>整個作法其實不算很複雜，但是必須先理解滿多服務如何使用，這裡大致上會使用到的 AWS 服務項目有：S3, Elastic Transcoder, Lambda。</p>\n<ul>\n<li>S3 : 儲存空間</li>\n<li>Elastic Transcoder : 轉檔服務，可將 S3 上的影音檔轉成各種格式</li>\n<li>Lambda : 類似可自行撰寫的 API，來完成一些制式的工作項目</li>\n</ul>\n<p>首先，需自行花點時間了解 Elastic Transcoder 的操作與使用，這部份可自行上網找尋相關資訊，或參考<a href=\"https://foliovision.com/player/video-hosting/securing-your-video/hls-stream\" target=\"_blank\" rel=\"external\">這篇</a>。</p>\n<p>如果 Elastic Transcoder 都已經了解怎麼操作，就算是已經理解這像轉檔服務的使用方式，接著就是透過 Lambda 的方式將這些工作自動化，所以接下來的重頭戲就是如何撰寫 Lambda 的 function 了，沒記錯的話，目前提供三種語法來撰寫，有 Python、Node.js、Java 三種，就請大家找個自己最熟悉或擅長的程式語言吧！</p>\n<p>底下我會以 Node.js 的語法來當範例，因為 Python 跟 Java 都很不熟，node.js 至少算是 javascript 的好親戚，平時多少有再寫。</p>\n<p><a name=\"參考文獻\"></a></p>\n<h2 id=\"參考文獻\"><a href=\"#參考文獻\" class=\"headerlink\" title=\"參考文獻\"></a>參考文獻</h2><p>先附上個人參考文獻，其實能力好的，看完這兩篇，大概也不用我多廢話了</p>\n<ul>\n<li><a href=\"https://tonym.us/using-aws-lambda-for-web-video-transcoding.html\" target=\"_blank\" rel=\"external\">Using AWS Lambda for Web Video Transcoding</a></li>\n<li><a href=\"https://axcessblog.wordpress.com/2015/09/21/automating-transcoding-using-aws-service-elastic-transcoder-lambda-s3-notifications/\" target=\"_blank\" rel=\"external\">Automating Transcoding using AWS service (Elastic Transcoder , Lambda, S3 notifications)</a></li>\n</ul>\n<p><a name=\"操作步驟\"></a></p>\n<h2 id=\"操作步驟\"><a href=\"#操作步驟\" class=\"headerlink\" title=\"操作步驟\"></a>操作步驟</h2><p>底下先來看圖說故事，先到 AWS Lambda 內去建立一個 function，內容是由 S3 bucket 內特定資料夾(video/)內，建立(新增/上傳)了一個 mp4 檔案時，所觸發的條件。</p>\n<p><a name=\"step-1-create-lambda-function\"></a></p>\n<h3 id=\"Step-1-Create-Lambda-function\"><a href=\"#Step-1-Create-Lambda-function\" class=\"headerlink\" title=\"Step 1. Create Lambda function\"></a>Step 1. Create Lambda function</h3><p><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step1.jpg\" alt=\"Create Lambda function\"></p>\n<p><a name=\"step-2-use-example-code\"></a></p>\n<h3 id=\"Step-2-Use-example-code\"><a href=\"#Step-2-Use-example-code\" class=\"headerlink\" title=\"Step 2. Use example code\"></a>Step 2. Use example code</h3><p>有範例程式就選來用吧！不然就得自己從頭寫，挺麻煩的<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step2.jpg\" alt=\"Use example code\"></p>\n<p><a name=\"step-3-setting-event-trigger\"></a></p>\n<h3 id=\"Step-3-Setting-event-trigger\"><a href=\"#Step-3-Setting-event-trigger\" class=\"headerlink\" title=\"Step 3. Setting event trigger\"></a>Step 3. Setting event trigger</h3><p>確定好觸發 Lambda 的條件設定<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step3.jpg\" alt=\"Setting event trigger\"></p>\n<p><a name=\"step-4-naming-and-setting-role-authority\"></a></p>\n<h3 id=\"Step-4-Naming-and-setting-role-authority\"><a href=\"#Step-4-Naming-and-setting-role-authority\" class=\"headerlink\" title=\"Step 4. Naming and setting role authority\"></a>Step 4. Naming and setting role authority</h3><p>命名以及設定執行 Lambda 的角色權限<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-1.jpg\" alt=\"Naming and setting role authority\"> <img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-2.jpg\" alt=\"Naming and setting role authority\"></p>\n<p>在此提供該角色權限的 Policy</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"Version\"</span>: <span class=\"string\">\"2012-10-17\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Statement\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Effect\"</span>: <span class=\"string\">\"Allow\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Action\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"logs:CreateLogGroup\"</span>,</div><div class=\"line\">                <span class=\"string\">\"logs:CreateLogStream\"</span>,</div><div class=\"line\">                <span class=\"string\">\"logs:PutLogEvents\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"Resource\"</span>: <span class=\"string\">\"arn:aws:logs:*:*:*\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Effect\"</span>: <span class=\"string\">\"Allow\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Action\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"s3:GetObject\"</span>,</div><div class=\"line\">                <span class=\"string\">\"s3:PutObject\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"Resource\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"arn:aws:s3:::*\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Sid\"</span>: <span class=\"string\">\"Stmt1441234334958\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Action\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"elastictranscoder:CreateJob\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"Effect\"</span>: <span class=\"string\">\"Allow\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Resource\"</span>: <span class=\"string\">\"*\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"step-5-check-setting\"></a></p>\n<h3 id=\"Step-5-Check-setting\"><a href=\"#Step-5-Check-setting\" class=\"headerlink\" title=\"Step 5. Check setting\"></a>Step 5. Check setting</h3><p>檢查一下所有的設定，沒問題就繼續了！<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step5.jpg\" alt=\"Check setting\"></p>\n<p><a name=\"lambda-使用方法\"></a></p>\n<h2 id=\"Lambda-使用方法\"><a href=\"#Lambda-使用方法\" class=\"headerlink\" title=\"Lambda 使用方法\"></a>Lambda 使用方法</h2><p>畫面截圖後簡單說明<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda1.jpg\" alt=\"Lambda-use-1\"></p>\n<p>測試檔的用法</p>\n<ol>\n<li>左上角的 Action -&gt; Configure test event</li>\n<li>然後選澤 S3 Put 的範例來修改，進行測試</li>\n<li>請到 S3 上找個檔案來比對修改測試檔範例，改好後測試的結果應該如上一張圖。</li>\n</ol>\n<p><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda2.jpg\" alt=\"Lambda-use-2\"> <img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda3.jpg\" alt=\"Lambda-use-3\"></p>\n<p>再熟悉 lambda 的使用方式後，就可以開始撰寫轉檔的部份了，其實就是再 S3 上傳 mp4 檔後，建立一個 <strong>Elastic Transcoder</strong> 的工作來進行轉檔</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Loading function'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> AWS = <span class=\"built_in\">require</span>(<span class=\"string\">'aws-sdk'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> AWS.S3(&#123; apiVersion: <span class=\"string\">'2006-03-01'</span> &#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> eltr = <span class=\"keyword\">new</span> AWS.ElasticTranscoder(&#123;</div><div class=\"line\">    apiVersion: <span class=\"string\">'2012-09-25'</span>,</div><div class=\"line\">    region: <span class=\"string\">'ap-northeast-1'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> pipelineId = <span class=\"string\">'1453215075XXX-XXXXXX'</span>;  <span class=\"comment\">// please use your pipeline id</span></div><div class=\"line\"><span class=\"comment\">// System preset: HLS 1.5M</span></div><div class=\"line\"><span class=\"keyword\">var</span> preset_HLS_15M  = <span class=\"string\">'1351620000001-200020'</span>;</div><div class=\"line\"><span class=\"comment\">// return basename without extension</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">basename</span>(<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> path.split(<span class=\"string\">'/'</span>).reverse()[<span class=\"number\">0</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">exports.handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> bucket = event.Records[<span class=\"number\">0</span>].s3.bucket.name;</div><div class=\"line\">    <span class=\"keyword\">var</span> key    = event.Records[<span class=\"number\">0</span>].s3.object.key;</div><div class=\"line\">    <span class=\"keyword\">var</span> params = &#123;</div><div class=\"line\">        Bucket: bucket,</div><div class=\"line\">        Key: key</div><div class=\"line\">    &#125;;</div><div class=\"line\">    s3.getObject(params, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">            <span class=\"keyword\">var</span> message = <span class=\"string\">\"Error getting object \"</span> + key + <span class=\"string\">\" from bucket \"</span> + bucket +</div><div class=\"line\">                <span class=\"string\">\". Make sure they exist and your bucket is in the same region as this function.\"</span>;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">            context.fail(message);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">/* Below section can be used if you want to put any check based on metadata */</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (data.ContentType == <span class=\"string\">'video/mp4'</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Found new video: '</span> + key + <span class=\"string\">', sending to ET'</span>);</div><div class=\"line\">                sendVideoToET(key, context);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Upload '</span> + key + <span class=\"string\">'was not video'</span>);</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data.Metadata));</div><div class=\"line\">                context.fail();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendVideoToET</span>(<span class=\"params\">key, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> params = &#123;</div><div class=\"line\">        PipelineId: pipelineId,</div><div class=\"line\">        OutputKeyPrefix: <span class=\"literal\">null</span>,</div><div class=\"line\">        Input: &#123;</div><div class=\"line\">            Key: key,</div><div class=\"line\">            FrameRate: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            Resolution: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            AspectRatio: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            Interlaced: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            Container: <span class=\"string\">'auto'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        Output: &#123;</div><div class=\"line\">            Key: <span class=\"string\">'stream/'</span> + basename(key),</div><div class=\"line\">            ThumbnailPattern: <span class=\"string\">'stream-thumb/'</span> + basename(key) + <span class=\"string\">'-thumb-&#123;count&#125;'</span>,</div><div class=\"line\">            PresetId: preset_HLS_15M,</div><div class=\"line\">            Rotate: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            SegmentDuration: <span class=\"string\">\"10\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    eltr.createJob(params, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err, err.stack); <span class=\"comment\">// an error occurred</span></div><div class=\"line\">            context.fail();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Create Job Success\"</span>);</div><div class=\"line\">            context.succeed();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先到自己 S3 bucket 上建立 video 目錄，然後傳個 mp4 擋上去，接著修改一下 test configure 的內容，使用剛剛傳上去的 mp4 檔來測試，當測試成功後，再回到 S3 bucket 內，應該就可以看到轉出來的檔案在 stream 目錄下，以及縮圖在 stream-thumb 下</p>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#需要工具\">需要工具</a></li>\n<li><a href=\"#參考文獻\">參考文獻</a></li>\n<li><a href=\"#操作步驟\">操作步驟</a><ul>\n<li><a href=\"#step-1-create-lambda-function\">Step 1. Create Lambda function</a></li>\n<li><a href=\"#step-2-use-example-code\">Step 2. Use example code</a></li>\n<li><a href=\"#step-3-setting-event-trigger\">Step 3. Setting event trigger</a></li>\n<li><a href=\"#step-4-naming-and-setting-role-authority\">Step 4. Naming and setting role authority</a></li>\n<li><a href=\"#step-5-check-setting\">Step 5. Check setting</a></li>\n</ul>\n</li>\n<li><a href=\"#lambda-使用方法\">Lambda 使用方法</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<p>最近因為工作上的需求，需要把影片檔案轉換成串流的格式，還好有想到去年似乎有參加一場 AWS 開發者大會聽到類似這樣的技術，這樣就不用自己很辛苦的架設一台 Streaming Server 了，但是缺點就是當 AWS 的服務用的越爽，就會被 AWS 給綁架，以後沒 AWS 可以用怎麼辦！！！</p>\n<p><a name=\"需要工具\"></a></p>\n<h2 id=\"需要工具\"><a href=\"#需要工具\" class=\"headerlink\" title=\"需要工具\"></a>需要工具</h2><p>整個作法其實不算很複雜，但是必須先理解滿多服務如何使用，這裡大致上會使用到的 AWS 服務項目有：S3, Elastic Transcoder, Lambda。</p>\n<ul>\n<li>S3 : 儲存空間</li>\n<li>Elastic Transcoder : 轉檔服務，可將 S3 上的影音檔轉成各種格式</li>\n<li>Lambda : 類似可自行撰寫的 API，來完成一些制式的工作項目</li>\n</ul>\n<p>首先，需自行花點時間了解 Elastic Transcoder 的操作與使用，這部份可自行上網找尋相關資訊，或參考<a href=\"https://foliovision.com/player/video-hosting/securing-your-video/hls-stream\">這篇</a>。</p>\n<p>如果 Elastic Transcoder 都已經了解怎麼操作，就算是已經理解這像轉檔服務的使用方式，接著就是透過 Lambda 的方式將這些工作自動化，所以接下來的重頭戲就是如何撰寫 Lambda 的 function 了，沒記錯的話，目前提供三種語法來撰寫，有 Python、Node.js、Java 三種，就請大家找個自己最熟悉或擅長的程式語言吧！</p>\n<p>底下我會以 Node.js 的語法來當範例，因為 Python 跟 Java 都很不熟，node.js 至少算是 javascript 的好親戚，平時多少有再寫。</p>\n<p><a name=\"參考文獻\"></a></p>\n<h2 id=\"參考文獻\"><a href=\"#參考文獻\" class=\"headerlink\" title=\"參考文獻\"></a>參考文獻</h2><p>先附上個人參考文獻，其實能力好的，看完這兩篇，大概也不用我多廢話了</p>\n<ul>\n<li><a href=\"https://tonym.us/using-aws-lambda-for-web-video-transcoding.html\">Using AWS Lambda for Web Video Transcoding</a></li>\n<li><a href=\"https://axcessblog.wordpress.com/2015/09/21/automating-transcoding-using-aws-service-elastic-transcoder-lambda-s3-notifications/\">Automating Transcoding using AWS service (Elastic Transcoder , Lambda, S3 notifications)</a></li>\n</ul>\n<p><a name=\"操作步驟\"></a></p>\n<h2 id=\"操作步驟\"><a href=\"#操作步驟\" class=\"headerlink\" title=\"操作步驟\"></a>操作步驟</h2><p>底下先來看圖說故事，先到 AWS Lambda 內去建立一個 function，內容是由 S3 bucket 內特定資料夾(video/)內，建立(新增/上傳)了一個 mp4 檔案時，所觸發的條件。</p>\n<p><a name=\"step-1-create-lambda-function\"></a></p>\n<h3 id=\"Step-1-Create-Lambda-function\"><a href=\"#Step-1-Create-Lambda-function\" class=\"headerlink\" title=\"Step 1. Create Lambda function\"></a>Step 1. Create Lambda function</h3><p><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step1.jpg\" alt=\"Create Lambda function\"></p>\n<p><a name=\"step-2-use-example-code\"></a></p>\n<h3 id=\"Step-2-Use-example-code\"><a href=\"#Step-2-Use-example-code\" class=\"headerlink\" title=\"Step 2. Use example code\"></a>Step 2. Use example code</h3><p>有範例程式就選來用吧！不然就得自己從頭寫，挺麻煩的<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step2.jpg\" alt=\"Use example code\"></p>\n<p><a name=\"step-3-setting-event-trigger\"></a></p>\n<h3 id=\"Step-3-Setting-event-trigger\"><a href=\"#Step-3-Setting-event-trigger\" class=\"headerlink\" title=\"Step 3. Setting event trigger\"></a>Step 3. Setting event trigger</h3><p>確定好觸發 Lambda 的條件設定<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step3.jpg\" alt=\"Setting event trigger\"></p>\n<p><a name=\"step-4-naming-and-setting-role-authority\"></a></p>\n<h3 id=\"Step-4-Naming-and-setting-role-authority\"><a href=\"#Step-4-Naming-and-setting-role-authority\" class=\"headerlink\" title=\"Step 4. Naming and setting role authority\"></a>Step 4. Naming and setting role authority</h3><p>命名以及設定執行 Lambda 的角色權限<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-1.jpg\" alt=\"Naming and setting role authority\"> <img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step4-2.jpg\" alt=\"Naming and setting role authority\"></p>\n<p>在此提供該角色權限的 Policy</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"Version\"</span>: <span class=\"string\">\"2012-10-17\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Statement\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Effect\"</span>: <span class=\"string\">\"Allow\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Action\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"logs:CreateLogGroup\"</span>,</div><div class=\"line\">                <span class=\"string\">\"logs:CreateLogStream\"</span>,</div><div class=\"line\">                <span class=\"string\">\"logs:PutLogEvents\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"Resource\"</span>: <span class=\"string\">\"arn:aws:logs:*:*:*\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Effect\"</span>: <span class=\"string\">\"Allow\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Action\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"s3:GetObject\"</span>,</div><div class=\"line\">                <span class=\"string\">\"s3:PutObject\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"Resource\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"arn:aws:s3:::*\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Sid\"</span>: <span class=\"string\">\"Stmt1441234334958\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Action\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"elastictranscoder:CreateJob\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"Effect\"</span>: <span class=\"string\">\"Allow\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Resource\"</span>: <span class=\"string\">\"*\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"step-5-check-setting\"></a></p>\n<h3 id=\"Step-5-Check-setting\"><a href=\"#Step-5-Check-setting\" class=\"headerlink\" title=\"Step 5. Check setting\"></a>Step 5. Check setting</h3><p>檢查一下所有的設定，沒問題就繼續了！<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/step5.jpg\" alt=\"Check setting\"></p>\n<p><a name=\"lambda-使用方法\"></a></p>\n<h2 id=\"Lambda-使用方法\"><a href=\"#Lambda-使用方法\" class=\"headerlink\" title=\"Lambda 使用方法\"></a>Lambda 使用方法</h2><p>畫面截圖後簡單說明<br><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda1.jpg\" alt=\"Lambda-use-1\"></p>\n<p>測試檔的用法</p>\n<ol>\n<li>左上角的 Action -&gt; Configure test event</li>\n<li>然後選澤 S3 Put 的範例來修改，進行測試</li>\n<li>請到 S3 上找個檔案來比對修改測試檔範例，改好後測試的結果應該如上一張圖。</li>\n</ol>\n<p><img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda2.jpg\" alt=\"Lambda-use-2\"> <img src=\"/images/Transcoding-AWS-S3-media-files-using-AWS-Lambda/lambda3.jpg\" alt=\"Lambda-use-3\"></p>\n<p>再熟悉 lambda 的使用方式後，就可以開始撰寫轉檔的部份了，其實就是再 S3 上傳 mp4 檔後，建立一個 <strong>Elastic Transcoder</strong> 的工作來進行轉檔</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Loading function'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> AWS = <span class=\"built_in\">require</span>(<span class=\"string\">'aws-sdk'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> AWS.S3(&#123; apiVersion: <span class=\"string\">'2006-03-01'</span> &#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> eltr = <span class=\"keyword\">new</span> AWS.ElasticTranscoder(&#123;</div><div class=\"line\">    apiVersion: <span class=\"string\">'2012-09-25'</span>,</div><div class=\"line\">    region: <span class=\"string\">'ap-northeast-1'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> pipelineId = <span class=\"string\">'1453215075XXX-XXXXXX'</span>;  <span class=\"comment\">// please use your pipeline id</span></div><div class=\"line\"><span class=\"comment\">// System preset: HLS 1.5M</span></div><div class=\"line\"><span class=\"keyword\">var</span> preset_HLS_15M  = <span class=\"string\">'1351620000001-200020'</span>;</div><div class=\"line\"><span class=\"comment\">// return basename without extension</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">basename</span>(<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> path.split(<span class=\"string\">'/'</span>).reverse()[<span class=\"number\">0</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">exports.handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> bucket = event.Records[<span class=\"number\">0</span>].s3.bucket.name;</div><div class=\"line\">    <span class=\"keyword\">var</span> key    = event.Records[<span class=\"number\">0</span>].s3.object.key;</div><div class=\"line\">    <span class=\"keyword\">var</span> params = &#123;</div><div class=\"line\">        Bucket: bucket,</div><div class=\"line\">        Key: key</div><div class=\"line\">    &#125;;</div><div class=\"line\">    s3.getObject(params, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">            <span class=\"keyword\">var</span> message = <span class=\"string\">\"Error getting object \"</span> + key + <span class=\"string\">\" from bucket \"</span> + bucket +</div><div class=\"line\">                <span class=\"string\">\". Make sure they exist and your bucket is in the same region as this function.\"</span>;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">            context.fail(message);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">/* Below section can be used if you want to put any check based on metadata */</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (data.ContentType == <span class=\"string\">'video/mp4'</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Found new video: '</span> + key + <span class=\"string\">', sending to ET'</span>);</div><div class=\"line\">                sendVideoToET(key, context);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Upload '</span> + key + <span class=\"string\">'was not video'</span>);</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data.Metadata));</div><div class=\"line\">                context.fail();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendVideoToET</span>(<span class=\"params\">key, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> params = &#123;</div><div class=\"line\">        PipelineId: pipelineId,</div><div class=\"line\">        OutputKeyPrefix: <span class=\"literal\">null</span>,</div><div class=\"line\">        Input: &#123;</div><div class=\"line\">            Key: key,</div><div class=\"line\">            FrameRate: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            Resolution: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            AspectRatio: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            Interlaced: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            Container: <span class=\"string\">'auto'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        Output: &#123;</div><div class=\"line\">            Key: <span class=\"string\">'stream/'</span> + basename(key),</div><div class=\"line\">            ThumbnailPattern: <span class=\"string\">'stream-thumb/'</span> + basename(key) + <span class=\"string\">'-thumb-&#123;count&#125;'</span>,</div><div class=\"line\">            PresetId: preset_HLS_15M,</div><div class=\"line\">            Rotate: <span class=\"string\">'auto'</span>,</div><div class=\"line\">            SegmentDuration: <span class=\"string\">\"10\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    eltr.createJob(params, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err, err.stack); <span class=\"comment\">// an error occurred</span></div><div class=\"line\">            context.fail();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Create Job Success\"</span>);</div><div class=\"line\">            context.succeed();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先到自己 S3 bucket 上建立 video 目錄，然後傳個 mp4 擋上去，接著修改一下 test configure 的內容，使用剛剛傳上去的 mp4 檔來測試，當測試成功後，再回到 S3 bucket 內，應該就可以看到轉出來的檔案在 stream 目錄下，以及縮圖在 stream-thumb 下</p>\n"},{"layout":"post","title":"Using Gitolite to setup Git Server and install Gitweb","author":"Soar Lin","cdn":"header-off","header-img":"","date":"2016-09-04T01:49:47.000Z","_content":"<!-- MarkdownTOC -->\n\n- [在 Linux 環境下架設 Git Server](#在-linux-環境下架設-git-server)\n    - [系統套件安裝](#系統套件安裝)\n    - [協同開發人員產生 SSH public key](#協同開發人員產生-ssh-public-key)\n    - [Git Server 的設定](#git-server-的設定)\n    - [建立 Git Repository](#建立-git-repository)\n    - [開發人員 clone 程式碼](#開發人員-clone-程式碼)\n- [使用 Gitolite 管理 Git Server](#使用-gitolite-管理-git-server)\n    - [系統套件安裝](#系統套件安裝-1)\n    - [產生/收集 SSH Public Key](#產生收集-ssh-public-key)\n    - [Gitolite Server 架設](#gitolite-server-架設)\n        - [建立專案](#建立專案)\n        - [加入開發人員](#加入開發人員)\n- [安裝 Gitweb 並整合 Gitolite](#安裝-gitweb-並整合-gitolite)\n    - [系統套件安裝](#系統套件安裝-2)\n    - [Apache 2.4 與 Gitweb 設定](#apache-24-與-gitweb-設定)\n    - [修正 Gitweb conf](#修正-gitweb-conf)\n    - [修正 Gitolite 部分](#修正-gitolite-部分)\n    - [建立專案設定檔修改部分](#建立專案設定檔修改部分)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"在-linux-環境下架設-git-server\"></a>\n# 在 Linux 環境下架設 Git Server\n[參考資料](https://blog.longwin.com.tw/2011/03/build-git-env-share-over-ssh-2011/)\n<a name=\"系統套件安裝\"></a>\n## 系統套件安裝\n\n````bash\nsudo -s (切換帳號為root)\napt-get install git git-core\n````\n\n<a name=\"協同開發人員產生-ssh-public-key\"></a>\n## 協同開發人員產生 SSH public key\n\n````bash\nmkdir .ssh\ncd .ssh\nssh-keygen\ncat ~/.ssh/id_rsa.pub\n#或上傳到 Server /tmp/目錄下統一保存\n````\n\n<a name=\"git-server-的設定\"></a>\n## Git Server 的設定\n- ssh 連線到 Server 上\n- `sudo -s` (切換帳號為root)\n- `useradd -s /bin/bash -m -d /home/git git` (建立名為 git 的使用者)\n- `passwd git` (替 git 建立密碼，與開啟 sudoer 權限)\n- `visudo`\n- `su - git` (切換到 git user，以下動作以 git 權限操作)\n- 將開發人員的 public key 加入認證檔\n\n    ````bash\n    cat /tmp/user1.pub >> ~/.ssh/authorized_keys\n    cat /tmp/user2.pub >> ~/.ssh/authorized_keys\n    ````\n\n<a name=\"建立-git-repository\"></a>\n## 建立 Git Repository\n- ssh 連線到 Server 上\n- 切換到 git user，以下動作以 git 權限操作\n\n````bash\nsu git\nmkdir -p ~/project_name.git\ncd ~/project_name.git\ngit init --bare --shared\n````\n\n<a name=\"開發人員-clone-程式碼\"></a>\n## 開發人員 clone 程式碼\n\n````bash\ngit clone git@<網址 or IP>:/home/git/project_name.git\n````\n\n以上作法是最基本的以 git 帳號來建立 Git Server，優點是適合人少的專案，架設步驟簡單快速；缺點是無法針對不同專案給予不同開發者存取權限，所以需要往下一步\n\n<a name=\"使用-gitolite-管理-git-server\"></a>\n# 使用 Gitolite 管理 Git Server\n[參考資料一](https://blog.longwin.com.tw/2011/03/linux-gitolite-git-server-2011/)　\n[參考資料二](http://blog.changyy.org/2012/09/linux-git-gitolite-gitweb-git-server.html)\n\n<a name=\"系統套件安裝-1\"></a>\n## 系統套件安裝\n\n````bash\napt-get install gitolite\n````\n\n<a name=\"產生收集-ssh-public-key\"></a>\n## 產生/收集 SSH Public Key\n\n- ssh 連線到 Server 上\n- su - git (切換到 git user，以下動作以 git 權限操作)\n- cd .ssh (若沒有該目錄，請先自行建立)\n- ssh-keygen -t rsa -f admin (產生名為 admin 的 public key)\n- 請所有人將各自的 public key 放到 /tmp/ 下，並且已各自名稱命名 (e.g. alex.pub, ben.pub, john.pub …)\n\n<a name=\"gitolite-server-架設\"></a>\n## Gitolite Server 架設\n\n- ssh 連線到 Server 上\n- su - git (切換到 git user，以下動作以 git 權限操作)\n- gl-setup ~/.ssh/admin.pub (匯入管理者的Public key)\n\n目錄結構如下：\n\n````bash\n.\n├── .gitolite/\n├── .gitolite.rc\n├── repositories/\n│   ├── gitolite-admin.git\n│   └── testing.git\n├── .ssh\n├── .vim\n└── .vimrc\n````\n\n__這時 git 帳號的 $HOME(家目錄)下，會產生__\n\n- .gitolite/ 目錄\n- .gitolite.rc 設定檔\n- repositories/ 目錄\n\n**repositories 目錄下，有兩個專案**\n\n- gitolite-admin.git (用來管理所有專案的主要專案)\n- testing.git (測試用專案)\n\n<a name=\"建立專案\"></a>\n### 建立專案\n\n因為gitolite的專案管理，是透過在主專案(gitolite-admin.git)裡，改寫 config 檔案來設定，所以需要以管理者帳號\n\n(剛剛使用 git 帳號，因為產生的 admin.pub，被設定為 gitolite 管理者的認證)\n\n- ssh 連線到 Server 上\n- su - git (切換到 git user，以下動作以 git 權限操作)\n- 抓主專案來修改設定\n\n````bash\ngit clone git@localhost:gitolite-admin.git\ncd gitolite-admin/\nvim conf/gitolite.conf\n\n# sample：增加一個名為 ios_test 的專案,\n# 並設定 esu 為可存取的使用者\n# soar 為可讀，加入以下幾行到conf 檔中\n\nrepo    ios_test\n        RW      =   esu\n        R       =   soar\n\n````\n\n- 修改完畢後，以一般 git 上 code 的流程處理\n\n````bash\ngit add .\ngit commit -m \"add new project\"\ngit push\n````\n\n- 順利的話，可以看到畫面上出現，建立 project 的訊息\n\n````bash\nCounting objects: 7, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (4/4), 423 bytes | 0 bytes/s, done.\nTotal 4 (delta 1), reused 0 (delta 0)\nremote: creating ios_test...\nremote: Initialized empty Git repository in /home/git/repositories/ios_test.git/\nremote:\nTo git@localhost:gitolite-admin.git\n   a37d282..62dffa9  master -> master\n````\n\n<a name=\"加入開發人員\"></a>\n### 加入開發人員\n**在主專案中，加入開發人員的 public key 檔**\n\n````bash\nssh 連線到 Server 上\n\n# 切換到 git user\nsu - git\ncd gitolite-admin/\n\n# 將之前收集的 pub 檔，複製到 keydir 目錄下\ncp -r /tmp/*.pub keydir/\ngit add -A\ngit commit -m \"add developer public key\"\ngit push\n````\n\n<a name=\"安裝-gitweb-並整合-gitolite\"></a>\n# 安裝 Gitweb 並整合 Gitolite\n[參考資料](https://ubuntuforums.org/showthread.php?t=2244960)\n\n<a name=\"系統套件安裝-2\"></a>\n## 系統套件安裝\n\n````bash\nsudo apt-get install gitweb apache2\nsudo usermod -a G git www-data\n# 將 www-data 使用者加入 git group\n````\n\n<a name=\"apache-24-與-gitweb-設定\"></a>\n## Apache 2.4 與 Gitweb 設定\n\ngitweb 安裝後，產生的設定是 Apache 2.2 的設定寫法，所以在2.4版需要做些修正\n\n- 調整 gitweb 設定檔位置\n\n````bash\nsudo cp /etc/apache2/conf.d/gitweb /etc/apache2/conf-available/gitweb.conf\ncd /etc/apache2/conf-enabled\nsudo ln -s ../conf-available/gitweb.conf\n````\n\n- 修正 gitweb conf 內容\n\n````bash\nsudo vim /etc/apache2/conf-enabled/gitweb.conf\n\n\nAlias /gitweb /usr/share/gitweb\n\n<Directory /usr/share/gitweb>\n  Options +FollowSymLinks +ExecCGI\n  AddHandler cgi-script .cgi\n</Directory>\n````\n\n- Apache 載入 cgi model `sudo a2enmod cgi`\n- 重啟 Apache Server `sudo service apache2 restart`\n\n<a name=\"修正-gitweb-conf\"></a>\n## 修正 Gitweb conf\n\n````bash\nsudo vim /etc/gitweb.conf\n\n$projectroot = \"/home/git/repositories\";\n# Syntax highlighting\n$feature{'highlight'}{'default'} = [1];\n# 提供系統 loadavg check，若系統繁忙，逛 gitweb 只會看到 503 - The load average on the server is too high 訊息\n$masload = 500;\n$projects_list = $projectroot; # unmark this line\n````\n\n<a name=\"修正-gitolite-部分\"></a>\n## 修正 Gitolite 部分\n\n- ssh 連線到 Server 上\n- su - git (切換到 git user)\n- `vim .gitolite.rc`\n\n````bash\n$REPO_UMASK = 0027; # change this value\n$WEB_INTERFACE = \"gitweb”;  # unmark this line\n$GL_GITCONFIG_KEYS = \"gitweb.owner gitweb.description .*”;   # change this value\n````\n\n<a name=\"建立專案設定檔修改部分\"></a>\n## 建立專案設定檔修改部分\n_gitolite-admin/conf/gitolite.conf_\n\n- 將所有專案加入 gitweb 與 daemon 兩個帳戶的讀取權限，才能讓 gitweb 讀取到專案資料\n- 原有的專案可以添加一些資訊，來透過 gitweb 顯示出來\n\n````bash\n# 加入部分\nrepo    @all\n        R       =   gitweb daemon\n\n# 專案描述部份\nrepo    testing\n        RW+     =   @all\n    config gitweb.owner         = \"Sagacity Tech. Co., Ltd.\"\n    config gitweb.description   = \"This is test repository\"\n    config gitweb.url           = git@<IP or 網址>:testing.git\n````\n\n- 檢查 repositories 目錄權限可被讀取\n- `sudo service apache2 restart` (重啟 Apache)\n- 連線到 http://IP or 網址/gitweb\n","source":"_posts/Using-Gitolite-to-setup-Git-Server-and-install-Gitweb.md","raw":"---\nlayout: post\ntitle: Using Gitolite to setup Git Server and install Gitweb\nauthor: Soar Lin\ncdn: header-off\nheader-img: ''\ndate: 2016-09-04 09:49:47\ncategories:\n - Server\ntags:\n - git\n - git server\n - gitolite\n - gitweb\n---\n<!-- MarkdownTOC -->\n\n- [在 Linux 環境下架設 Git Server](#在-linux-環境下架設-git-server)\n    - [系統套件安裝](#系統套件安裝)\n    - [協同開發人員產生 SSH public key](#協同開發人員產生-ssh-public-key)\n    - [Git Server 的設定](#git-server-的設定)\n    - [建立 Git Repository](#建立-git-repository)\n    - [開發人員 clone 程式碼](#開發人員-clone-程式碼)\n- [使用 Gitolite 管理 Git Server](#使用-gitolite-管理-git-server)\n    - [系統套件安裝](#系統套件安裝-1)\n    - [產生/收集 SSH Public Key](#產生收集-ssh-public-key)\n    - [Gitolite Server 架設](#gitolite-server-架設)\n        - [建立專案](#建立專案)\n        - [加入開發人員](#加入開發人員)\n- [安裝 Gitweb 並整合 Gitolite](#安裝-gitweb-並整合-gitolite)\n    - [系統套件安裝](#系統套件安裝-2)\n    - [Apache 2.4 與 Gitweb 設定](#apache-24-與-gitweb-設定)\n    - [修正 Gitweb conf](#修正-gitweb-conf)\n    - [修正 Gitolite 部分](#修正-gitolite-部分)\n    - [建立專案設定檔修改部分](#建立專案設定檔修改部分)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"在-linux-環境下架設-git-server\"></a>\n# 在 Linux 環境下架設 Git Server\n[參考資料](https://blog.longwin.com.tw/2011/03/build-git-env-share-over-ssh-2011/)\n<a name=\"系統套件安裝\"></a>\n## 系統套件安裝\n\n````bash\nsudo -s (切換帳號為root)\napt-get install git git-core\n````\n\n<a name=\"協同開發人員產生-ssh-public-key\"></a>\n## 協同開發人員產生 SSH public key\n\n````bash\nmkdir .ssh\ncd .ssh\nssh-keygen\ncat ~/.ssh/id_rsa.pub\n#或上傳到 Server /tmp/目錄下統一保存\n````\n\n<a name=\"git-server-的設定\"></a>\n## Git Server 的設定\n- ssh 連線到 Server 上\n- `sudo -s` (切換帳號為root)\n- `useradd -s /bin/bash -m -d /home/git git` (建立名為 git 的使用者)\n- `passwd git` (替 git 建立密碼，與開啟 sudoer 權限)\n- `visudo`\n- `su - git` (切換到 git user，以下動作以 git 權限操作)\n- 將開發人員的 public key 加入認證檔\n\n    ````bash\n    cat /tmp/user1.pub >> ~/.ssh/authorized_keys\n    cat /tmp/user2.pub >> ~/.ssh/authorized_keys\n    ````\n\n<a name=\"建立-git-repository\"></a>\n## 建立 Git Repository\n- ssh 連線到 Server 上\n- 切換到 git user，以下動作以 git 權限操作\n\n````bash\nsu git\nmkdir -p ~/project_name.git\ncd ~/project_name.git\ngit init --bare --shared\n````\n\n<a name=\"開發人員-clone-程式碼\"></a>\n## 開發人員 clone 程式碼\n\n````bash\ngit clone git@<網址 or IP>:/home/git/project_name.git\n````\n\n以上作法是最基本的以 git 帳號來建立 Git Server，優點是適合人少的專案，架設步驟簡單快速；缺點是無法針對不同專案給予不同開發者存取權限，所以需要往下一步\n\n<a name=\"使用-gitolite-管理-git-server\"></a>\n# 使用 Gitolite 管理 Git Server\n[參考資料一](https://blog.longwin.com.tw/2011/03/linux-gitolite-git-server-2011/)　\n[參考資料二](http://blog.changyy.org/2012/09/linux-git-gitolite-gitweb-git-server.html)\n\n<a name=\"系統套件安裝-1\"></a>\n## 系統套件安裝\n\n````bash\napt-get install gitolite\n````\n\n<a name=\"產生收集-ssh-public-key\"></a>\n## 產生/收集 SSH Public Key\n\n- ssh 連線到 Server 上\n- su - git (切換到 git user，以下動作以 git 權限操作)\n- cd .ssh (若沒有該目錄，請先自行建立)\n- ssh-keygen -t rsa -f admin (產生名為 admin 的 public key)\n- 請所有人將各自的 public key 放到 /tmp/ 下，並且已各自名稱命名 (e.g. alex.pub, ben.pub, john.pub …)\n\n<a name=\"gitolite-server-架設\"></a>\n## Gitolite Server 架設\n\n- ssh 連線到 Server 上\n- su - git (切換到 git user，以下動作以 git 權限操作)\n- gl-setup ~/.ssh/admin.pub (匯入管理者的Public key)\n\n目錄結構如下：\n\n````bash\n.\n├── .gitolite/\n├── .gitolite.rc\n├── repositories/\n│   ├── gitolite-admin.git\n│   └── testing.git\n├── .ssh\n├── .vim\n└── .vimrc\n````\n\n__這時 git 帳號的 $HOME(家目錄)下，會產生__\n\n- .gitolite/ 目錄\n- .gitolite.rc 設定檔\n- repositories/ 目錄\n\n**repositories 目錄下，有兩個專案**\n\n- gitolite-admin.git (用來管理所有專案的主要專案)\n- testing.git (測試用專案)\n\n<a name=\"建立專案\"></a>\n### 建立專案\n\n因為gitolite的專案管理，是透過在主專案(gitolite-admin.git)裡，改寫 config 檔案來設定，所以需要以管理者帳號\n\n(剛剛使用 git 帳號，因為產生的 admin.pub，被設定為 gitolite 管理者的認證)\n\n- ssh 連線到 Server 上\n- su - git (切換到 git user，以下動作以 git 權限操作)\n- 抓主專案來修改設定\n\n````bash\ngit clone git@localhost:gitolite-admin.git\ncd gitolite-admin/\nvim conf/gitolite.conf\n\n# sample：增加一個名為 ios_test 的專案,\n# 並設定 esu 為可存取的使用者\n# soar 為可讀，加入以下幾行到conf 檔中\n\nrepo    ios_test\n        RW      =   esu\n        R       =   soar\n\n````\n\n- 修改完畢後，以一般 git 上 code 的流程處理\n\n````bash\ngit add .\ngit commit -m \"add new project\"\ngit push\n````\n\n- 順利的話，可以看到畫面上出現，建立 project 的訊息\n\n````bash\nCounting objects: 7, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (4/4), 423 bytes | 0 bytes/s, done.\nTotal 4 (delta 1), reused 0 (delta 0)\nremote: creating ios_test...\nremote: Initialized empty Git repository in /home/git/repositories/ios_test.git/\nremote:\nTo git@localhost:gitolite-admin.git\n   a37d282..62dffa9  master -> master\n````\n\n<a name=\"加入開發人員\"></a>\n### 加入開發人員\n**在主專案中，加入開發人員的 public key 檔**\n\n````bash\nssh 連線到 Server 上\n\n# 切換到 git user\nsu - git\ncd gitolite-admin/\n\n# 將之前收集的 pub 檔，複製到 keydir 目錄下\ncp -r /tmp/*.pub keydir/\ngit add -A\ngit commit -m \"add developer public key\"\ngit push\n````\n\n<a name=\"安裝-gitweb-並整合-gitolite\"></a>\n# 安裝 Gitweb 並整合 Gitolite\n[參考資料](https://ubuntuforums.org/showthread.php?t=2244960)\n\n<a name=\"系統套件安裝-2\"></a>\n## 系統套件安裝\n\n````bash\nsudo apt-get install gitweb apache2\nsudo usermod -a G git www-data\n# 將 www-data 使用者加入 git group\n````\n\n<a name=\"apache-24-與-gitweb-設定\"></a>\n## Apache 2.4 與 Gitweb 設定\n\ngitweb 安裝後，產生的設定是 Apache 2.2 的設定寫法，所以在2.4版需要做些修正\n\n- 調整 gitweb 設定檔位置\n\n````bash\nsudo cp /etc/apache2/conf.d/gitweb /etc/apache2/conf-available/gitweb.conf\ncd /etc/apache2/conf-enabled\nsudo ln -s ../conf-available/gitweb.conf\n````\n\n- 修正 gitweb conf 內容\n\n````bash\nsudo vim /etc/apache2/conf-enabled/gitweb.conf\n\n\nAlias /gitweb /usr/share/gitweb\n\n<Directory /usr/share/gitweb>\n  Options +FollowSymLinks +ExecCGI\n  AddHandler cgi-script .cgi\n</Directory>\n````\n\n- Apache 載入 cgi model `sudo a2enmod cgi`\n- 重啟 Apache Server `sudo service apache2 restart`\n\n<a name=\"修正-gitweb-conf\"></a>\n## 修正 Gitweb conf\n\n````bash\nsudo vim /etc/gitweb.conf\n\n$projectroot = \"/home/git/repositories\";\n# Syntax highlighting\n$feature{'highlight'}{'default'} = [1];\n# 提供系統 loadavg check，若系統繁忙，逛 gitweb 只會看到 503 - The load average on the server is too high 訊息\n$masload = 500;\n$projects_list = $projectroot; # unmark this line\n````\n\n<a name=\"修正-gitolite-部分\"></a>\n## 修正 Gitolite 部分\n\n- ssh 連線到 Server 上\n- su - git (切換到 git user)\n- `vim .gitolite.rc`\n\n````bash\n$REPO_UMASK = 0027; # change this value\n$WEB_INTERFACE = \"gitweb”;  # unmark this line\n$GL_GITCONFIG_KEYS = \"gitweb.owner gitweb.description .*”;   # change this value\n````\n\n<a name=\"建立專案設定檔修改部分\"></a>\n## 建立專案設定檔修改部分\n_gitolite-admin/conf/gitolite.conf_\n\n- 將所有專案加入 gitweb 與 daemon 兩個帳戶的讀取權限，才能讓 gitweb 讀取到專案資料\n- 原有的專案可以添加一些資訊，來透過 gitweb 顯示出來\n\n````bash\n# 加入部分\nrepo    @all\n        R       =   gitweb daemon\n\n# 專案描述部份\nrepo    testing\n        RW+     =   @all\n    config gitweb.owner         = \"Sagacity Tech. Co., Ltd.\"\n    config gitweb.description   = \"This is test repository\"\n    config gitweb.url           = git@<IP or 網址>:testing.git\n````\n\n- 檢查 repositories 目錄權限可被讀取\n- `sudo service apache2 restart` (重啟 Apache)\n- 連線到 http://IP or 網址/gitweb\n","slug":"Using-Gitolite-to-setup-Git-Server-and-install-Gitweb","published":1,"updated":"2016-09-04T02:31:08.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gi9000oscsczuv0j0oq","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#在-linux-環境下架設-git-server\">在 Linux 環境下架設 Git Server</a><ul>\n<li><a href=\"#系統套件安裝\">系統套件安裝</a></li>\n<li><a href=\"#協同開發人員產生-ssh-public-key\">協同開發人員產生 SSH public key</a></li>\n<li><a href=\"#git-server-的設定\">Git Server 的設定</a></li>\n<li><a href=\"#建立-git-repository\">建立 Git Repository</a></li>\n<li><a href=\"#開發人員-clone-程式碼\">開發人員 clone 程式碼</a></li>\n</ul>\n</li>\n<li><a href=\"#使用-gitolite-管理-git-server\">使用 Gitolite 管理 Git Server</a><ul>\n<li><a href=\"#系統套件安裝-1\">系統套件安裝</a></li>\n<li><a href=\"#產生收集-ssh-public-key\">產生/收集 SSH Public Key</a></li>\n<li><a href=\"#gitolite-server-架設\">Gitolite Server 架設</a><ul>\n<li><a href=\"#建立專案\">建立專案</a></li>\n<li><a href=\"#加入開發人員\">加入開發人員</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#安裝-gitweb-並整合-gitolite\">安裝 Gitweb 並整合 Gitolite</a><ul>\n<li><a href=\"#系統套件安裝-2\">系統套件安裝</a></li>\n<li><a href=\"#apache-24-與-gitweb-設定\">Apache 2.4 與 Gitweb 設定</a></li>\n<li><a href=\"#修正-gitweb-conf\">修正 Gitweb conf</a></li>\n<li><a href=\"#修正-gitolite-部分\">修正 Gitolite 部分</a></li>\n<li><a href=\"#建立專案設定檔修改部分\">建立專案設定檔修改部分</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"在-linux-環境下架設-git-server\"></a></p>\n<h1 id=\"在-Linux-環境下架設-Git-Server\"><a href=\"#在-Linux-環境下架設-Git-Server\" class=\"headerlink\" title=\"在 Linux 環境下架設 Git Server\"></a>在 Linux 環境下架設 Git Server</h1><p><a href=\"https://blog.longwin.com.tw/2011/03/build-git-env-share-over-ssh-2011/\" target=\"_blank\" rel=\"external\">參考資料</a><br><a name=\"系統套件安裝\"></a></p>\n<h2 id=\"系統套件安裝\"><a href=\"#系統套件安裝\" class=\"headerlink\" title=\"系統套件安裝\"></a>系統套件安裝</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"_\">-s</span> (切換帳號為root)</div><div class=\"line\">apt-get install git git-core</div></pre></td></tr></table></figure>\n<p><a name=\"協同開發人員產生-ssh-public-key\"></a></p>\n<h2 id=\"協同開發人員產生-SSH-public-key\"><a href=\"#協同開發人員產生-SSH-public-key\" class=\"headerlink\" title=\"協同開發人員產生 SSH public key\"></a>協同開發人員產生 SSH public key</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir .ssh</div><div class=\"line\"><span class=\"built_in\">cd</span> .ssh</div><div class=\"line\">ssh-keygen</div><div class=\"line\">cat ~/.ssh/id_rsa.pub</div><div class=\"line\"><span class=\"comment\">#或上傳到 Server /tmp/目錄下統一保存</span></div></pre></td></tr></table></figure>\n<p><a name=\"git-server-的設定\"></a></p>\n<h2 id=\"Git-Server-的設定\"><a href=\"#Git-Server-的設定\" class=\"headerlink\" title=\"Git Server 的設定\"></a>Git Server 的設定</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li><code>sudo -s</code> (切換帳號為root)</li>\n<li><code>useradd -s /bin/bash -m -d /home/git git</code> (建立名為 git 的使用者)</li>\n<li><code>passwd git</code> (替 git 建立密碼，與開啟 sudoer 權限)</li>\n<li><code>visudo</code></li>\n<li><code>su - git</code> (切換到 git user，以下動作以 git 權限操作)</li>\n<li><p>將開發人員的 public key 加入認證檔</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">cat /tmp/user1.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class=\"line\">cat /tmp/user2.pub &gt;&gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a name=\"建立-git-repository\"></a></p>\n<h2 id=\"建立-Git-Repository\"><a href=\"#建立-Git-Repository\" class=\"headerlink\" title=\"建立 Git Repository\"></a>建立 Git Repository</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li>切換到 git user，以下動作以 git 權限操作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">su git</div><div class=\"line\">mkdir -p ~/project_name.git</div><div class=\"line\"><span class=\"built_in\">cd</span> ~/project_name.git</div><div class=\"line\">git init --bare --shared</div></pre></td></tr></table></figure>\n<p><a name=\"開發人員-clone-程式碼\"></a></p>\n<h2 id=\"開發人員-clone-程式碼\"><a href=\"#開發人員-clone-程式碼\" class=\"headerlink\" title=\"開發人員 clone 程式碼\"></a>開發人員 clone 程式碼</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@&lt;網址 or IP&gt;:/home/git/project_name.git</div></pre></td></tr></table></figure>\n<p>以上作法是最基本的以 git 帳號來建立 Git Server，優點是適合人少的專案，架設步驟簡單快速；缺點是無法針對不同專案給予不同開發者存取權限，所以需要往下一步</p>\n<p><a name=\"使用-gitolite-管理-git-server\"></a></p>\n<h1 id=\"使用-Gitolite-管理-Git-Server\"><a href=\"#使用-Gitolite-管理-Git-Server\" class=\"headerlink\" title=\"使用 Gitolite 管理 Git Server\"></a>使用 Gitolite 管理 Git Server</h1><p><a href=\"https://blog.longwin.com.tw/2011/03/linux-gitolite-git-server-2011/\" target=\"_blank\" rel=\"external\">參考資料一</a>　<br><a href=\"http://blog.changyy.org/2012/09/linux-git-gitolite-gitweb-git-server.html\" target=\"_blank\" rel=\"external\">參考資料二</a></p>\n<p><a name=\"系統套件安裝-1\"></a></p>\n<h2 id=\"系統套件安裝-1\"><a href=\"#系統套件安裝-1\" class=\"headerlink\" title=\"系統套件安裝\"></a>系統套件安裝</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">apt-get install gitolite</div></pre></td></tr></table></figure>\n<p><a name=\"產生收集-ssh-public-key\"></a></p>\n<h2 id=\"產生-收集-SSH-Public-Key\"><a href=\"#產生-收集-SSH-Public-Key\" class=\"headerlink\" title=\"產生/收集 SSH Public Key\"></a>產生/收集 SSH Public Key</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li>su - git (切換到 git user，以下動作以 git 權限操作)</li>\n<li>cd .ssh (若沒有該目錄，請先自行建立)</li>\n<li>ssh-keygen -t rsa -f admin (產生名為 admin 的 public key)</li>\n<li>請所有人將各自的 public key 放到 /tmp/ 下，並且已各自名稱命名 (e.g. alex.pub, ben.pub, john.pub …)</li>\n</ul>\n<p><a name=\"gitolite-server-架設\"></a></p>\n<h2 id=\"Gitolite-Server-架設\"><a href=\"#Gitolite-Server-架設\" class=\"headerlink\" title=\"Gitolite Server 架設\"></a>Gitolite Server 架設</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li>su - git (切換到 git user，以下動作以 git 權限操作)</li>\n<li>gl-setup ~/.ssh/admin.pub (匯入管理者的Public key)</li>\n</ul>\n<p>目錄結構如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .gitolite/</div><div class=\"line\">├── .gitolite.rc</div><div class=\"line\">├── repositories/</div><div class=\"line\">│   ├── gitolite-admin.git</div><div class=\"line\">│   └── testing.git</div><div class=\"line\">├── .ssh</div><div class=\"line\">├── .vim</div><div class=\"line\">└── .vimrc</div></pre></td></tr></table></figure>\n<p><strong>這時 git 帳號的 $HOME(家目錄)下，會產生</strong></p>\n<ul>\n<li>.gitolite/ 目錄</li>\n<li>.gitolite.rc 設定檔</li>\n<li>repositories/ 目錄</li>\n</ul>\n<p><strong>repositories 目錄下，有兩個專案</strong></p>\n<ul>\n<li>gitolite-admin.git (用來管理所有專案的主要專案)</li>\n<li>testing.git (測試用專案)</li>\n</ul>\n<p><a name=\"建立專案\"></a></p>\n<h3 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h3><p>因為gitolite的專案管理，是透過在主專案(gitolite-admin.git)裡，改寫 config 檔案來設定，所以需要以管理者帳號</p>\n<p>(剛剛使用 git 帳號，因為產生的 admin.pub，被設定為 gitolite 管理者的認證)</p>\n<ul>\n<li>ssh 連線到 Server 上</li>\n<li>su - git (切換到 git user，以下動作以 git 權限操作)</li>\n<li>抓主專案來修改設定</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@localhost:gitolite-admin.git</div><div class=\"line\"><span class=\"built_in\">cd</span> gitolite-admin/</div><div class=\"line\">vim conf/gitolite.conf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># sample：增加一個名為 ios_test 的專案,</span></div><div class=\"line\"><span class=\"comment\"># 並設定 esu 為可存取的使用者</span></div><div class=\"line\"><span class=\"comment\"># soar 為可讀，加入以下幾行到conf 檔中</span></div><div class=\"line\"></div><div class=\"line\">repo    ios_test</div><div class=\"line\">        RW      =   esu</div><div class=\"line\">        R       =   soar</div></pre></td></tr></table></figure>\n<ul>\n<li>修改完畢後，以一般 git 上 code 的流程處理</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"add new project\"</span></div><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<ul>\n<li>順利的話，可以看到畫面上出現，建立 project 的訊息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">Counting objects: 7, done.</div><div class=\"line\">Delta compression using up to 4 threads.</div><div class=\"line\">Compressing objects: 100% (3/3), done.</div><div class=\"line\">Writing objects: 100% (4/4), 423 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 4 (delta 1), reused 0 (delta 0)</div><div class=\"line\">remote: creating ios_test...</div><div class=\"line\">remote: Initialized empty Git repository <span class=\"keyword\">in</span> /home/git/repositories/ios_test.git/</div><div class=\"line\">remote:</div><div class=\"line\">To git@localhost:gitolite-admin.git</div><div class=\"line\">   a37d282..62dffa9  master -&gt; master</div></pre></td></tr></table></figure>\n<p><a name=\"加入開發人員\"></a></p>\n<h3 id=\"加入開發人員\"><a href=\"#加入開發人員\" class=\"headerlink\" title=\"加入開發人員\"></a>加入開發人員</h3><p><strong>在主專案中，加入開發人員的 public key 檔</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh 連線到 Server 上</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 切換到 git user</span></div><div class=\"line\">su - git</div><div class=\"line\"><span class=\"built_in\">cd</span> gitolite-admin/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 將之前收集的 pub 檔，複製到 keydir 目錄下</span></div><div class=\"line\">cp -r /tmp/*.pub keydir/</div><div class=\"line\">git add -A</div><div class=\"line\">git commit -m <span class=\"string\">\"add developer public key\"</span></div><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<p><a name=\"安裝-gitweb-並整合-gitolite\"></a></p>\n<h1 id=\"安裝-Gitweb-並整合-Gitolite\"><a href=\"#安裝-Gitweb-並整合-Gitolite\" class=\"headerlink\" title=\"安裝 Gitweb 並整合 Gitolite\"></a>安裝 Gitweb 並整合 Gitolite</h1><p><a href=\"https://ubuntuforums.org/showthread.php?t=2244960\" target=\"_blank\" rel=\"external\">參考資料</a></p>\n<p><a name=\"系統套件安裝-2\"></a></p>\n<h2 id=\"系統套件安裝-2\"><a href=\"#系統套件安裝-2\" class=\"headerlink\" title=\"系統套件安裝\"></a>系統套件安裝</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install gitweb apache2</div><div class=\"line\">sudo usermod <span class=\"_\">-a</span> G git www-data</div><div class=\"line\"><span class=\"comment\"># 將 www-data 使用者加入 git group</span></div></pre></td></tr></table></figure>\n<p><a name=\"apache-24-與-gitweb-設定\"></a></p>\n<h2 id=\"Apache-2-4-與-Gitweb-設定\"><a href=\"#Apache-2-4-與-Gitweb-設定\" class=\"headerlink\" title=\"Apache 2.4 與 Gitweb 設定\"></a>Apache 2.4 與 Gitweb 設定</h2><p>gitweb 安裝後，產生的設定是 Apache 2.2 的設定寫法，所以在2.4版需要做些修正</p>\n<ul>\n<li>調整 gitweb 設定檔位置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo cp /etc/apache2/conf.d/gitweb /etc/apache2/conf-available/gitweb.conf</div><div class=\"line\"><span class=\"built_in\">cd</span> /etc/apache2/conf-enabled</div><div class=\"line\">sudo ln <span class=\"_\">-s</span> ../conf-available/gitweb.conf</div></pre></td></tr></table></figure>\n<ul>\n<li>修正 gitweb conf 內容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/apache2/conf-enabled/gitweb.conf</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Alias /gitweb /usr/share/gitweb</div><div class=\"line\"></div><div class=\"line\">&lt;Directory /usr/share/gitweb&gt;</div><div class=\"line\">  Options +FollowSymLinks +ExecCGI</div><div class=\"line\">  AddHandler cgi-script .cgi</div><div class=\"line\">&lt;/Directory&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>Apache 載入 cgi model <code>sudo a2enmod cgi</code></li>\n<li>重啟 Apache Server <code>sudo service apache2 restart</code></li>\n</ul>\n<p><a name=\"修正-gitweb-conf\"></a></p>\n<h2 id=\"修正-Gitweb-conf\"><a href=\"#修正-Gitweb-conf\" class=\"headerlink\" title=\"修正 Gitweb conf\"></a>修正 Gitweb conf</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/gitweb.conf</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$projectroot</span> = <span class=\"string\">\"/home/git/repositories\"</span>;</div><div class=\"line\"><span class=\"comment\"># Syntax highlighting</span></div><div class=\"line\"><span class=\"variable\">$feature</span>&#123;<span class=\"string\">'highlight'</span>&#125;&#123;<span class=\"string\">'default'</span>&#125; = [1];</div><div class=\"line\"><span class=\"comment\"># 提供系統 loadavg check，若系統繁忙，逛 gitweb 只會看到 503 - The load average on the server is too high 訊息</span></div><div class=\"line\"><span class=\"variable\">$masload</span> = 500;</div><div class=\"line\"><span class=\"variable\">$projects_list</span> = <span class=\"variable\">$projectroot</span>; <span class=\"comment\"># unmark this line</span></div></pre></td></tr></table></figure>\n<p><a name=\"修正-gitolite-部分\"></a></p>\n<h2 id=\"修正-Gitolite-部分\"><a href=\"#修正-Gitolite-部分\" class=\"headerlink\" title=\"修正 Gitolite 部分\"></a>修正 Gitolite 部分</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li>su - git (切換到 git user)</li>\n<li><code>vim .gitolite.rc</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$REPO_UMASK</span> = 0027; <span class=\"comment\"># change this value</span></div><div class=\"line\"><span class=\"variable\">$WEB_INTERFACE</span> = <span class=\"string\">\"gitweb”;  # unmark this line</span></div><div class=\"line\"><span class=\"variable\">$GL_GITCONFIG_KEYS</span> = \"gitweb.owner gitweb.description .*”;   <span class=\"comment\"># change this value</span></div></pre></td></tr></table></figure>\n<p><a name=\"建立專案設定檔修改部分\"></a></p>\n<h2 id=\"建立專案設定檔修改部分\"><a href=\"#建立專案設定檔修改部分\" class=\"headerlink\" title=\"建立專案設定檔修改部分\"></a>建立專案設定檔修改部分</h2><p><em>gitolite-admin/conf/gitolite.conf</em></p>\n<ul>\n<li>將所有專案加入 gitweb 與 daemon 兩個帳戶的讀取權限，才能讓 gitweb 讀取到專案資料</li>\n<li>原有的專案可以添加一些資訊，來透過 gitweb 顯示出來</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 加入部分</span></div><div class=\"line\">repo    @all</div><div class=\"line\">        R       =   gitweb daemon</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 專案描述部份</span></div><div class=\"line\">repo    testing</div><div class=\"line\">        RW+     =   @all</div><div class=\"line\">    config gitweb.owner         = <span class=\"string\">\"Sagacity Tech. Co., Ltd.\"</span></div><div class=\"line\">    config gitweb.description   = <span class=\"string\">\"This is test repository\"</span></div><div class=\"line\">    config gitweb.url           = git@&lt;IP or 網址&gt;:testing.git</div></pre></td></tr></table></figure>\n<ul>\n<li>檢查 repositories 目錄權限可被讀取</li>\n<li><code>sudo service apache2 restart</code> (重啟 Apache)</li>\n<li>連線到 <a href=\"http://IP\" target=\"_blank\" rel=\"external\">http://IP</a> or 網址/gitweb</li>\n</ul>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#在-linux-環境下架設-git-server\">在 Linux 環境下架設 Git Server</a><ul>\n<li><a href=\"#系統套件安裝\">系統套件安裝</a></li>\n<li><a href=\"#協同開發人員產生-ssh-public-key\">協同開發人員產生 SSH public key</a></li>\n<li><a href=\"#git-server-的設定\">Git Server 的設定</a></li>\n<li><a href=\"#建立-git-repository\">建立 Git Repository</a></li>\n<li><a href=\"#開發人員-clone-程式碼\">開發人員 clone 程式碼</a></li>\n</ul>\n</li>\n<li><a href=\"#使用-gitolite-管理-git-server\">使用 Gitolite 管理 Git Server</a><ul>\n<li><a href=\"#系統套件安裝-1\">系統套件安裝</a></li>\n<li><a href=\"#產生收集-ssh-public-key\">產生/收集 SSH Public Key</a></li>\n<li><a href=\"#gitolite-server-架設\">Gitolite Server 架設</a><ul>\n<li><a href=\"#建立專案\">建立專案</a></li>\n<li><a href=\"#加入開發人員\">加入開發人員</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#安裝-gitweb-並整合-gitolite\">安裝 Gitweb 並整合 Gitolite</a><ul>\n<li><a href=\"#系統套件安裝-2\">系統套件安裝</a></li>\n<li><a href=\"#apache-24-與-gitweb-設定\">Apache 2.4 與 Gitweb 設定</a></li>\n<li><a href=\"#修正-gitweb-conf\">修正 Gitweb conf</a></li>\n<li><a href=\"#修正-gitolite-部分\">修正 Gitolite 部分</a></li>\n<li><a href=\"#建立專案設定檔修改部分\">建立專案設定檔修改部分</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"在-linux-環境下架設-git-server\"></a></p>\n<h1 id=\"在-Linux-環境下架設-Git-Server\"><a href=\"#在-Linux-環境下架設-Git-Server\" class=\"headerlink\" title=\"在 Linux 環境下架設 Git Server\"></a>在 Linux 環境下架設 Git Server</h1><p><a href=\"https://blog.longwin.com.tw/2011/03/build-git-env-share-over-ssh-2011/\">參考資料</a><br><a name=\"系統套件安裝\"></a></p>\n<h2 id=\"系統套件安裝\"><a href=\"#系統套件安裝\" class=\"headerlink\" title=\"系統套件安裝\"></a>系統套件安裝</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"_\">-s</span> (切換帳號為root)</div><div class=\"line\">apt-get install git git-core</div></pre></td></tr></table></figure>\n<p><a name=\"協同開發人員產生-ssh-public-key\"></a></p>\n<h2 id=\"協同開發人員產生-SSH-public-key\"><a href=\"#協同開發人員產生-SSH-public-key\" class=\"headerlink\" title=\"協同開發人員產生 SSH public key\"></a>協同開發人員產生 SSH public key</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir .ssh</div><div class=\"line\"><span class=\"built_in\">cd</span> .ssh</div><div class=\"line\">ssh-keygen</div><div class=\"line\">cat ~/.ssh/id_rsa.pub</div><div class=\"line\"><span class=\"comment\">#或上傳到 Server /tmp/目錄下統一保存</span></div></pre></td></tr></table></figure>\n<p><a name=\"git-server-的設定\"></a></p>\n<h2 id=\"Git-Server-的設定\"><a href=\"#Git-Server-的設定\" class=\"headerlink\" title=\"Git Server 的設定\"></a>Git Server 的設定</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li><code>sudo -s</code> (切換帳號為root)</li>\n<li><code>useradd -s /bin/bash -m -d /home/git git</code> (建立名為 git 的使用者)</li>\n<li><code>passwd git</code> (替 git 建立密碼，與開啟 sudoer 權限)</li>\n<li><code>visudo</code></li>\n<li><code>su - git</code> (切換到 git user，以下動作以 git 權限操作)</li>\n<li><p>將開發人員的 public key 加入認證檔</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">cat /tmp/user1.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class=\"line\">cat /tmp/user2.pub &gt;&gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a name=\"建立-git-repository\"></a></p>\n<h2 id=\"建立-Git-Repository\"><a href=\"#建立-Git-Repository\" class=\"headerlink\" title=\"建立 Git Repository\"></a>建立 Git Repository</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li>切換到 git user，以下動作以 git 權限操作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">su git</div><div class=\"line\">mkdir -p ~/project_name.git</div><div class=\"line\"><span class=\"built_in\">cd</span> ~/project_name.git</div><div class=\"line\">git init --bare --shared</div></pre></td></tr></table></figure>\n<p><a name=\"開發人員-clone-程式碼\"></a></p>\n<h2 id=\"開發人員-clone-程式碼\"><a href=\"#開發人員-clone-程式碼\" class=\"headerlink\" title=\"開發人員 clone 程式碼\"></a>開發人員 clone 程式碼</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@&lt;網址 or IP&gt;:/home/git/project_name.git</div></pre></td></tr></table></figure>\n<p>以上作法是最基本的以 git 帳號來建立 Git Server，優點是適合人少的專案，架設步驟簡單快速；缺點是無法針對不同專案給予不同開發者存取權限，所以需要往下一步</p>\n<p><a name=\"使用-gitolite-管理-git-server\"></a></p>\n<h1 id=\"使用-Gitolite-管理-Git-Server\"><a href=\"#使用-Gitolite-管理-Git-Server\" class=\"headerlink\" title=\"使用 Gitolite 管理 Git Server\"></a>使用 Gitolite 管理 Git Server</h1><p><a href=\"https://blog.longwin.com.tw/2011/03/linux-gitolite-git-server-2011/\">參考資料一</a>　<br><a href=\"http://blog.changyy.org/2012/09/linux-git-gitolite-gitweb-git-server.html\">參考資料二</a></p>\n<p><a name=\"系統套件安裝-1\"></a></p>\n<h2 id=\"系統套件安裝-1\"><a href=\"#系統套件安裝-1\" class=\"headerlink\" title=\"系統套件安裝\"></a>系統套件安裝</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">apt-get install gitolite</div></pre></td></tr></table></figure>\n<p><a name=\"產生收集-ssh-public-key\"></a></p>\n<h2 id=\"產生-收集-SSH-Public-Key\"><a href=\"#產生-收集-SSH-Public-Key\" class=\"headerlink\" title=\"產生/收集 SSH Public Key\"></a>產生/收集 SSH Public Key</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li>su - git (切換到 git user，以下動作以 git 權限操作)</li>\n<li>cd .ssh (若沒有該目錄，請先自行建立)</li>\n<li>ssh-keygen -t rsa -f admin (產生名為 admin 的 public key)</li>\n<li>請所有人將各自的 public key 放到 /tmp/ 下，並且已各自名稱命名 (e.g. alex.pub, ben.pub, john.pub …)</li>\n</ul>\n<p><a name=\"gitolite-server-架設\"></a></p>\n<h2 id=\"Gitolite-Server-架設\"><a href=\"#Gitolite-Server-架設\" class=\"headerlink\" title=\"Gitolite Server 架設\"></a>Gitolite Server 架設</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li>su - git (切換到 git user，以下動作以 git 權限操作)</li>\n<li>gl-setup ~/.ssh/admin.pub (匯入管理者的Public key)</li>\n</ul>\n<p>目錄結構如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .gitolite/</div><div class=\"line\">├── .gitolite.rc</div><div class=\"line\">├── repositories/</div><div class=\"line\">│   ├── gitolite-admin.git</div><div class=\"line\">│   └── testing.git</div><div class=\"line\">├── .ssh</div><div class=\"line\">├── .vim</div><div class=\"line\">└── .vimrc</div></pre></td></tr></table></figure>\n<p><strong>這時 git 帳號的 $HOME(家目錄)下，會產生</strong></p>\n<ul>\n<li>.gitolite/ 目錄</li>\n<li>.gitolite.rc 設定檔</li>\n<li>repositories/ 目錄</li>\n</ul>\n<p><strong>repositories 目錄下，有兩個專案</strong></p>\n<ul>\n<li>gitolite-admin.git (用來管理所有專案的主要專案)</li>\n<li>testing.git (測試用專案)</li>\n</ul>\n<p><a name=\"建立專案\"></a></p>\n<h3 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h3><p>因為gitolite的專案管理，是透過在主專案(gitolite-admin.git)裡，改寫 config 檔案來設定，所以需要以管理者帳號</p>\n<p>(剛剛使用 git 帳號，因為產生的 admin.pub，被設定為 gitolite 管理者的認證)</p>\n<ul>\n<li>ssh 連線到 Server 上</li>\n<li>su - git (切換到 git user，以下動作以 git 權限操作)</li>\n<li>抓主專案來修改設定</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@localhost:gitolite-admin.git</div><div class=\"line\"><span class=\"built_in\">cd</span> gitolite-admin/</div><div class=\"line\">vim conf/gitolite.conf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># sample：增加一個名為 ios_test 的專案,</span></div><div class=\"line\"><span class=\"comment\"># 並設定 esu 為可存取的使用者</span></div><div class=\"line\"><span class=\"comment\"># soar 為可讀，加入以下幾行到conf 檔中</span></div><div class=\"line\"></div><div class=\"line\">repo    ios_test</div><div class=\"line\">        RW      =   esu</div><div class=\"line\">        R       =   soar</div></pre></td></tr></table></figure>\n<ul>\n<li>修改完畢後，以一般 git 上 code 的流程處理</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"add new project\"</span></div><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<ul>\n<li>順利的話，可以看到畫面上出現，建立 project 的訊息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">Counting objects: 7, done.</div><div class=\"line\">Delta compression using up to 4 threads.</div><div class=\"line\">Compressing objects: 100% (3/3), done.</div><div class=\"line\">Writing objects: 100% (4/4), 423 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 4 (delta 1), reused 0 (delta 0)</div><div class=\"line\">remote: creating ios_test...</div><div class=\"line\">remote: Initialized empty Git repository <span class=\"keyword\">in</span> /home/git/repositories/ios_test.git/</div><div class=\"line\">remote:</div><div class=\"line\">To git@localhost:gitolite-admin.git</div><div class=\"line\">   a37d282..62dffa9  master -&gt; master</div></pre></td></tr></table></figure>\n<p><a name=\"加入開發人員\"></a></p>\n<h3 id=\"加入開發人員\"><a href=\"#加入開發人員\" class=\"headerlink\" title=\"加入開發人員\"></a>加入開發人員</h3><p><strong>在主專案中，加入開發人員的 public key 檔</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh 連線到 Server 上</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 切換到 git user</span></div><div class=\"line\">su - git</div><div class=\"line\"><span class=\"built_in\">cd</span> gitolite-admin/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 將之前收集的 pub 檔，複製到 keydir 目錄下</span></div><div class=\"line\">cp -r /tmp/*.pub keydir/</div><div class=\"line\">git add -A</div><div class=\"line\">git commit -m <span class=\"string\">\"add developer public key\"</span></div><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<p><a name=\"安裝-gitweb-並整合-gitolite\"></a></p>\n<h1 id=\"安裝-Gitweb-並整合-Gitolite\"><a href=\"#安裝-Gitweb-並整合-Gitolite\" class=\"headerlink\" title=\"安裝 Gitweb 並整合 Gitolite\"></a>安裝 Gitweb 並整合 Gitolite</h1><p><a href=\"https://ubuntuforums.org/showthread.php?t=2244960\">參考資料</a></p>\n<p><a name=\"系統套件安裝-2\"></a></p>\n<h2 id=\"系統套件安裝-2\"><a href=\"#系統套件安裝-2\" class=\"headerlink\" title=\"系統套件安裝\"></a>系統套件安裝</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install gitweb apache2</div><div class=\"line\">sudo usermod <span class=\"_\">-a</span> G git www-data</div><div class=\"line\"><span class=\"comment\"># 將 www-data 使用者加入 git group</span></div></pre></td></tr></table></figure>\n<p><a name=\"apache-24-與-gitweb-設定\"></a></p>\n<h2 id=\"Apache-2-4-與-Gitweb-設定\"><a href=\"#Apache-2-4-與-Gitweb-設定\" class=\"headerlink\" title=\"Apache 2.4 與 Gitweb 設定\"></a>Apache 2.4 與 Gitweb 設定</h2><p>gitweb 安裝後，產生的設定是 Apache 2.2 的設定寫法，所以在2.4版需要做些修正</p>\n<ul>\n<li>調整 gitweb 設定檔位置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo cp /etc/apache2/conf.d/gitweb /etc/apache2/conf-available/gitweb.conf</div><div class=\"line\"><span class=\"built_in\">cd</span> /etc/apache2/conf-enabled</div><div class=\"line\">sudo ln <span class=\"_\">-s</span> ../conf-available/gitweb.conf</div></pre></td></tr></table></figure>\n<ul>\n<li>修正 gitweb conf 內容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/apache2/conf-enabled/gitweb.conf</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Alias /gitweb /usr/share/gitweb</div><div class=\"line\"></div><div class=\"line\">&lt;Directory /usr/share/gitweb&gt;</div><div class=\"line\">  Options +FollowSymLinks +ExecCGI</div><div class=\"line\">  AddHandler cgi-script .cgi</div><div class=\"line\">&lt;/Directory&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>Apache 載入 cgi model <code>sudo a2enmod cgi</code></li>\n<li>重啟 Apache Server <code>sudo service apache2 restart</code></li>\n</ul>\n<p><a name=\"修正-gitweb-conf\"></a></p>\n<h2 id=\"修正-Gitweb-conf\"><a href=\"#修正-Gitweb-conf\" class=\"headerlink\" title=\"修正 Gitweb conf\"></a>修正 Gitweb conf</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/gitweb.conf</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$projectroot</span> = <span class=\"string\">\"/home/git/repositories\"</span>;</div><div class=\"line\"><span class=\"comment\"># Syntax highlighting</span></div><div class=\"line\"><span class=\"variable\">$feature</span>&#123;<span class=\"string\">'highlight'</span>&#125;&#123;<span class=\"string\">'default'</span>&#125; = [1];</div><div class=\"line\"><span class=\"comment\"># 提供系統 loadavg check，若系統繁忙，逛 gitweb 只會看到 503 - The load average on the server is too high 訊息</span></div><div class=\"line\"><span class=\"variable\">$masload</span> = 500;</div><div class=\"line\"><span class=\"variable\">$projects_list</span> = <span class=\"variable\">$projectroot</span>; <span class=\"comment\"># unmark this line</span></div></pre></td></tr></table></figure>\n<p><a name=\"修正-gitolite-部分\"></a></p>\n<h2 id=\"修正-Gitolite-部分\"><a href=\"#修正-Gitolite-部分\" class=\"headerlink\" title=\"修正 Gitolite 部分\"></a>修正 Gitolite 部分</h2><ul>\n<li>ssh 連線到 Server 上</li>\n<li>su - git (切換到 git user)</li>\n<li><code>vim .gitolite.rc</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$REPO_UMASK</span> = 0027; <span class=\"comment\"># change this value</span></div><div class=\"line\"><span class=\"variable\">$WEB_INTERFACE</span> = <span class=\"string\">\"gitweb”;  # unmark this line</div><div class=\"line\"><span class=\"variable\">$GL_GITCONFIG_KEYS</span> = \"</span>gitweb.owner gitweb.description .*”;   <span class=\"comment\"># change this value</span></div></pre></td></tr></table></figure>\n<p><a name=\"建立專案設定檔修改部分\"></a></p>\n<h2 id=\"建立專案設定檔修改部分\"><a href=\"#建立專案設定檔修改部分\" class=\"headerlink\" title=\"建立專案設定檔修改部分\"></a>建立專案設定檔修改部分</h2><p><em>gitolite-admin/conf/gitolite.conf</em></p>\n<ul>\n<li>將所有專案加入 gitweb 與 daemon 兩個帳戶的讀取權限，才能讓 gitweb 讀取到專案資料</li>\n<li>原有的專案可以添加一些資訊，來透過 gitweb 顯示出來</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 加入部分</span></div><div class=\"line\">repo    @all</div><div class=\"line\">        R       =   gitweb daemon</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 專案描述部份</span></div><div class=\"line\">repo    testing</div><div class=\"line\">        RW+     =   @all</div><div class=\"line\">    config gitweb.owner         = <span class=\"string\">\"Sagacity Tech. Co., Ltd.\"</span></div><div class=\"line\">    config gitweb.description   = <span class=\"string\">\"This is test repository\"</span></div><div class=\"line\">    config gitweb.url           = git@&lt;IP or 網址&gt;:testing.git</div></pre></td></tr></table></figure>\n<ul>\n<li>檢查 repositories 目錄權限可被讀取</li>\n<li><code>sudo service apache2 restart</code> (重啟 Apache)</li>\n<li>連線到 <a href=\"http://IP\">http://IP</a> or 網址/gitweb</li>\n</ul>\n"},{"layout":"post","title":"Webpack Note","author":"Soar Lin","cdn":"header-off","header-img":"","date":"2016-09-04T02:52:31.000Z","_content":"\n<!-- MarkdownTOC -->\n\n- [Webpack Note](#webpack-note)\n  - [npm 安裝套件](#npm-安裝套件)\n  - [npm 的 packages.json](#npm-的-packagesjson)\n  - [webpack.confing.js](#webpackconfingjs)\n  - [webpack Product vs Developer](#webpack-product-vs-developer)\n  - [Config 檔內使用 path 套件](#config-檔內使用-path-套件)\n  - [多個 bundles 檔案封裝](#多個-bundles-檔案封裝)\n  - [載入 CSS](#載入-css)\n    - [分離出 CSS 檔案](#分離出-css-檔案)\n    - [Auto Prefixer](#auto-prefixer)\n  - [加入圖片](#加入圖片)\n  - [Webpack build with React](#webpack-build-with-react)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"webpack-note\"></a>\n# Webpack Note\n\n<a name=\"npm-安裝套件\"></a>\n## npm 安裝套件\n\n* webpack, webpack-dev-server\n* babel-core, babel-loader\n* jshint, jshint-loader : JS 語法檢查，後續再研究如何替換成 eslint\n* node-libs-browser : unknow\n* strip-loader : 可用於 production 情況下，將 console.log 的訊息忽略掉\n* css-loader, style-loader, (sass-loader), less-loader\n\n<a name=\"npm-的-packagesjson\"></a>\n## npm 的 packages.json\n\n* 修改 scripts 內容\n  * `\"start\": \"webpack-dev-server\"`\n  * 接著回到 command line\n  * 輸入 `npm start`, 開始執行 webpack-dev-server 的指令\n\n<a name=\"webpackconfingjs\"></a>\n## webpack.confing.js\n\n* devtool : 產生 source-map 方便開發中除錯\n* entry 可以用陣列傳入多個js檔\n    * 也可以用 object 得方式建立多個 key: value\n* output is objects\n* module is objects\n  * loaders is object array, each loader setting is object\n    * test 是正規表示式\n    * exclude 略過不處理的目錄(以設定檔為起始路徑)\n    * loader 使用的 loader\n    * 搭配 resolve 來擴充讀取的副檔名\n      * extensions is 副檔名陣列\n  * preLoaders is object array, each pre-loader setting is object\n    * test 正規表示式\n    * exclude 略過不處理的目錄(以設定檔為起始路徑)\n    * loader loader名稱\n\n````javascript\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry: ['./utils', '/app.js'],\n  output: {\n    filename: \"bundle.js\"\n  },\n  module: {\n    preLoaders: [\n      {\n        test: /\\.js$/,\n        exclude: 'node_modules',\n        loader: 'jshint-loader'\n      }\n    ],\n    loaders: [\n      {\n        test: /\\.es6$/,\n        exclude: /node_moduel/,\n        loader: \"babel-loader\"\n      }\n    ]\n  }\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.es6']\n  }\n}\n````\n\n\n<a name=\"webpack-product-vs-developer\"></a>\n## webpack Product vs Developer\n\n* webpack -p : product 模式，輸出檔案壓縮最佳化\n  * 可使用另一個 config 檔案, webpack-production.config.js\n  * `webpack --config webpack-production.config.js -p`\n\n````javascript\nvar WebpackStrip = require('strip-loader');\nvar devConfig = require('./webpack.config.js');\nvar stripLoader = {\n  test: [/\\.js$/, /\\.es6$/],\n  exclude: /node_modules/,\n  loader: WebpackStrip.loader('console.log');\n}\ndevConfig.module.loaders.push(stripLoader);\nmodule.exports = devConfig;\n````\n\n<a name=\"config-檔內使用-path-套件\"></a>\n## Config 檔內使用 path 套件\n\n* 修改過得目錄結構\n![修改過得目錄結構](https://lh3.googleusercontent.com/-BDzL0Z2GWFM/VwPgLAZ7SEI/AAAAAAAAKsw/bjSuLLcV4NwyKYy-4EjCnhP3-1pYhb_hg/s0/path.JPG \"path.JPG\")\n\n````javascript\nvar path = require('path');\n\nmodule.exports = {\n  context: path.resolve('js');\n  entry: ['./utils', '/app.js'],\n  output: {\n    path: path.resolve('build/js/'),\n    publicPath: '/public/assets/js/',\n    filename: \"bundle.js\"\n  },\n\n  devServer: {\n    contentBase: 'public'\n  }\n\n  module: {\n    preLoaders: [\n      {\n        test: /\\.js$/,\n        exclude: 'node_modules',\n        loader: 'jshint-loader'\n      }\n    ],\n    loaders: [\n      {\n        test: /\\.es6$/,\n        exclude: /node_moduel/,\n        loader: \"babel-loader\"\n      }\n    ]\n  }\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.es6']\n  }\n}\n````\n\n<a name=\"多個-bundles-檔案封裝\"></a>\n## 多個 bundles 檔案封裝\n\n* 多個 js 檔與多個 html 頁面\n* <img src=\"https://i.imgur.com/p28LVfs.png\" width=\"200\">\n* 在 config 檔內使用 webpack 套件來載入共用 js 區塊\n    * `var commonsPlugin = new webpack.optimize.CommonsChunkPlugin('shared.js');`\n* entry 由原本陣列換成 objects 方式撰寫\n    * 使用 key : value 方式撰寫每個 html 頁面 entry 的 key\n    * output 的部分在 filename 將改成 `[name]` 的方式來依據 entry 內的 key 做輸出\n\n````javascript\nvar path = require('path');\nvar webpack = require('wabpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('shared.js');\n\nmodule.exports = {\n    context: path.resolve('js');\n    entry: {\n        about: './about_page.js',\n        home: './home_page.js',\n        contact: './contact_page.js'\n    },\n    output: {\n        path: path.resolve('build/js/'),\n        publicPath: 'public/assets/js/',\n        filename: \"[name].js\"\n    },\n    plugins: [commonsPlugin,\n    devServer: {\n        contentBase: 'public'\n    },\n    ......\n}\n````\n\n<a name=\"載入-css\"></a>\n## 載入 CSS\n\n* loader 載入順序：由右往左，以 less 那組為例\n    * less-loader -> css-loader -> style-loader 來處理\n* 需安裝 css-loader, style-loader 兩套件\n    * 使用 SASS，需要再安裝 sass-loader\n    * 使用 Less，需要再安裝 less-loader\n* 在 config 檔裡面，利用`!` 來將兩個 loader 連接\n* js 檔內使用`require('css-file-path');`的方式來載入 CSS (scss or less) 檔案\n    * 原本 html 頁面內的 head 裡面不需要另外寫 css 載入\n    * 可透過 html 頁面引入的 js 檔案內 require css 檔案自動在頁面載入時加載\n\n````javascript\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader\"\n            },\n            {\n                test: /\\.less$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader!less-loader\"\n            }\n        ]\n    }\n}\n````\n\n<a name=\"分離出-css-檔案\"></a>\n### 分離出 CSS 檔案\n* 讓 CSS 可放置在 head 標籤間被 include\n* `npm install extract-text-webpack-plugin --save-dev`\n* html 檔的 head tag 內加入\n    * `<link rel=\"stylesheet\" href=\"/public/assets/styles.css\">`\n* config 檔內需要引入 `extract-text-webpack-plugin` 套件\n* 改寫 loaders 的內容\n\n````javascript\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n    context: path.resolve('js');\n    entry: [\"./app\"];\n    output: {\n        path: path.resolve('build/'),\n        publicPath: 'public/assets/',\n        filename: \"bundle.js\"\n    }\n    plugins: [\n        new ExtractTextPlugin(\"styles.css\")\n    ],\n    devServer: {\n        contentBase: 'public'\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\")\n            },\n            {\n                test: /\\.less$/,\n                exclude: /node_modules/,\n                loader: ExtractTextPlugin.extract\"style-loader\", \"css-loader!less-loader\")\n            }\n        ]\n    }\n}\n````\n\n<a name=\"auto-prefixer\"></a>\n### Auto Prefixer\n* `npm install autoprefixer-loader --save-dev`\n* config 檔內的 loader 中，增加 autoprefixer-loader 在 css-loader 之後，less-loader 之前\n\n````javascript\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader!autoprefixer-loader\"\n            },\n            {\n                test: /\\.less$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader!autoprefixer-loader!less-loader\"\n            }\n        ]\n    }\n}\n````\n\n<a name=\"加入圖片\"></a>\n## 加入圖片\n\n* npm 安裝 `url-loader` 套件\n    * `npm install url-loader --save-dev`\n    * packages.json 內會增加 url-loader 與 file-loader 兩個套件\n* config 中增加 loader 設定至 loaders 內\n    * url-loader 加入 limit 限制圖片大小，限制內圖片被轉為 base64 編碼 inline 載入，超過限制以原本圖片載入\n\n````javascript\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader\"\n            },\n            {\n                test: /\\.(png|jpg)$/,\n                exclude: /node_modules/,\n                loader: \"url-loader?limit=100000\"\n            }\n        ]\n    }\n}\n````\n\n````javascript\napp.js\n\nvar img = document.createElement('img');\nimg.style.height = \"25%\";\nimg.style.width = \"25%\";\nimg.src = require('../images/webpack_logo.png');\n\ndocument.getElelentById('img_container').appendChild(img);\n````\n\n<a name=\"webpack-build-with-react\"></a>\n## Webpack build with React\n\n * 安裝套件\n     * react, babel-preset-es2015, babel-preset-react\n * 增加 .babelrc 設定檔\n\n ````\n {\n     \"presets\" : [\"es2015\", \"react\"]\n }\n ````\n * 或直接寫在原本得 config.js 檔裡面\n\n ````javascript\n module.exports = {\n  entry: ['/app'],\n  output: {\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.es6$/,\n        exclude: /node_moduel/,\n        loader: \"babel-loader\",\n        query: {\n          \"presets\" : [\"es2015\", \"react\"]\n        }\n      }\n    ]\n  }\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.es6']\n  }\n}\n````","source":"_posts/Webpack-Note.md","raw":"---\nlayout: post\ntitle: Webpack Note\nauthor: Soar Lin\ncdn: header-off\nheader-img: ''\ndate: 2016-09-04 10:52:31\ncategories:\n - Frontend\ntags:\n - webpack\n - npm\n---\n\n<!-- MarkdownTOC -->\n\n- [Webpack Note](#webpack-note)\n  - [npm 安裝套件](#npm-安裝套件)\n  - [npm 的 packages.json](#npm-的-packagesjson)\n  - [webpack.confing.js](#webpackconfingjs)\n  - [webpack Product vs Developer](#webpack-product-vs-developer)\n  - [Config 檔內使用 path 套件](#config-檔內使用-path-套件)\n  - [多個 bundles 檔案封裝](#多個-bundles-檔案封裝)\n  - [載入 CSS](#載入-css)\n    - [分離出 CSS 檔案](#分離出-css-檔案)\n    - [Auto Prefixer](#auto-prefixer)\n  - [加入圖片](#加入圖片)\n  - [Webpack build with React](#webpack-build-with-react)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"webpack-note\"></a>\n# Webpack Note\n\n<a name=\"npm-安裝套件\"></a>\n## npm 安裝套件\n\n* webpack, webpack-dev-server\n* babel-core, babel-loader\n* jshint, jshint-loader : JS 語法檢查，後續再研究如何替換成 eslint\n* node-libs-browser : unknow\n* strip-loader : 可用於 production 情況下，將 console.log 的訊息忽略掉\n* css-loader, style-loader, (sass-loader), less-loader\n\n<a name=\"npm-的-packagesjson\"></a>\n## npm 的 packages.json\n\n* 修改 scripts 內容\n  * `\"start\": \"webpack-dev-server\"`\n  * 接著回到 command line\n  * 輸入 `npm start`, 開始執行 webpack-dev-server 的指令\n\n<a name=\"webpackconfingjs\"></a>\n## webpack.confing.js\n\n* devtool : 產生 source-map 方便開發中除錯\n* entry 可以用陣列傳入多個js檔\n    * 也可以用 object 得方式建立多個 key: value\n* output is objects\n* module is objects\n  * loaders is object array, each loader setting is object\n    * test 是正規表示式\n    * exclude 略過不處理的目錄(以設定檔為起始路徑)\n    * loader 使用的 loader\n    * 搭配 resolve 來擴充讀取的副檔名\n      * extensions is 副檔名陣列\n  * preLoaders is object array, each pre-loader setting is object\n    * test 正規表示式\n    * exclude 略過不處理的目錄(以設定檔為起始路徑)\n    * loader loader名稱\n\n````javascript\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry: ['./utils', '/app.js'],\n  output: {\n    filename: \"bundle.js\"\n  },\n  module: {\n    preLoaders: [\n      {\n        test: /\\.js$/,\n        exclude: 'node_modules',\n        loader: 'jshint-loader'\n      }\n    ],\n    loaders: [\n      {\n        test: /\\.es6$/,\n        exclude: /node_moduel/,\n        loader: \"babel-loader\"\n      }\n    ]\n  }\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.es6']\n  }\n}\n````\n\n\n<a name=\"webpack-product-vs-developer\"></a>\n## webpack Product vs Developer\n\n* webpack -p : product 模式，輸出檔案壓縮最佳化\n  * 可使用另一個 config 檔案, webpack-production.config.js\n  * `webpack --config webpack-production.config.js -p`\n\n````javascript\nvar WebpackStrip = require('strip-loader');\nvar devConfig = require('./webpack.config.js');\nvar stripLoader = {\n  test: [/\\.js$/, /\\.es6$/],\n  exclude: /node_modules/,\n  loader: WebpackStrip.loader('console.log');\n}\ndevConfig.module.loaders.push(stripLoader);\nmodule.exports = devConfig;\n````\n\n<a name=\"config-檔內使用-path-套件\"></a>\n## Config 檔內使用 path 套件\n\n* 修改過得目錄結構\n![修改過得目錄結構](https://lh3.googleusercontent.com/-BDzL0Z2GWFM/VwPgLAZ7SEI/AAAAAAAAKsw/bjSuLLcV4NwyKYy-4EjCnhP3-1pYhb_hg/s0/path.JPG \"path.JPG\")\n\n````javascript\nvar path = require('path');\n\nmodule.exports = {\n  context: path.resolve('js');\n  entry: ['./utils', '/app.js'],\n  output: {\n    path: path.resolve('build/js/'),\n    publicPath: '/public/assets/js/',\n    filename: \"bundle.js\"\n  },\n\n  devServer: {\n    contentBase: 'public'\n  }\n\n  module: {\n    preLoaders: [\n      {\n        test: /\\.js$/,\n        exclude: 'node_modules',\n        loader: 'jshint-loader'\n      }\n    ],\n    loaders: [\n      {\n        test: /\\.es6$/,\n        exclude: /node_moduel/,\n        loader: \"babel-loader\"\n      }\n    ]\n  }\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.es6']\n  }\n}\n````\n\n<a name=\"多個-bundles-檔案封裝\"></a>\n## 多個 bundles 檔案封裝\n\n* 多個 js 檔與多個 html 頁面\n* <img src=\"https://i.imgur.com/p28LVfs.png\" width=\"200\">\n* 在 config 檔內使用 webpack 套件來載入共用 js 區塊\n    * `var commonsPlugin = new webpack.optimize.CommonsChunkPlugin('shared.js');`\n* entry 由原本陣列換成 objects 方式撰寫\n    * 使用 key : value 方式撰寫每個 html 頁面 entry 的 key\n    * output 的部分在 filename 將改成 `[name]` 的方式來依據 entry 內的 key 做輸出\n\n````javascript\nvar path = require('path');\nvar webpack = require('wabpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('shared.js');\n\nmodule.exports = {\n    context: path.resolve('js');\n    entry: {\n        about: './about_page.js',\n        home: './home_page.js',\n        contact: './contact_page.js'\n    },\n    output: {\n        path: path.resolve('build/js/'),\n        publicPath: 'public/assets/js/',\n        filename: \"[name].js\"\n    },\n    plugins: [commonsPlugin,\n    devServer: {\n        contentBase: 'public'\n    },\n    ......\n}\n````\n\n<a name=\"載入-css\"></a>\n## 載入 CSS\n\n* loader 載入順序：由右往左，以 less 那組為例\n    * less-loader -> css-loader -> style-loader 來處理\n* 需安裝 css-loader, style-loader 兩套件\n    * 使用 SASS，需要再安裝 sass-loader\n    * 使用 Less，需要再安裝 less-loader\n* 在 config 檔裡面，利用`!` 來將兩個 loader 連接\n* js 檔內使用`require('css-file-path');`的方式來載入 CSS (scss or less) 檔案\n    * 原本 html 頁面內的 head 裡面不需要另外寫 css 載入\n    * 可透過 html 頁面引入的 js 檔案內 require css 檔案自動在頁面載入時加載\n\n````javascript\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader\"\n            },\n            {\n                test: /\\.less$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader!less-loader\"\n            }\n        ]\n    }\n}\n````\n\n<a name=\"分離出-css-檔案\"></a>\n### 分離出 CSS 檔案\n* 讓 CSS 可放置在 head 標籤間被 include\n* `npm install extract-text-webpack-plugin --save-dev`\n* html 檔的 head tag 內加入\n    * `<link rel=\"stylesheet\" href=\"/public/assets/styles.css\">`\n* config 檔內需要引入 `extract-text-webpack-plugin` 套件\n* 改寫 loaders 的內容\n\n````javascript\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n    context: path.resolve('js');\n    entry: [\"./app\"];\n    output: {\n        path: path.resolve('build/'),\n        publicPath: 'public/assets/',\n        filename: \"bundle.js\"\n    }\n    plugins: [\n        new ExtractTextPlugin(\"styles.css\")\n    ],\n    devServer: {\n        contentBase: 'public'\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\")\n            },\n            {\n                test: /\\.less$/,\n                exclude: /node_modules/,\n                loader: ExtractTextPlugin.extract\"style-loader\", \"css-loader!less-loader\")\n            }\n        ]\n    }\n}\n````\n\n<a name=\"auto-prefixer\"></a>\n### Auto Prefixer\n* `npm install autoprefixer-loader --save-dev`\n* config 檔內的 loader 中，增加 autoprefixer-loader 在 css-loader 之後，less-loader 之前\n\n````javascript\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader!autoprefixer-loader\"\n            },\n            {\n                test: /\\.less$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader!autoprefixer-loader!less-loader\"\n            }\n        ]\n    }\n}\n````\n\n<a name=\"加入圖片\"></a>\n## 加入圖片\n\n* npm 安裝 `url-loader` 套件\n    * `npm install url-loader --save-dev`\n    * packages.json 內會增加 url-loader 與 file-loader 兩個套件\n* config 中增加 loader 設定至 loaders 內\n    * url-loader 加入 limit 限制圖片大小，限制內圖片被轉為 base64 編碼 inline 載入，超過限制以原本圖片載入\n\n````javascript\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                loader: \"style-loader!css-loader\"\n            },\n            {\n                test: /\\.(png|jpg)$/,\n                exclude: /node_modules/,\n                loader: \"url-loader?limit=100000\"\n            }\n        ]\n    }\n}\n````\n\n````javascript\napp.js\n\nvar img = document.createElement('img');\nimg.style.height = \"25%\";\nimg.style.width = \"25%\";\nimg.src = require('../images/webpack_logo.png');\n\ndocument.getElelentById('img_container').appendChild(img);\n````\n\n<a name=\"webpack-build-with-react\"></a>\n## Webpack build with React\n\n * 安裝套件\n     * react, babel-preset-es2015, babel-preset-react\n * 增加 .babelrc 設定檔\n\n ````\n {\n     \"presets\" : [\"es2015\", \"react\"]\n }\n ````\n * 或直接寫在原本得 config.js 檔裡面\n\n ````javascript\n module.exports = {\n  entry: ['/app'],\n  output: {\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.es6$/,\n        exclude: /node_moduel/,\n        loader: \"babel-loader\",\n        query: {\n          \"presets\" : [\"es2015\", \"react\"]\n        }\n      }\n    ]\n  }\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.es6']\n  }\n}\n````","slug":"Webpack-Note","published":1,"updated":"2016-09-19T00:33:53.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gif000sscsckwik4edg","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#webpack-note\">Webpack Note</a><ul>\n<li><a href=\"#npm-安裝套件\">npm 安裝套件</a></li>\n<li><a href=\"#npm-的-packagesjson\">npm 的 packages.json</a></li>\n<li><a href=\"#webpackconfingjs\">webpack.confing.js</a></li>\n<li><a href=\"#webpack-product-vs-developer\">webpack Product vs Developer</a></li>\n<li><a href=\"#config-檔內使用-path-套件\">Config 檔內使用 path 套件</a></li>\n<li><a href=\"#多個-bundles-檔案封裝\">多個 bundles 檔案封裝</a></li>\n<li><a href=\"#載入-css\">載入 CSS</a><ul>\n<li><a href=\"#分離出-css-檔案\">分離出 CSS 檔案</a></li>\n<li><a href=\"#auto-prefixer\">Auto Prefixer</a></li>\n</ul>\n</li>\n<li><a href=\"#加入圖片\">加入圖片</a></li>\n<li><a href=\"#webpack-build-with-react\">Webpack build with React</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"webpack-note\"></a></p>\n<h1 id=\"Webpack-Note\"><a href=\"#Webpack-Note\" class=\"headerlink\" title=\"Webpack Note\"></a>Webpack Note</h1><p><a name=\"npm-安裝套件\"></a></p>\n<h2 id=\"npm-安裝套件\"><a href=\"#npm-安裝套件\" class=\"headerlink\" title=\"npm 安裝套件\"></a>npm 安裝套件</h2><ul>\n<li>webpack, webpack-dev-server</li>\n<li>babel-core, babel-loader</li>\n<li>jshint, jshint-loader : JS 語法檢查，後續再研究如何替換成 eslint</li>\n<li>node-libs-browser : unknow</li>\n<li>strip-loader : 可用於 production 情況下，將 console.log 的訊息忽略掉</li>\n<li>css-loader, style-loader, (sass-loader), less-loader</li>\n</ul>\n<p><a name=\"npm-的-packagesjson\"></a></p>\n<h2 id=\"npm-的-packages-json\"><a href=\"#npm-的-packages-json\" class=\"headerlink\" title=\"npm 的 packages.json\"></a>npm 的 packages.json</h2><ul>\n<li>修改 scripts 內容<ul>\n<li><code>&quot;start&quot;: &quot;webpack-dev-server&quot;</code></li>\n<li>接著回到 command line</li>\n<li>輸入 <code>npm start</code>, 開始執行 webpack-dev-server 的指令</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"webpackconfingjs\"></a></p>\n<h2 id=\"webpack-confing-js\"><a href=\"#webpack-confing-js\" class=\"headerlink\" title=\"webpack.confing.js\"></a>webpack.confing.js</h2><ul>\n<li>devtool : 產生 source-map 方便開發中除錯</li>\n<li>entry 可以用陣列傳入多個js檔<ul>\n<li>也可以用 object 得方式建立多個 key: value</li>\n</ul>\n</li>\n<li>output is objects</li>\n<li>module is objects<ul>\n<li>loaders is object array, each loader setting is object<ul>\n<li>test 是正規表示式</li>\n<li>exclude 略過不處理的目錄(以設定檔為起始路徑)</li>\n<li>loader 使用的 loader</li>\n<li>搭配 resolve 來擴充讀取的副檔名<ul>\n<li>extensions is 副檔名陣列</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>preLoaders is object array, each pre-loader setting is object<ul>\n<li>test 正規表示式</li>\n<li>exclude 略過不處理的目錄(以設定檔為起始路徑)</li>\n<li>loader loader名稱</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\">  entry: [<span class=\"string\">'./utils'</span>, <span class=\"string\">'/app.js'</span>],</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    preLoaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"string\">'node_modules'</span>,</div><div class=\"line\">        loader: <span class=\"string\">'jshint-loader'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.es6$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_moduel/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"babel-loader\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  resolve: &#123;</div><div class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.es6'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"webpack-product-vs-developer\"></a></p>\n<h2 id=\"webpack-Product-vs-Developer\"><a href=\"#webpack-Product-vs-Developer\" class=\"headerlink\" title=\"webpack Product vs Developer\"></a>webpack Product vs Developer</h2><ul>\n<li>webpack -p : product 模式，輸出檔案壓縮最佳化<ul>\n<li>可使用另一個 config 檔案, webpack-production.config.js</li>\n<li><code>webpack --config webpack-production.config.js -p</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> WebpackStrip = <span class=\"built_in\">require</span>(<span class=\"string\">'strip-loader'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> devConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> stripLoader = &#123;</div><div class=\"line\">  test: [<span class=\"regexp\">/\\.js$/</span>, <span class=\"regexp\">/\\.es6$/</span>],</div><div class=\"line\">  exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">  loader: WebpackStrip.loader(<span class=\"string\">'console.log'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">devConfig.module.loaders.push(stripLoader);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = devConfig;</div></pre></td></tr></table></figure>\n<p><a name=\"config-檔內使用-path-套件\"></a></p>\n<h2 id=\"Config-檔內使用-path-套件\"><a href=\"#Config-檔內使用-path-套件\" class=\"headerlink\" title=\"Config 檔內使用 path 套件\"></a>Config 檔內使用 path 套件</h2><ul>\n<li>修改過得目錄結構<br><img src=\"https://lh3.googleusercontent.com/-BDzL0Z2GWFM/VwPgLAZ7SEI/AAAAAAAAKsw/bjSuLLcV4NwyKYy-4EjCnhP3-1pYhb_hg/s0/path.JPG\" alt=\"修改過得目錄結構\" title=\"path.JPG\"></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  context: path.resolve(<span class=\"string\">'js'</span>);</div><div class=\"line\">  entry: [<span class=\"string\">'./utils'</span>, <span class=\"string\">'/app.js'</span>],</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.resolve(<span class=\"string\">'build/js/'</span>),</div><div class=\"line\">    publicPath: <span class=\"string\">'/public/assets/js/'</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: <span class=\"string\">'public'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    preLoaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"string\">'node_modules'</span>,</div><div class=\"line\">        loader: <span class=\"string\">'jshint-loader'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.es6$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_moduel/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"babel-loader\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  resolve: &#123;</div><div class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.es6'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"多個-bundles-檔案封裝\"></a></p>\n<h2 id=\"多個-bundles-檔案封裝\"><a href=\"#多個-bundles-檔案封裝\" class=\"headerlink\" title=\"多個 bundles 檔案封裝\"></a>多個 bundles 檔案封裝</h2><ul>\n<li>多個 js 檔與多個 html 頁面</li>\n<li><img src=\"https://i.imgur.com/p28LVfs.png\" width=\"200\"></li>\n<li>在 config 檔內使用 webpack 套件來載入共用 js 區塊<ul>\n<li><code>var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&#39;shared.js&#39;);</code></li>\n</ul>\n</li>\n<li>entry 由原本陣列換成 objects 方式撰寫<ul>\n<li>使用 key : value 方式撰寫每個 html 頁面 entry 的 key</li>\n<li>output 的部分在 filename 將改成 <code>[name]</code> 的方式來依據 entry 內的 key 做輸出</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'wabpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> commonsPlugin = <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'shared.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    context: path.resolve(<span class=\"string\">'js'</span>);</div><div class=\"line\">    entry: &#123;</div><div class=\"line\">        about: <span class=\"string\">'./about_page.js'</span>,</div><div class=\"line\">        home: <span class=\"string\">'./home_page.js'</span>,</div><div class=\"line\">        contact: <span class=\"string\">'./contact_page.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: path.resolve(<span class=\"string\">'build/js/'</span>),</div><div class=\"line\">        publicPath: <span class=\"string\">'public/assets/js/'</span>,</div><div class=\"line\">        filename: <span class=\"string\">\"[name].js\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    plugins: [commonsPlugin,</div><div class=\"line\">    devServer: &#123;</div><div class=\"line\">        contentBase: <span class=\"string\">'public'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"載入-css\"></a></p>\n<h2 id=\"載入-CSS\"><a href=\"#載入-CSS\" class=\"headerlink\" title=\"載入 CSS\"></a>載入 CSS</h2><ul>\n<li>loader 載入順序：由右往左，以 less 那組為例<ul>\n<li>less-loader -&gt; css-loader -&gt; style-loader 來處理</li>\n</ul>\n</li>\n<li>需安裝 css-loader, style-loader 兩套件<ul>\n<li>使用 SASS，需要再安裝 sass-loader</li>\n<li>使用 Less，需要再安裝 less-loader</li>\n</ul>\n</li>\n<li>在 config 檔裡面，利用<code>!</code> 來將兩個 loader 連接</li>\n<li>js 檔內使用<code>require(&#39;css-file-path&#39;);</code>的方式來載入 CSS (scss or less) 檔案<ul>\n<li>原本 html 頁面內的 head 裡面不需要另外寫 css 載入</li>\n<li>可透過 html 頁面引入的 js 檔案內 require css 檔案自動在頁面載入時加載</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader!less-loader\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"分離出-css-檔案\"></a></p>\n<h3 id=\"分離出-CSS-檔案\"><a href=\"#分離出-CSS-檔案\" class=\"headerlink\" title=\"分離出 CSS 檔案\"></a>分離出 CSS 檔案</h3><ul>\n<li>讓 CSS 可放置在 head 標籤間被 include</li>\n<li><code>npm install extract-text-webpack-plugin --save-dev</code></li>\n<li>html 檔的 head tag 內加入<ul>\n<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/public/assets/styles.css&quot;&gt;</code></li>\n</ul>\n</li>\n<li>config 檔內需要引入 <code>extract-text-webpack-plugin</code> 套件</li>\n<li>改寫 loaders 的內容</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    context: path.resolve(<span class=\"string\">'js'</span>);</div><div class=\"line\">    entry: [<span class=\"string\">\"./app\"</span>];</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: path.resolve(<span class=\"string\">'build/'</span>),</div><div class=\"line\">        publicPath: <span class=\"string\">'public/assets/'</span>,</div><div class=\"line\">        filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"styles.css\"</span>)</div><div class=\"line\">    ],</div><div class=\"line\">    devServer: &#123;</div><div class=\"line\">        contentBase: <span class=\"string\">'public'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: ExtractTextPlugin.extract<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader!less-loader\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"auto-prefixer\"></a></p>\n<h3 id=\"Auto-Prefixer\"><a href=\"#Auto-Prefixer\" class=\"headerlink\" title=\"Auto Prefixer\"></a>Auto Prefixer</h3><ul>\n<li><code>npm install autoprefixer-loader --save-dev</code></li>\n<li>config 檔內的 loader 中，增加 autoprefixer-loader 在 css-loader 之後，less-loader 之前</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader!autoprefixer-loader\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader!autoprefixer-loader!less-loader\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"加入圖片\"></a></p>\n<h2 id=\"加入圖片\"><a href=\"#加入圖片\" class=\"headerlink\" title=\"加入圖片\"></a>加入圖片</h2><ul>\n<li>npm 安裝 <code>url-loader</code> 套件<ul>\n<li><code>npm install url-loader --save-dev</code></li>\n<li>packages.json 內會增加 url-loader 與 file-loader 兩個套件</li>\n</ul>\n</li>\n<li>config 中增加 loader 設定至 loaders 內<ul>\n<li>url-loader 加入 limit 限制圖片大小，限制內圖片被轉為 base64 編碼 inline 載入，超過限制以原本圖片載入</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg)$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"url-loader?limit=100000\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">app.js</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">img.style.height = <span class=\"string\">\"25%\"</span>;</div><div class=\"line\">img.style.width = <span class=\"string\">\"25%\"</span>;</div><div class=\"line\">img.src = <span class=\"built_in\">require</span>(<span class=\"string\">'../images/webpack_logo.png'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElelentById(<span class=\"string\">'img_container'</span>).appendChild(img);</div></pre></td></tr></table></figure>\n<p><a name=\"webpack-build-with-react\"></a></p>\n<h2 id=\"Webpack-build-with-React\"><a href=\"#Webpack-build-with-React\" class=\"headerlink\" title=\"Webpack build with React\"></a>Webpack build with React</h2><ul>\n<li>安裝套件<ul>\n<li>react, babel-preset-es2015, babel-preset-react</li>\n</ul>\n</li>\n<li><p>增加 .babelrc 設定檔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;presets&quot; : [&quot;es2015&quot;, &quot;react&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>或直接寫在原本得 config.js 檔裡面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: [<span class=\"string\">'/app'</span>],</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.es6$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_moduel/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"babel-loader\"</span>,</div><div class=\"line\">        query: &#123;</div><div class=\"line\">          <span class=\"string\">\"presets\"</span> : [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  resolve: &#123;</div><div class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.es6'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#webpack-note\">Webpack Note</a><ul>\n<li><a href=\"#npm-安裝套件\">npm 安裝套件</a></li>\n<li><a href=\"#npm-的-packagesjson\">npm 的 packages.json</a></li>\n<li><a href=\"#webpackconfingjs\">webpack.confing.js</a></li>\n<li><a href=\"#webpack-product-vs-developer\">webpack Product vs Developer</a></li>\n<li><a href=\"#config-檔內使用-path-套件\">Config 檔內使用 path 套件</a></li>\n<li><a href=\"#多個-bundles-檔案封裝\">多個 bundles 檔案封裝</a></li>\n<li><a href=\"#載入-css\">載入 CSS</a><ul>\n<li><a href=\"#分離出-css-檔案\">分離出 CSS 檔案</a></li>\n<li><a href=\"#auto-prefixer\">Auto Prefixer</a></li>\n</ul>\n</li>\n<li><a href=\"#加入圖片\">加入圖片</a></li>\n<li><a href=\"#webpack-build-with-react\">Webpack build with React</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"webpack-note\"></a></p>\n<h1 id=\"Webpack-Note\"><a href=\"#Webpack-Note\" class=\"headerlink\" title=\"Webpack Note\"></a>Webpack Note</h1><p><a name=\"npm-安裝套件\"></a></p>\n<h2 id=\"npm-安裝套件\"><a href=\"#npm-安裝套件\" class=\"headerlink\" title=\"npm 安裝套件\"></a>npm 安裝套件</h2><ul>\n<li>webpack, webpack-dev-server</li>\n<li>babel-core, babel-loader</li>\n<li>jshint, jshint-loader : JS 語法檢查，後續再研究如何替換成 eslint</li>\n<li>node-libs-browser : unknow</li>\n<li>strip-loader : 可用於 production 情況下，將 console.log 的訊息忽略掉</li>\n<li>css-loader, style-loader, (sass-loader), less-loader</li>\n</ul>\n<p><a name=\"npm-的-packagesjson\"></a></p>\n<h2 id=\"npm-的-packages-json\"><a href=\"#npm-的-packages-json\" class=\"headerlink\" title=\"npm 的 packages.json\"></a>npm 的 packages.json</h2><ul>\n<li>修改 scripts 內容<ul>\n<li><code>&quot;start&quot;: &quot;webpack-dev-server&quot;</code></li>\n<li>接著回到 command line</li>\n<li>輸入 <code>npm start</code>, 開始執行 webpack-dev-server 的指令</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"webpackconfingjs\"></a></p>\n<h2 id=\"webpack-confing-js\"><a href=\"#webpack-confing-js\" class=\"headerlink\" title=\"webpack.confing.js\"></a>webpack.confing.js</h2><ul>\n<li>devtool : 產生 source-map 方便開發中除錯</li>\n<li>entry 可以用陣列傳入多個js檔<ul>\n<li>也可以用 object 得方式建立多個 key: value</li>\n</ul>\n</li>\n<li>output is objects</li>\n<li>module is objects<ul>\n<li>loaders is object array, each loader setting is object<ul>\n<li>test 是正規表示式</li>\n<li>exclude 略過不處理的目錄(以設定檔為起始路徑)</li>\n<li>loader 使用的 loader</li>\n<li>搭配 resolve 來擴充讀取的副檔名<ul>\n<li>extensions is 副檔名陣列</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>preLoaders is object array, each pre-loader setting is object<ul>\n<li>test 正規表示式</li>\n<li>exclude 略過不處理的目錄(以設定檔為起始路徑)</li>\n<li>loader loader名稱</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\">  entry: [<span class=\"string\">'./utils'</span>, <span class=\"string\">'/app.js'</span>],</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    preLoaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"string\">'node_modules'</span>,</div><div class=\"line\">        loader: <span class=\"string\">'jshint-loader'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.es6$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_moduel/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"babel-loader\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  resolve: &#123;</div><div class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.es6'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"webpack-product-vs-developer\"></a></p>\n<h2 id=\"webpack-Product-vs-Developer\"><a href=\"#webpack-Product-vs-Developer\" class=\"headerlink\" title=\"webpack Product vs Developer\"></a>webpack Product vs Developer</h2><ul>\n<li>webpack -p : product 模式，輸出檔案壓縮最佳化<ul>\n<li>可使用另一個 config 檔案, webpack-production.config.js</li>\n<li><code>webpack --config webpack-production.config.js -p</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> WebpackStrip = <span class=\"built_in\">require</span>(<span class=\"string\">'strip-loader'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> devConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> stripLoader = &#123;</div><div class=\"line\">  test: [<span class=\"regexp\">/\\.js$/</span>, <span class=\"regexp\">/\\.es6$/</span>],</div><div class=\"line\">  exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">  loader: WebpackStrip.loader(<span class=\"string\">'console.log'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">devConfig.module.loaders.push(stripLoader);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = devConfig;</div></pre></td></tr></table></figure>\n<p><a name=\"config-檔內使用-path-套件\"></a></p>\n<h2 id=\"Config-檔內使用-path-套件\"><a href=\"#Config-檔內使用-path-套件\" class=\"headerlink\" title=\"Config 檔內使用 path 套件\"></a>Config 檔內使用 path 套件</h2><ul>\n<li>修改過得目錄結構<br><img src=\"https://lh3.googleusercontent.com/-BDzL0Z2GWFM/VwPgLAZ7SEI/AAAAAAAAKsw/bjSuLLcV4NwyKYy-4EjCnhP3-1pYhb_hg/s0/path.JPG\" alt=\"修改過得目錄結構\" title=\"path.JPG\"></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  context: path.resolve(<span class=\"string\">'js'</span>);</div><div class=\"line\">  entry: [<span class=\"string\">'./utils'</span>, <span class=\"string\">'/app.js'</span>],</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.resolve(<span class=\"string\">'build/js/'</span>),</div><div class=\"line\">    publicPath: <span class=\"string\">'/public/assets/js/'</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: <span class=\"string\">'public'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    preLoaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"string\">'node_modules'</span>,</div><div class=\"line\">        loader: <span class=\"string\">'jshint-loader'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.es6$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_moduel/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"babel-loader\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  resolve: &#123;</div><div class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.es6'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"多個-bundles-檔案封裝\"></a></p>\n<h2 id=\"多個-bundles-檔案封裝\"><a href=\"#多個-bundles-檔案封裝\" class=\"headerlink\" title=\"多個 bundles 檔案封裝\"></a>多個 bundles 檔案封裝</h2><ul>\n<li>多個 js 檔與多個 html 頁面</li>\n<li><img src=\"https://i.imgur.com/p28LVfs.png\" width=\"200\"></li>\n<li>在 config 檔內使用 webpack 套件來載入共用 js 區塊<ul>\n<li><code>var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&#39;shared.js&#39;);</code></li>\n</ul>\n</li>\n<li>entry 由原本陣列換成 objects 方式撰寫<ul>\n<li>使用 key : value 方式撰寫每個 html 頁面 entry 的 key</li>\n<li>output 的部分在 filename 將改成 <code>[name]</code> 的方式來依據 entry 內的 key 做輸出</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'wabpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> commonsPlugin = <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'shared.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    context: path.resolve(<span class=\"string\">'js'</span>);</div><div class=\"line\">    entry: &#123;</div><div class=\"line\">        about: <span class=\"string\">'./about_page.js'</span>,</div><div class=\"line\">        home: <span class=\"string\">'./home_page.js'</span>,</div><div class=\"line\">        contact: <span class=\"string\">'./contact_page.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: path.resolve(<span class=\"string\">'build/js/'</span>),</div><div class=\"line\">        publicPath: <span class=\"string\">'public/assets/js/'</span>,</div><div class=\"line\">        filename: <span class=\"string\">\"[name].js\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    plugins: [commonsPlugin,</div><div class=\"line\">    devServer: &#123;</div><div class=\"line\">        contentBase: <span class=\"string\">'public'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"載入-css\"></a></p>\n<h2 id=\"載入-CSS\"><a href=\"#載入-CSS\" class=\"headerlink\" title=\"載入 CSS\"></a>載入 CSS</h2><ul>\n<li>loader 載入順序：由右往左，以 less 那組為例<ul>\n<li>less-loader -&gt; css-loader -&gt; style-loader 來處理</li>\n</ul>\n</li>\n<li>需安裝 css-loader, style-loader 兩套件<ul>\n<li>使用 SASS，需要再安裝 sass-loader</li>\n<li>使用 Less，需要再安裝 less-loader</li>\n</ul>\n</li>\n<li>在 config 檔裡面，利用<code>!</code> 來將兩個 loader 連接</li>\n<li>js 檔內使用<code>require(&#39;css-file-path&#39;);</code>的方式來載入 CSS (scss or less) 檔案<ul>\n<li>原本 html 頁面內的 head 裡面不需要另外寫 css 載入</li>\n<li>可透過 html 頁面引入的 js 檔案內 require css 檔案自動在頁面載入時加載</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader!less-loader\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"分離出-css-檔案\"></a></p>\n<h3 id=\"分離出-CSS-檔案\"><a href=\"#分離出-CSS-檔案\" class=\"headerlink\" title=\"分離出 CSS 檔案\"></a>分離出 CSS 檔案</h3><ul>\n<li>讓 CSS 可放置在 head 標籤間被 include</li>\n<li><code>npm install extract-text-webpack-plugin --save-dev</code></li>\n<li>html 檔的 head tag 內加入<ul>\n<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/public/assets/styles.css&quot;&gt;</code></li>\n</ul>\n</li>\n<li>config 檔內需要引入 <code>extract-text-webpack-plugin</code> 套件</li>\n<li>改寫 loaders 的內容</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    context: path.resolve(<span class=\"string\">'js'</span>);</div><div class=\"line\">    entry: [<span class=\"string\">\"./app\"</span>];</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: path.resolve(<span class=\"string\">'build/'</span>),</div><div class=\"line\">        publicPath: <span class=\"string\">'public/assets/'</span>,</div><div class=\"line\">        filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"styles.css\"</span>)</div><div class=\"line\">    ],</div><div class=\"line\">    devServer: &#123;</div><div class=\"line\">        contentBase: <span class=\"string\">'public'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: ExtractTextPlugin.extract<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader!less-loader\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"auto-prefixer\"></a></p>\n<h3 id=\"Auto-Prefixer\"><a href=\"#Auto-Prefixer\" class=\"headerlink\" title=\"Auto Prefixer\"></a>Auto Prefixer</h3><ul>\n<li><code>npm install autoprefixer-loader --save-dev</code></li>\n<li>config 檔內的 loader 中，增加 autoprefixer-loader 在 css-loader 之後，less-loader 之前</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader!autoprefixer-loader\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader!autoprefixer-loader!less-loader\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"加入圖片\"></a></p>\n<h2 id=\"加入圖片\"><a href=\"#加入圖片\" class=\"headerlink\" title=\"加入圖片\"></a>加入圖片</h2><ul>\n<li>npm 安裝 <code>url-loader</code> 套件<ul>\n<li><code>npm install url-loader --save-dev</code></li>\n<li>packages.json 內會增加 url-loader 與 file-loader 兩個套件</li>\n</ul>\n</li>\n<li>config 中增加 loader 設定至 loaders 內<ul>\n<li>url-loader 加入 limit 限制圖片大小，限制內圖片被轉為 base64 編碼 inline 載入，超過限制以原本圖片載入</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg)$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">\"url-loader?limit=100000\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">app.js</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">img.style.height = <span class=\"string\">\"25%\"</span>;</div><div class=\"line\">img.style.width = <span class=\"string\">\"25%\"</span>;</div><div class=\"line\">img.src = <span class=\"built_in\">require</span>(<span class=\"string\">'../images/webpack_logo.png'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElelentById(<span class=\"string\">'img_container'</span>).appendChild(img);</div></pre></td></tr></table></figure>\n<p><a name=\"webpack-build-with-react\"></a></p>\n<h2 id=\"Webpack-build-with-React\"><a href=\"#Webpack-build-with-React\" class=\"headerlink\" title=\"Webpack build with React\"></a>Webpack build with React</h2><ul>\n<li>安裝套件<ul>\n<li>react, babel-preset-es2015, babel-preset-react</li>\n</ul>\n</li>\n<li><p>增加 .babelrc 設定檔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;presets&quot; : [&quot;es2015&quot;, &quot;react&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>或直接寫在原本得 config.js 檔裡面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: [<span class=\"string\">'/app'</span>],</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.es6$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_moduel/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"babel-loader\"</span>,</div><div class=\"line\">        query: &#123;</div><div class=\"line\">          <span class=\"string\">\"presets\"</span> : [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  resolve: &#123;</div><div class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.es6'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"layout":"post","title":"Hello World","date":"2016-08-26T10:24:40.000Z","_content":"<!-- MarkdownTOC -->\n\n- [Quick Start](#quick-start)\n    - [Create a new post](#create-a-new-post)\n    - [Run server](#run-server)\n    - [Generate static files](#generate-static-files)\n    - [Deploy to remote sites](#deploy-to-remote-sites)\n\n<!-- /MarkdownTOC -->\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<a name=\"quick-start\"></a>\n## Quick Start\n\n<a name=\"create-a-new-post\"></a>\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<a name=\"run-server\"></a>\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n<a name=\"generate-static-files\"></a>\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n<a name=\"deploy-to-remote-sites\"></a>\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\nlayout: post\ntitle: Hello World\ndate: 2016-08-26 18:24:40\ncategories:\n  - Others\ntags:\n\n---\n<!-- MarkdownTOC -->\n\n- [Quick Start](#quick-start)\n    - [Create a new post](#create-a-new-post)\n    - [Run server](#run-server)\n    - [Generate static files](#generate-static-files)\n    - [Deploy to remote sites](#deploy-to-remote-sites)\n\n<!-- /MarkdownTOC -->\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<a name=\"quick-start\"></a>\n## Quick Start\n\n<a name=\"create-a-new-post\"></a>\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<a name=\"run-server\"></a>\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n<a name=\"generate-static-files\"></a>\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n<a name=\"deploy-to-remote-sites\"></a>\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-10-21T00:32:26.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gik000vscsc3fwbu3gk","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#quick-start\">Quick Start</a><ul>\n<li><a href=\"#create-a-new-post\">Create a new post</a></li>\n<li><a href=\"#run-server\">Run server</a></li>\n<li><a href=\"#generate-static-files\">Generate static files</a></li>\n<li><a href=\"#deploy-to-remote-sites\">Deploy to remote sites</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<p><a name=\"quick-start\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p><a name=\"create-a-new-post\"></a></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<p><a name=\"run-server\"></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<p><a name=\"generate-static-files\"></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<p><a name=\"deploy-to-remote-sites\"></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#quick-start\">Quick Start</a><ul>\n<li><a href=\"#create-a-new-post\">Create a new post</a></li>\n<li><a href=\"#run-server\">Run server</a></li>\n<li><a href=\"#generate-static-files\">Generate static files</a></li>\n<li><a href=\"#deploy-to-remote-sites\">Deploy to remote sites</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<p><a name=\"quick-start\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p><a name=\"create-a-new-post\"></a></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<p><a name=\"run-server\"></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<p><a name=\"generate-static-files\"></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<p><a name=\"deploy-to-remote-sites\"></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"layout":"post","title":"Build a Serverless Facebook Messenger Chatbot","author":"Soar Lin","cdn":"header-off","header-img":"","date":"2016-10-07T05:49:37.000Z","_content":"<!-- MarkdownTOC -->\n\n- [Build a Serverless Facebook Messenger Chatbot](#build-a-serverless-facebook-messenger-chatbot)\n  - [準備工具與服務](#準備工具與服務)\n    - [安裝 Serverless Framework](#安裝-serverless-framework)\n    - [AWS 前置作業 - IAM](#aws-前置作業---iam)\n    - [Facebook 前置作業](#facebook-前置作業)\n  - [建立 Serverless 專案](#建立-serverless-專案)\n  - [Serverless 環境設定](#serverless-環境設定)\n  - [Functoin 參考](#functoin-參考)\n  - [AWS 上服務檢查](#aws-上服務檢查)\n    - [API Gateway 設定確認](#api-gateway-設定確認)\n    - [Lambda 確認](#lambda-確認)\n  - [FB Page Webhook Setting](#fb-page-webhook-setting)\n- [Refrence](#refrence)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"build-a-serverless-facebook-messenger-chatbot\"></a>\n# Build a Serverless Facebook Messenger Chatbot\n\n<a name=\"準備工具與服務\"></a>\n## 準備工具與服務\n\n* Serverless Framework (I use v1.0-rc1)\n* AWS Account\n* Facebook Page\n* Facebook Developer\n\n<a name=\"安裝-serverless-framework\"></a>\n### 安裝 Serverless Framework\nserverless 目前(2016/10/06)的版本是 v1.0 rc1，過去在網路上找到的教學文都是 v.0.5.許多，從 JSON 格式轉換成 YAML 格式，這部份搞了我很久，加上一些變數設定等，花了一兩天在摸索。\n\nServerless Framework 安裝指令如下：\n\n````\nnpm install -g serverless\n````\n這裡說明一下 Serverless framework 大致上需要以及會使用到的 AWS 服務項目\n\n- IAM : 權限管理，讓本機端寫好的東西可以部屬到 AWS 各項資源與服務上的權限\n- CloudFormation : AWS 資源與各項服務配置的模版，目前 v1.0 版改用 YAML 格式\n- S3 : 資料儲存空間，存放 coludformation 模板與發布的 function + libraries zip檔的地方\n- Lambda : 在接收某些觸發條件後執行邏輯運算功能的服務，也就是用來執行聊天機器人的功能\n- API Gateway : 用來管理後台 Server or Lambda 等的 API 接口服務，這裡是用來觸發 Lambda function 執行運算\n- CloudWatch : 可以檢視 Lambda 上 Function 執行時所留下的 log，協助開發中 Debug 使用\n\n\n<a name=\"aws-前置作業---iam\"></a>\n### AWS 前置作業 - IAM\n如果已經有安裝 AWS 提供的 command line tool ([aws-cli](https://aws.amazon.com/tw/cli/))，可能會方便一點？沒有也沒關係，因為我也是到 aws console 介面上慢慢做的\n\n#### 建立 IAM user 並給予權限 ([教學](https://github.com/serverless/serverless/blob/master/docs/02-providers/aws/01-setup.md#amazon-web-services))\n1. 在 AWS Console 介面，在進入 IAM 介面\n2. 建立使用者，命名 serverless-admin\n3. 記下 Access Key Id 與 Secret Access Key，或把檔案也下載下來\n4. 添加 AdministratorAccess 權限\n\n![IAM-1](/images/serverless/IAM-1.jpg)\n![IAM-1](/images/serverless/IAM-2.jpg)\n\n\n#### 在本機設定 AWS API Key & Secret\n\n````\nexport AWS_ACCESS_KEY_ID=<key>\nexport AWS_SECRET_ACCESS_KEY=<secret>\n````\n或者使用 aws-cli 來設定 aws config\n\n````\n$ aws configure\nAWS Access Key ID [None]: <key>\nAWS Secret Access Key [None]: <secret>\nDefault region name [None]: ap-northeast-1\nDefault output format [None]: ENTER\n````\n\n<a name=\"facebook-前置作業\"></a>\n### Facebook 前置作業\n\n#### 建立 facebook 粉絲專頁\n為了測試聊天機器人，在臉書建立一個粉絲專業吧！\n所以這邊就不在針對這部份寫教學了\n\n\n\n<a name=\"建立-facevook-application\"></a>\n#### 建立 facevook application\n\n1. 進入 Facebook Developer 建立一個新的 APP\n2. 替這個 APP 加入 Messenger 這項產品\n\n![Create FB Page](/images/serverless/fb-page1.png)![Add Messenger](/images/serverless/fb-page2.png)\n\n<a name=\"建立-serverless-專案\"></a>\n## 建立 Serverless 專案\n\n因為使用到 Lambda，所以有 Node.js, Python, Java 等樣板可以選擇，這裡使用 Node.js 來做示範(小弟不才，雖然 nodejs 也不熟，但另外兩種語言更是悲劇)\n\n建立專案指令：(使用 Node.js 樣板)\n\n````\n# 採用 nodejs 基本模板, 並將專案建立在 sls-fb-msg-bot 目錄下\nserverless create --template aws-nodejs --path sls-fb-msg-bot\n````\n\n完成這建立專案指令後，應該會建立好指定的目錄名稱，並且在裡面產生三個檔案，結構如下：\n\n````\nsls-fb-msg-bot\n├── event.json\n├── handler.js\n└── serverless.yml\n````\n\n<a name=\"serverless-環境設定\"></a>\n## Serverless 環境設定\n\n可以參考我的範例 ([github](https://github.com/SoarLin/serverless-fb-messenger-bot))，這裡需要安裝一些必要的套件\n\n\n#### npm 套件安裝\n\n````\nnpm init\n# 經過一連串的 enter，產生 package.json 後，繼續安裝套件\nnpm install --save lodash request serverless-plugin-stage-variables\n\n````\n\n而 serverless 的環境設定 yml 檔，參考如下：\n\n````\nservice: sls-fb-msg-bot\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  # You can change your stage and aws region\n  stage: dev\n  region: ap-northeast-1\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: webhook\n          method: GET\n      - http:\n          path: webhook\n          method: POST\n          response:\n            template: '{ \"body\": \"$input.json(''$'')\" }'\n\ncustom:\n  stageVariables:\n\n    # Remeber to setting your variables\n    pageAccessToken: 'FB_Page_Access_Token'\n    validationToken: 'Your_Validation_Token'\n\nplugins:\n  - serverless-plugin-stage-variables\n````\n\n__注意1:__ stage 與 region 請改成自己需要的內容，這邊設定是發佈到日本東京的機房\n\n__注意2:__ FB_Page_Access_Token 請開啟 fb developer app，在 Messenger 的 Setting 中的 「Token Generation」內選好粉絲專頁來產生\n\n![Page Access Token](/images/serverless/fb-page-access-token.png)\n\n__注意3:__ Your_Validation_Token 是 FB 要與 webhook API 溝通時的驗證碼，設定一個自己喜歡的密碼，這裡會與 FB_Page_Access_Token 都寫入 API Gateway Stages 內的 Stage Variables，之後再透過 Lambda 撈出來\n\n![Verify Token](/images/serverless/FB-APIGateway.jpg)\n\n\n<a name=\"functoin-參考\"></a>\n## Functoin 參考\n\nserverless.yml 的設定都搞定後，剩下的就是 handle.js 這個用來執行邏輯運算的功能程式了，我得先承認我是到處參考東拼西湊出來的程式碼，所以真的就參考就好。\n\n想了解更詳細 [Messenger API](https://developers.facebook.com/docs/messenger-platform)，麻煩還是到 Facebook 所提供的[文件](https://developers.facebook.com/docs/messenger-platform)去研究吧！這裡僅節錄部分程式碼並在稍微精簡一些(有可能無法實行)，正確完成內容還是請到我的 [github](https://github.com/SoarLin/serverless-fb-messenger-bot) 上去參考\n\n````javascript\n'use strict';\n\nconst request = require('request');\n\nfunction sendTextMessage(recipientId, messageText) {\n    return {\n        recipient: { id: recipientId },\n        message: { text: messageText }\n    };\n}\n\nfunction display(object) {\n    return JSON.stringify(object, null, 2);\n}\n\nmodule.exports.webhook = (event, context, callback) => {\n    console.log('Event: ', display(event));\n\n    // FB Page access token\n    const PAGE_ACCESS_TOKEN = event.stageVariables.pageAccessToken;\n    // FB webhook validation token\n    const VALIDATION_TOKEN = event.stageVariables.validationToken;\n\n    if (!VALIDATION_TOKEN) {\n        console.error(\"Missing validation token\");\n        context.fail(new Error('Missing validation token'));\n    }\n\n    function callSendAPI(messageData) {\n        request({\n            uri: 'https://graph.facebook.com/v2.6/me/messages',\n            qs: { access_token: PAGE_ACCESS_TOKEN },\n            method: 'POST',\n            json: messageData\n        }, (error, response, body) => {\n            if (!error && response.statusCode == 200) {\n                context.succeed(\"Successfully\");\n            } else {\n                context.fail(new Error('Failed Send API'));\n            }\n        });\n    }\n\n    if (event.method === \"GET\") {\n        let query = event.query;\n        if (query['hub.mode'] === 'subscribe' &&\n            query['hub.verify_token'] === VALIDATION_TOKEN) {\n            console.log(\"Validating webhook\");\n            context.succeed(parseInt(query['hub.challenge']));\n        } else {\n            context.fail(new Error('[403] Failed validation.'));\n        }\n    }\n    else if (event.method === \"POST\") {\n        var data = event.body;\n        if (data.object == 'page') {\n            var messagingList = data.entry[0].messaging;\n            var messageData;\n\n            messagingList.forEach(function(messagingEvent) {\n                var senderId = messagingEvent.sender.id;\n                if (messagingEvent.message) {\n                    // Received user message\n                    messageData = sendTextMessage(senderId, \"Hello, I am messenger bot\");\n                } else {\n                    messageData = sendTextMessage(senderId, \"Webhook received other messagingEvent\");\n                }\n                callSendAPI(messageData);\n            });\n        }\n    } else {\n        context.fail(new Error('Unrecognized method \"' + event.method + '\"'))\n    }\n};\n````\n\n到了這邊，大致上 serverless 的設置都完成了，總算可以發佈到 AWS 上啦！\n\n````\nserverless deploy\n````\n\n<a name=\"aws-上服務檢查\"></a>\n## AWS 上服務檢查\n\n<a name=\"api-gateway-設定確認\"></a>\n### API Gateway 設定確認\n\n首先檢查一下設定檔內寫的 State Variables 有沒有正確的被設定好\n\n![API Gateway-1](/images/serverless/API-Gateway1.png)\n\n接著檢查 Get Method 中的 request template，這邊原本沒有設定，但應該會有圖中的預設樣板 code\n\n![API Gateway-2](/images/serverless/API-Gateway2.png)\n\n然後再檢查 Post Method 中的 response template 是否有設定檔內寫的內容，如下圖\n\n![API Gateway-3](/images/serverless/API-Gateway3.png)\n\n\n<a name=\"lambda-確認\"></a>\n### Lambda 確認\n\n應該可以順利產生一組 function 命名格式為 `<service_name>-<stage>-<function_name>`，這裡的例子是 sls-fb-msg-bot-dev-webhook\n\n![Lambda Function](/images/serverless/lambda.png)\n\n#### FB 連結 Webhook 測試(GET)\n\n可以參考下面範例:\n\n - __hub.verify_token__ 與 __validationToken__ 記得設成一樣\n - __hub.challenge__ 是由 FB 驗證時傳過來的一組數值，自行測試時隨便打都可以\n - __pageAccessToken__ 記得填入 FB 產生的粉絲專頁存取權杖\n\n\n````json\n{\n  \"body\": {},\n  \"method\": \"GET\",\n  \"stage\": \"dev\",\n  \"query\": {\n        \"hub.mode\": \"subscribe\",\n        \"hub.challenge\": \"29606336\",\n        \"hub.verify_token\": \"Your_Validation_Token\"\n  },\n  \"stageVariables\": {\n    \"validationToken\": \"Your_Validation_Token\",\n    \"pageAccessToken\": \"FB_Page_Access_Token\"\n  }\n}\n````\n\n#### Messenger Bot 接收訊息測試(POST)\n\n一樣參考下方的範例：\n\n````json\n{\n    \"body\": {\n        \"object\": \"page\",\n        \"entry\": [\n            {\n                \"messaging\": [\n                    {\n                        \"sender\": {\n                            \"id\": \"<Your_Facebook_Id>\"\n                        },\n                        \"message\": {\n                            \"text\": \"test\"\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    \"method\": \"POST\",\n    \"stage\": \"dev\",\n    \"stageVariables\": {\n        \"validationToken\": \"FB_Page_Access_Token\",\n        \"pageAccessToken\": \"Your_Validation_Token\"\n    }\n}\n````\n\n- __Your_Facebook_Id__ : 這個比較麻煩，可能得自己去 FB Developer 提供的 [Graph API Explorer](https://developers.facebook.com/tools/explorer/) 上面查詢\n  - 先點下 Get Token, 然後直接確定\n  - 接著預設應該會取出用 user name 與 id，就可以得到自己的 id 了，參考下圖\n\n![Graph API 1](/images/serverless/GraphAPIExplorer1.jpg)![Graph API 2](/images/serverless/GraphAPIExplorer2.png)\n\n\n<a name=\"fb-page-webhook-setting\"></a>\n## FB Page Webhook Setting\n\n總算快大功告成了，還記得之前一直有提到的 Your_Validation_Token 吧！在設定 webhook 時就會派上用場啦！\n\n- 進入 facebook developer app 頁面\n- 切換到 Messenger 產品分頁\n- 點選 Setup Webhooks\n- 接著填入 API Gateway endpoints 的 GET 網址與要跟程式驗證的內容\n  - endpoints 網址在發佈時，會顯示在 terminal 上\n  - 或是使用`serverless info`來檢視資訊\n- 驗證通過後，記得在下方訂閱要執行 bot 的粉絲專頁\n\n![Facebook Webhooks Setting](/images/serverless/fb-webhook.png)![Subscribe Page](/images/serverless/subscribe_page.png)\n\n如果順利驗證通過，就可以開始跟機器人對話啦！\n\n![Messenger Chat](/images/serverless/chat-sample.jpg)\n\n\n<a name=\"refrence\"></a>\n# Refrence\n\n[Serverless Framerowk](https://serverless.com)\n[Serverless Github](https://github.com/serverless/serverless)\n[實作 Serverless 的 facebook messenger bot](http://denny.qollie.com/2016/05/29/sls-fb-bot/)\n[Building a Serverless Facebook messenger chatbot](http://justserverless.com/blog/building-a-serverless-facebook-messenger-chatbot/)\n","source":"_posts/serverless-facebook-messenger-bot.md","raw":"---\nlayout: post\ntitle: Build a Serverless Facebook Messenger Chatbot\nauthor: Soar Lin\ncdn: header-off\nheader-img: ''\ndate: 2016-10-07 13:49:37\ntags:\n  - lambda\n  - serverless\n  - apigateway\n  - webhook\n  - facebook\n  - messenger\ncategories:\n  - AWS\n---\n<!-- MarkdownTOC -->\n\n- [Build a Serverless Facebook Messenger Chatbot](#build-a-serverless-facebook-messenger-chatbot)\n  - [準備工具與服務](#準備工具與服務)\n    - [安裝 Serverless Framework](#安裝-serverless-framework)\n    - [AWS 前置作業 - IAM](#aws-前置作業---iam)\n    - [Facebook 前置作業](#facebook-前置作業)\n  - [建立 Serverless 專案](#建立-serverless-專案)\n  - [Serverless 環境設定](#serverless-環境設定)\n  - [Functoin 參考](#functoin-參考)\n  - [AWS 上服務檢查](#aws-上服務檢查)\n    - [API Gateway 設定確認](#api-gateway-設定確認)\n    - [Lambda 確認](#lambda-確認)\n  - [FB Page Webhook Setting](#fb-page-webhook-setting)\n- [Refrence](#refrence)\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"build-a-serverless-facebook-messenger-chatbot\"></a>\n# Build a Serverless Facebook Messenger Chatbot\n\n<a name=\"準備工具與服務\"></a>\n## 準備工具與服務\n\n* Serverless Framework (I use v1.0-rc1)\n* AWS Account\n* Facebook Page\n* Facebook Developer\n\n<a name=\"安裝-serverless-framework\"></a>\n### 安裝 Serverless Framework\nserverless 目前(2016/10/06)的版本是 v1.0 rc1，過去在網路上找到的教學文都是 v.0.5.許多，從 JSON 格式轉換成 YAML 格式，這部份搞了我很久，加上一些變數設定等，花了一兩天在摸索。\n\nServerless Framework 安裝指令如下：\n\n````\nnpm install -g serverless\n````\n這裡說明一下 Serverless framework 大致上需要以及會使用到的 AWS 服務項目\n\n- IAM : 權限管理，讓本機端寫好的東西可以部屬到 AWS 各項資源與服務上的權限\n- CloudFormation : AWS 資源與各項服務配置的模版，目前 v1.0 版改用 YAML 格式\n- S3 : 資料儲存空間，存放 coludformation 模板與發布的 function + libraries zip檔的地方\n- Lambda : 在接收某些觸發條件後執行邏輯運算功能的服務，也就是用來執行聊天機器人的功能\n- API Gateway : 用來管理後台 Server or Lambda 等的 API 接口服務，這裡是用來觸發 Lambda function 執行運算\n- CloudWatch : 可以檢視 Lambda 上 Function 執行時所留下的 log，協助開發中 Debug 使用\n\n\n<a name=\"aws-前置作業---iam\"></a>\n### AWS 前置作業 - IAM\n如果已經有安裝 AWS 提供的 command line tool ([aws-cli](https://aws.amazon.com/tw/cli/))，可能會方便一點？沒有也沒關係，因為我也是到 aws console 介面上慢慢做的\n\n#### 建立 IAM user 並給予權限 ([教學](https://github.com/serverless/serverless/blob/master/docs/02-providers/aws/01-setup.md#amazon-web-services))\n1. 在 AWS Console 介面，在進入 IAM 介面\n2. 建立使用者，命名 serverless-admin\n3. 記下 Access Key Id 與 Secret Access Key，或把檔案也下載下來\n4. 添加 AdministratorAccess 權限\n\n![IAM-1](/images/serverless/IAM-1.jpg)\n![IAM-1](/images/serverless/IAM-2.jpg)\n\n\n#### 在本機設定 AWS API Key & Secret\n\n````\nexport AWS_ACCESS_KEY_ID=<key>\nexport AWS_SECRET_ACCESS_KEY=<secret>\n````\n或者使用 aws-cli 來設定 aws config\n\n````\n$ aws configure\nAWS Access Key ID [None]: <key>\nAWS Secret Access Key [None]: <secret>\nDefault region name [None]: ap-northeast-1\nDefault output format [None]: ENTER\n````\n\n<a name=\"facebook-前置作業\"></a>\n### Facebook 前置作業\n\n#### 建立 facebook 粉絲專頁\n為了測試聊天機器人，在臉書建立一個粉絲專業吧！\n所以這邊就不在針對這部份寫教學了\n\n\n\n<a name=\"建立-facevook-application\"></a>\n#### 建立 facevook application\n\n1. 進入 Facebook Developer 建立一個新的 APP\n2. 替這個 APP 加入 Messenger 這項產品\n\n![Create FB Page](/images/serverless/fb-page1.png)![Add Messenger](/images/serverless/fb-page2.png)\n\n<a name=\"建立-serverless-專案\"></a>\n## 建立 Serverless 專案\n\n因為使用到 Lambda，所以有 Node.js, Python, Java 等樣板可以選擇，這裡使用 Node.js 來做示範(小弟不才，雖然 nodejs 也不熟，但另外兩種語言更是悲劇)\n\n建立專案指令：(使用 Node.js 樣板)\n\n````\n# 採用 nodejs 基本模板, 並將專案建立在 sls-fb-msg-bot 目錄下\nserverless create --template aws-nodejs --path sls-fb-msg-bot\n````\n\n完成這建立專案指令後，應該會建立好指定的目錄名稱，並且在裡面產生三個檔案，結構如下：\n\n````\nsls-fb-msg-bot\n├── event.json\n├── handler.js\n└── serverless.yml\n````\n\n<a name=\"serverless-環境設定\"></a>\n## Serverless 環境設定\n\n可以參考我的範例 ([github](https://github.com/SoarLin/serverless-fb-messenger-bot))，這裡需要安裝一些必要的套件\n\n\n#### npm 套件安裝\n\n````\nnpm init\n# 經過一連串的 enter，產生 package.json 後，繼續安裝套件\nnpm install --save lodash request serverless-plugin-stage-variables\n\n````\n\n而 serverless 的環境設定 yml 檔，參考如下：\n\n````\nservice: sls-fb-msg-bot\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  # You can change your stage and aws region\n  stage: dev\n  region: ap-northeast-1\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: webhook\n          method: GET\n      - http:\n          path: webhook\n          method: POST\n          response:\n            template: '{ \"body\": \"$input.json(''$'')\" }'\n\ncustom:\n  stageVariables:\n\n    # Remeber to setting your variables\n    pageAccessToken: 'FB_Page_Access_Token'\n    validationToken: 'Your_Validation_Token'\n\nplugins:\n  - serverless-plugin-stage-variables\n````\n\n__注意1:__ stage 與 region 請改成自己需要的內容，這邊設定是發佈到日本東京的機房\n\n__注意2:__ FB_Page_Access_Token 請開啟 fb developer app，在 Messenger 的 Setting 中的 「Token Generation」內選好粉絲專頁來產生\n\n![Page Access Token](/images/serverless/fb-page-access-token.png)\n\n__注意3:__ Your_Validation_Token 是 FB 要與 webhook API 溝通時的驗證碼，設定一個自己喜歡的密碼，這裡會與 FB_Page_Access_Token 都寫入 API Gateway Stages 內的 Stage Variables，之後再透過 Lambda 撈出來\n\n![Verify Token](/images/serverless/FB-APIGateway.jpg)\n\n\n<a name=\"functoin-參考\"></a>\n## Functoin 參考\n\nserverless.yml 的設定都搞定後，剩下的就是 handle.js 這個用來執行邏輯運算的功能程式了，我得先承認我是到處參考東拼西湊出來的程式碼，所以真的就參考就好。\n\n想了解更詳細 [Messenger API](https://developers.facebook.com/docs/messenger-platform)，麻煩還是到 Facebook 所提供的[文件](https://developers.facebook.com/docs/messenger-platform)去研究吧！這裡僅節錄部分程式碼並在稍微精簡一些(有可能無法實行)，正確完成內容還是請到我的 [github](https://github.com/SoarLin/serverless-fb-messenger-bot) 上去參考\n\n````javascript\n'use strict';\n\nconst request = require('request');\n\nfunction sendTextMessage(recipientId, messageText) {\n    return {\n        recipient: { id: recipientId },\n        message: { text: messageText }\n    };\n}\n\nfunction display(object) {\n    return JSON.stringify(object, null, 2);\n}\n\nmodule.exports.webhook = (event, context, callback) => {\n    console.log('Event: ', display(event));\n\n    // FB Page access token\n    const PAGE_ACCESS_TOKEN = event.stageVariables.pageAccessToken;\n    // FB webhook validation token\n    const VALIDATION_TOKEN = event.stageVariables.validationToken;\n\n    if (!VALIDATION_TOKEN) {\n        console.error(\"Missing validation token\");\n        context.fail(new Error('Missing validation token'));\n    }\n\n    function callSendAPI(messageData) {\n        request({\n            uri: 'https://graph.facebook.com/v2.6/me/messages',\n            qs: { access_token: PAGE_ACCESS_TOKEN },\n            method: 'POST',\n            json: messageData\n        }, (error, response, body) => {\n            if (!error && response.statusCode == 200) {\n                context.succeed(\"Successfully\");\n            } else {\n                context.fail(new Error('Failed Send API'));\n            }\n        });\n    }\n\n    if (event.method === \"GET\") {\n        let query = event.query;\n        if (query['hub.mode'] === 'subscribe' &&\n            query['hub.verify_token'] === VALIDATION_TOKEN) {\n            console.log(\"Validating webhook\");\n            context.succeed(parseInt(query['hub.challenge']));\n        } else {\n            context.fail(new Error('[403] Failed validation.'));\n        }\n    }\n    else if (event.method === \"POST\") {\n        var data = event.body;\n        if (data.object == 'page') {\n            var messagingList = data.entry[0].messaging;\n            var messageData;\n\n            messagingList.forEach(function(messagingEvent) {\n                var senderId = messagingEvent.sender.id;\n                if (messagingEvent.message) {\n                    // Received user message\n                    messageData = sendTextMessage(senderId, \"Hello, I am messenger bot\");\n                } else {\n                    messageData = sendTextMessage(senderId, \"Webhook received other messagingEvent\");\n                }\n                callSendAPI(messageData);\n            });\n        }\n    } else {\n        context.fail(new Error('Unrecognized method \"' + event.method + '\"'))\n    }\n};\n````\n\n到了這邊，大致上 serverless 的設置都完成了，總算可以發佈到 AWS 上啦！\n\n````\nserverless deploy\n````\n\n<a name=\"aws-上服務檢查\"></a>\n## AWS 上服務檢查\n\n<a name=\"api-gateway-設定確認\"></a>\n### API Gateway 設定確認\n\n首先檢查一下設定檔內寫的 State Variables 有沒有正確的被設定好\n\n![API Gateway-1](/images/serverless/API-Gateway1.png)\n\n接著檢查 Get Method 中的 request template，這邊原本沒有設定，但應該會有圖中的預設樣板 code\n\n![API Gateway-2](/images/serverless/API-Gateway2.png)\n\n然後再檢查 Post Method 中的 response template 是否有設定檔內寫的內容，如下圖\n\n![API Gateway-3](/images/serverless/API-Gateway3.png)\n\n\n<a name=\"lambda-確認\"></a>\n### Lambda 確認\n\n應該可以順利產生一組 function 命名格式為 `<service_name>-<stage>-<function_name>`，這裡的例子是 sls-fb-msg-bot-dev-webhook\n\n![Lambda Function](/images/serverless/lambda.png)\n\n#### FB 連結 Webhook 測試(GET)\n\n可以參考下面範例:\n\n - __hub.verify_token__ 與 __validationToken__ 記得設成一樣\n - __hub.challenge__ 是由 FB 驗證時傳過來的一組數值，自行測試時隨便打都可以\n - __pageAccessToken__ 記得填入 FB 產生的粉絲專頁存取權杖\n\n\n````json\n{\n  \"body\": {},\n  \"method\": \"GET\",\n  \"stage\": \"dev\",\n  \"query\": {\n        \"hub.mode\": \"subscribe\",\n        \"hub.challenge\": \"29606336\",\n        \"hub.verify_token\": \"Your_Validation_Token\"\n  },\n  \"stageVariables\": {\n    \"validationToken\": \"Your_Validation_Token\",\n    \"pageAccessToken\": \"FB_Page_Access_Token\"\n  }\n}\n````\n\n#### Messenger Bot 接收訊息測試(POST)\n\n一樣參考下方的範例：\n\n````json\n{\n    \"body\": {\n        \"object\": \"page\",\n        \"entry\": [\n            {\n                \"messaging\": [\n                    {\n                        \"sender\": {\n                            \"id\": \"<Your_Facebook_Id>\"\n                        },\n                        \"message\": {\n                            \"text\": \"test\"\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    \"method\": \"POST\",\n    \"stage\": \"dev\",\n    \"stageVariables\": {\n        \"validationToken\": \"FB_Page_Access_Token\",\n        \"pageAccessToken\": \"Your_Validation_Token\"\n    }\n}\n````\n\n- __Your_Facebook_Id__ : 這個比較麻煩，可能得自己去 FB Developer 提供的 [Graph API Explorer](https://developers.facebook.com/tools/explorer/) 上面查詢\n  - 先點下 Get Token, 然後直接確定\n  - 接著預設應該會取出用 user name 與 id，就可以得到自己的 id 了，參考下圖\n\n![Graph API 1](/images/serverless/GraphAPIExplorer1.jpg)![Graph API 2](/images/serverless/GraphAPIExplorer2.png)\n\n\n<a name=\"fb-page-webhook-setting\"></a>\n## FB Page Webhook Setting\n\n總算快大功告成了，還記得之前一直有提到的 Your_Validation_Token 吧！在設定 webhook 時就會派上用場啦！\n\n- 進入 facebook developer app 頁面\n- 切換到 Messenger 產品分頁\n- 點選 Setup Webhooks\n- 接著填入 API Gateway endpoints 的 GET 網址與要跟程式驗證的內容\n  - endpoints 網址在發佈時，會顯示在 terminal 上\n  - 或是使用`serverless info`來檢視資訊\n- 驗證通過後，記得在下方訂閱要執行 bot 的粉絲專頁\n\n![Facebook Webhooks Setting](/images/serverless/fb-webhook.png)![Subscribe Page](/images/serverless/subscribe_page.png)\n\n如果順利驗證通過，就可以開始跟機器人對話啦！\n\n![Messenger Chat](/images/serverless/chat-sample.jpg)\n\n\n<a name=\"refrence\"></a>\n# Refrence\n\n[Serverless Framerowk](https://serverless.com)\n[Serverless Github](https://github.com/serverless/serverless)\n[實作 Serverless 的 facebook messenger bot](http://denny.qollie.com/2016/05/29/sls-fb-bot/)\n[Building a Serverless Facebook messenger chatbot](http://justserverless.com/blog/building-a-serverless-facebook-messenger-chatbot/)\n","slug":"serverless-facebook-messenger-bot","published":1,"updated":"2016-10-08T03:35:14.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46gio0010scsc127yqbu1","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#build-a-serverless-facebook-messenger-chatbot\">Build a Serverless Facebook Messenger Chatbot</a><ul>\n<li><a href=\"#準備工具與服務\">準備工具與服務</a><ul>\n<li><a href=\"#安裝-serverless-framework\">安裝 Serverless Framework</a></li>\n<li><a href=\"#aws-前置作業---iam\">AWS 前置作業 - IAM</a></li>\n<li><a href=\"#facebook-前置作業\">Facebook 前置作業</a></li>\n</ul>\n</li>\n<li><a href=\"#建立-serverless-專案\">建立 Serverless 專案</a></li>\n<li><a href=\"#serverless-環境設定\">Serverless 環境設定</a></li>\n<li><a href=\"#functoin-參考\">Functoin 參考</a></li>\n<li><a href=\"#aws-上服務檢查\">AWS 上服務檢查</a><ul>\n<li><a href=\"#api-gateway-設定確認\">API Gateway 設定確認</a></li>\n<li><a href=\"#lambda-確認\">Lambda 確認</a></li>\n</ul>\n</li>\n<li><a href=\"#fb-page-webhook-setting\">FB Page Webhook Setting</a></li>\n</ul>\n</li>\n<li><a href=\"#refrence\">Refrence</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"build-a-serverless-facebook-messenger-chatbot\"></a></p>\n<h1 id=\"Build-a-Serverless-Facebook-Messenger-Chatbot\"><a href=\"#Build-a-Serverless-Facebook-Messenger-Chatbot\" class=\"headerlink\" title=\"Build a Serverless Facebook Messenger Chatbot\"></a>Build a Serverless Facebook Messenger Chatbot</h1><p><a name=\"準備工具與服務\"></a></p>\n<h2 id=\"準備工具與服務\"><a href=\"#準備工具與服務\" class=\"headerlink\" title=\"準備工具與服務\"></a>準備工具與服務</h2><ul>\n<li>Serverless Framework (I use v1.0-rc1)</li>\n<li>AWS Account</li>\n<li>Facebook Page</li>\n<li>Facebook Developer</li>\n</ul>\n<p><a name=\"安裝-serverless-framework\"></a></p>\n<h3 id=\"安裝-Serverless-Framework\"><a href=\"#安裝-Serverless-Framework\" class=\"headerlink\" title=\"安裝 Serverless Framework\"></a>安裝 Serverless Framework</h3><p>serverless 目前(2016/10/06)的版本是 v1.0 rc1，過去在網路上找到的教學文都是 v.0.5.許多，從 JSON 格式轉換成 YAML 格式，這部份搞了我很久，加上一些變數設定等，花了一兩天在摸索。</p>\n<p>Serverless Framework 安裝指令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g serverless</div></pre></td></tr></table></figure>\n<p>這裡說明一下 Serverless framework 大致上需要以及會使用到的 AWS 服務項目</p>\n<ul>\n<li>IAM : 權限管理，讓本機端寫好的東西可以部屬到 AWS 各項資源與服務上的權限</li>\n<li>CloudFormation : AWS 資源與各項服務配置的模版，目前 v1.0 版改用 YAML 格式</li>\n<li>S3 : 資料儲存空間，存放 coludformation 模板與發布的 function + libraries zip檔的地方</li>\n<li>Lambda : 在接收某些觸發條件後執行邏輯運算功能的服務，也就是用來執行聊天機器人的功能</li>\n<li>API Gateway : 用來管理後台 Server or Lambda 等的 API 接口服務，這裡是用來觸發 Lambda function 執行運算</li>\n<li>CloudWatch : 可以檢視 Lambda 上 Function 執行時所留下的 log，協助開發中 Debug 使用</li>\n</ul>\n<p><a name=\"aws-前置作業---iam\"></a></p>\n<h3 id=\"AWS-前置作業-IAM\"><a href=\"#AWS-前置作業-IAM\" class=\"headerlink\" title=\"AWS 前置作業 - IAM\"></a>AWS 前置作業 - IAM</h3><p>如果已經有安裝 AWS 提供的 command line tool (<a href=\"https://aws.amazon.com/tw/cli/\" target=\"_blank\" rel=\"external\">aws-cli</a>)，可能會方便一點？沒有也沒關係，因為我也是到 aws console 介面上慢慢做的</p>\n<h4 id=\"建立-IAM-user-並給予權限-教學\"><a href=\"#建立-IAM-user-並給予權限-教學\" class=\"headerlink\" title=\"建立 IAM user 並給予權限 (教學)\"></a>建立 IAM user 並給予權限 (<a href=\"https://github.com/serverless/serverless/blob/master/docs/02-providers/aws/01-setup.md#amazon-web-services\" target=\"_blank\" rel=\"external\">教學</a>)</h4><ol>\n<li>在 AWS Console 介面，在進入 IAM 介面</li>\n<li>建立使用者，命名 serverless-admin</li>\n<li>記下 Access Key Id 與 Secret Access Key，或把檔案也下載下來</li>\n<li>添加 AdministratorAccess 權限</li>\n</ol>\n<p><img src=\"/images/serverless/IAM-1.jpg\" alt=\"IAM-1\"><br><img src=\"/images/serverless/IAM-2.jpg\" alt=\"IAM-1\"></p>\n<h4 id=\"在本機設定-AWS-API-Key-amp-Secret\"><a href=\"#在本機設定-AWS-API-Key-amp-Secret\" class=\"headerlink\" title=\"在本機設定 AWS API Key &amp; Secret\"></a>在本機設定 AWS API Key &amp; Secret</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">export AWS_ACCESS_KEY_ID=&lt;key&gt;</div><div class=\"line\">export AWS_SECRET_ACCESS_KEY=&lt;secret&gt;</div></pre></td></tr></table></figure>\n<p>或者使用 aws-cli 來設定 aws config</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ aws configure</div><div class=\"line\">AWS Access Key ID [None]: &lt;key&gt;</div><div class=\"line\">AWS Secret Access Key [None]: &lt;secret&gt;</div><div class=\"line\">Default region name [None]: ap-northeast-1</div><div class=\"line\">Default output format [None]: ENTER</div></pre></td></tr></table></figure>\n<p><a name=\"facebook-前置作業\"></a></p>\n<h3 id=\"Facebook-前置作業\"><a href=\"#Facebook-前置作業\" class=\"headerlink\" title=\"Facebook 前置作業\"></a>Facebook 前置作業</h3><h4 id=\"建立-facebook-粉絲專頁\"><a href=\"#建立-facebook-粉絲專頁\" class=\"headerlink\" title=\"建立 facebook 粉絲專頁\"></a>建立 facebook 粉絲專頁</h4><p>為了測試聊天機器人，在臉書建立一個粉絲專業吧！<br>所以這邊就不在針對這部份寫教學了</p>\n<p><a name=\"建立-facevook-application\"></a></p>\n<h4 id=\"建立-facevook-application\"><a href=\"#建立-facevook-application\" class=\"headerlink\" title=\"建立 facevook application\"></a>建立 facevook application</h4><ol>\n<li>進入 Facebook Developer 建立一個新的 APP</li>\n<li>替這個 APP 加入 Messenger 這項產品</li>\n</ol>\n<p><img src=\"/images/serverless/fb-page1.png\" alt=\"Create FB Page\"><img src=\"/images/serverless/fb-page2.png\" alt=\"Add Messenger\"></p>\n<p><a name=\"建立-serverless-專案\"></a></p>\n<h2 id=\"建立-Serverless-專案\"><a href=\"#建立-Serverless-專案\" class=\"headerlink\" title=\"建立 Serverless 專案\"></a>建立 Serverless 專案</h2><p>因為使用到 Lambda，所以有 Node.js, Python, Java 等樣板可以選擇，這裡使用 Node.js 來做示範(小弟不才，雖然 nodejs 也不熟，但另外兩種語言更是悲劇)</p>\n<p>建立專案指令：(使用 Node.js 樣板)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># 採用 nodejs 基本模板, 並將專案建立在 sls-fb-msg-bot 目錄下</div><div class=\"line\">serverless create --template aws-nodejs --path sls-fb-msg-bot</div></pre></td></tr></table></figure>\n<p>完成這建立專案指令後，應該會建立好指定的目錄名稱，並且在裡面產生三個檔案，結構如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">sls-fb-msg-bot</div><div class=\"line\">├── event.json</div><div class=\"line\">├── handler.js</div><div class=\"line\">└── serverless.yml</div></pre></td></tr></table></figure>\n<p><a name=\"serverless-環境設定\"></a></p>\n<h2 id=\"Serverless-環境設定\"><a href=\"#Serverless-環境設定\" class=\"headerlink\" title=\"Serverless 環境設定\"></a>Serverless 環境設定</h2><p>可以參考我的範例 (<a href=\"https://github.com/SoarLin/serverless-fb-messenger-bot\" target=\"_blank\" rel=\"external\">github</a>)，這裡需要安裝一些必要的套件</p>\n<h4 id=\"npm-套件安裝\"><a href=\"#npm-套件安裝\" class=\"headerlink\" title=\"npm 套件安裝\"></a>npm 套件安裝</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm init</div><div class=\"line\"># 經過一連串的 enter，產生 package.json 後，繼續安裝套件</div><div class=\"line\">npm install --save lodash request serverless-plugin-stage-variables</div></pre></td></tr></table></figure>\n<p>而 serverless 的環境設定 yml 檔，參考如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">service: sls-fb-msg-bot</div><div class=\"line\"></div><div class=\"line\">provider:</div><div class=\"line\">  name: aws</div><div class=\"line\">  runtime: nodejs4.3</div><div class=\"line\"></div><div class=\"line\">  # You can change your stage and aws region</div><div class=\"line\">  stage: dev</div><div class=\"line\">  region: ap-northeast-1</div><div class=\"line\"></div><div class=\"line\">functions:</div><div class=\"line\">  webhook:</div><div class=\"line\">    handler: handler.webhook</div><div class=\"line\">    events:</div><div class=\"line\">      - http:</div><div class=\"line\">          path: webhook</div><div class=\"line\">          method: GET</div><div class=\"line\">      - http:</div><div class=\"line\">          path: webhook</div><div class=\"line\">          method: POST</div><div class=\"line\">          response:</div><div class=\"line\">            template: &apos;&#123; &quot;body&quot;: &quot;$input.json(&apos;&apos;$&apos;&apos;)&quot; &#125;&apos;</div><div class=\"line\"></div><div class=\"line\">custom:</div><div class=\"line\">  stageVariables:</div><div class=\"line\"></div><div class=\"line\">    # Remeber to setting your variables</div><div class=\"line\">    pageAccessToken: &apos;FB_Page_Access_Token&apos;</div><div class=\"line\">    validationToken: &apos;Your_Validation_Token&apos;</div><div class=\"line\"></div><div class=\"line\">plugins:</div><div class=\"line\">  - serverless-plugin-stage-variables</div></pre></td></tr></table></figure>\n<p><strong>注意1:</strong> stage 與 region 請改成自己需要的內容，這邊設定是發佈到日本東京的機房</p>\n<p><strong>注意2:</strong> FB_Page_Access_Token 請開啟 fb developer app，在 Messenger 的 Setting 中的 「Token Generation」內選好粉絲專頁來產生</p>\n<p><img src=\"/images/serverless/fb-page-access-token.png\" alt=\"Page Access Token\"></p>\n<p><strong>注意3:</strong> Your_Validation_Token 是 FB 要與 webhook API 溝通時的驗證碼，設定一個自己喜歡的密碼，這裡會與 FB_Page_Access_Token 都寫入 API Gateway Stages 內的 Stage Variables，之後再透過 Lambda 撈出來</p>\n<p><img src=\"/images/serverless/FB-APIGateway.jpg\" alt=\"Verify Token\"></p>\n<p><a name=\"functoin-參考\"></a></p>\n<h2 id=\"Functoin-參考\"><a href=\"#Functoin-參考\" class=\"headerlink\" title=\"Functoin 參考\"></a>Functoin 參考</h2><p>serverless.yml 的設定都搞定後，剩下的就是 handle.js 這個用來執行邏輯運算的功能程式了，我得先承認我是到處參考東拼西湊出來的程式碼，所以真的就參考就好。</p>\n<p>想了解更詳細 <a href=\"https://developers.facebook.com/docs/messenger-platform\" target=\"_blank\" rel=\"external\">Messenger API</a>，麻煩還是到 Facebook 所提供的<a href=\"https://developers.facebook.com/docs/messenger-platform\" target=\"_blank\" rel=\"external\">文件</a>去研究吧！這裡僅節錄部分程式碼並在稍微精簡一些(有可能無法實行)，正確完成內容還是請到我的 <a href=\"https://github.com/SoarLin/serverless-fb-messenger-bot\" target=\"_blank\" rel=\"external\">github</a> 上去參考</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendTextMessage</span>(<span class=\"params\">recipientId, messageText</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        recipient: &#123; id: recipientId &#125;,</div><div class=\"line\">        message: &#123; text: messageText &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">object</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(object, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports.webhook = (event, context, callback) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Event: '</span>, display(event));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// FB Page access token</span></div><div class=\"line\">    <span class=\"keyword\">const</span> PAGE_ACCESS_TOKEN = event.stageVariables.pageAccessToken;</div><div class=\"line\">    <span class=\"comment\">// FB webhook validation token</span></div><div class=\"line\">    <span class=\"keyword\">const</span> VALIDATION_TOKEN = event.stageVariables.validationToken;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!VALIDATION_TOKEN) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">\"Missing validation token\"</span>);</div><div class=\"line\">        context.fail(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing validation token'</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSendAPI</span>(<span class=\"params\">messageData</span>) </span>&#123;</div><div class=\"line\">        request(&#123;</div><div class=\"line\">            uri: <span class=\"string\">'https://graph.facebook.com/v2.6/me/messages'</span>,</div><div class=\"line\">            qs: &#123; access_token: PAGE_ACCESS_TOKEN &#125;,</div><div class=\"line\">            method: <span class=\"string\">'POST'</span>,</div><div class=\"line\">            json: messageData</div><div class=\"line\">        &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                context.succeed(<span class=\"string\">\"Successfully\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                context.fail(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Failed Send API'</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (event.method === <span class=\"string\">\"GET\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> query = event.query;</div><div class=\"line\">        <span class=\"keyword\">if</span> (query[<span class=\"string\">'hub.mode'</span>] === <span class=\"string\">'subscribe'</span> &amp;&amp;</div><div class=\"line\">            query[<span class=\"string\">'hub.verify_token'</span>] === VALIDATION_TOKEN) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Validating webhook\"</span>);</div><div class=\"line\">            context.succeed(<span class=\"built_in\">parseInt</span>(query[<span class=\"string\">'hub.challenge'</span>]));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            context.fail(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'[403] Failed validation.'</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event.method === <span class=\"string\">\"POST\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> data = event.body;</div><div class=\"line\">        <span class=\"keyword\">if</span> (data.object == <span class=\"string\">'page'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> messagingList = data.entry[<span class=\"number\">0</span>].messaging;</div><div class=\"line\">            <span class=\"keyword\">var</span> messageData;</div><div class=\"line\"></div><div class=\"line\">            messagingList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">messagingEvent</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> senderId = messagingEvent.sender.id;</div><div class=\"line\">                <span class=\"keyword\">if</span> (messagingEvent.message) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Received user message</span></div><div class=\"line\">                    messageData = sendTextMessage(senderId, <span class=\"string\">\"Hello, I am messenger bot\"</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    messageData = sendTextMessage(senderId, <span class=\"string\">\"Webhook received other messagingEvent\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                callSendAPI(messageData);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        context.fail(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Unrecognized method \"'</span> + event.method + <span class=\"string\">'\"'</span>))</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>到了這邊，大致上 serverless 的設置都完成了，總算可以發佈到 AWS 上啦！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">serverless deploy</div></pre></td></tr></table></figure>\n<p><a name=\"aws-上服務檢查\"></a></p>\n<h2 id=\"AWS-上服務檢查\"><a href=\"#AWS-上服務檢查\" class=\"headerlink\" title=\"AWS 上服務檢查\"></a>AWS 上服務檢查</h2><p><a name=\"api-gateway-設定確認\"></a></p>\n<h3 id=\"API-Gateway-設定確認\"><a href=\"#API-Gateway-設定確認\" class=\"headerlink\" title=\"API Gateway 設定確認\"></a>API Gateway 設定確認</h3><p>首先檢查一下設定檔內寫的 State Variables 有沒有正確的被設定好</p>\n<p><img src=\"/images/serverless/API-Gateway1.png\" alt=\"API Gateway-1\"></p>\n<p>接著檢查 Get Method 中的 request template，這邊原本沒有設定，但應該會有圖中的預設樣板 code</p>\n<p><img src=\"/images/serverless/API-Gateway2.png\" alt=\"API Gateway-2\"></p>\n<p>然後再檢查 Post Method 中的 response template 是否有設定檔內寫的內容，如下圖</p>\n<p><img src=\"/images/serverless/API-Gateway3.png\" alt=\"API Gateway-3\"></p>\n<p><a name=\"lambda-確認\"></a></p>\n<h3 id=\"Lambda-確認\"><a href=\"#Lambda-確認\" class=\"headerlink\" title=\"Lambda 確認\"></a>Lambda 確認</h3><p>應該可以順利產生一組 function 命名格式為 <code>&lt;service_name&gt;-&lt;stage&gt;-&lt;function_name&gt;</code>，這裡的例子是 sls-fb-msg-bot-dev-webhook</p>\n<p><img src=\"/images/serverless/lambda.png\" alt=\"Lambda Function\"></p>\n<h4 id=\"FB-連結-Webhook-測試-GET\"><a href=\"#FB-連結-Webhook-測試-GET\" class=\"headerlink\" title=\"FB 連結 Webhook 測試(GET)\"></a>FB 連結 Webhook 測試(GET)</h4><p>可以參考下面範例:</p>\n<ul>\n<li><strong>hub.verify_token</strong> 與 <strong>validationToken</strong> 記得設成一樣</li>\n<li><strong>hub.challenge</strong> 是由 FB 驗證時傳過來的一組數值，自行測試時隨便打都可以</li>\n<li><strong>pageAccessToken</strong> 記得填入 FB 產生的粉絲專頁存取權杖</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"body\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"GET\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"stage\"</span>: <span class=\"string\">\"dev\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"hub.mode\"</span>: <span class=\"string\">\"subscribe\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"hub.challenge\"</span>: <span class=\"string\">\"29606336\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"hub.verify_token\"</span>: <span class=\"string\">\"Your_Validation_Token\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"stageVariables\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"validationToken\"</span>: <span class=\"string\">\"Your_Validation_Token\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"pageAccessToken\"</span>: <span class=\"string\">\"FB_Page_Access_Token\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Messenger-Bot-接收訊息測試-POST\"><a href=\"#Messenger-Bot-接收訊息測試-POST\" class=\"headerlink\" title=\"Messenger Bot 接收訊息測試(POST)\"></a>Messenger Bot 接收訊息測試(POST)</h4><p>一樣參考下方的範例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"body\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"object\"</span>: <span class=\"string\">\"page\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"entry\"</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">\"messaging\"</span>: [</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"attr\">\"sender\"</span>: &#123;</div><div class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"&lt;Your_Facebook_Id&gt;\"</span></div><div class=\"line\">                        &#125;,</div><div class=\"line\">                        <span class=\"attr\">\"message\"</span>: &#123;</div><div class=\"line\">                            <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"test\"</span></div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                ]</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"stage\"</span>: <span class=\"string\">\"dev\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"stageVariables\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"validationToken\"</span>: <span class=\"string\">\"FB_Page_Access_Token\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"pageAccessToken\"</span>: <span class=\"string\">\"Your_Validation_Token\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Your_Facebook_Id</strong> : 這個比較麻煩，可能得自己去 FB Developer 提供的 <a href=\"https://developers.facebook.com/tools/explorer/\" target=\"_blank\" rel=\"external\">Graph API Explorer</a> 上面查詢<ul>\n<li>先點下 Get Token, 然後直接確定</li>\n<li>接著預設應該會取出用 user name 與 id，就可以得到自己的 id 了，參考下圖</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/serverless/GraphAPIExplorer1.jpg\" alt=\"Graph API 1\"><img src=\"/images/serverless/GraphAPIExplorer2.png\" alt=\"Graph API 2\"></p>\n<p><a name=\"fb-page-webhook-setting\"></a></p>\n<h2 id=\"FB-Page-Webhook-Setting\"><a href=\"#FB-Page-Webhook-Setting\" class=\"headerlink\" title=\"FB Page Webhook Setting\"></a>FB Page Webhook Setting</h2><p>總算快大功告成了，還記得之前一直有提到的 Your_Validation_Token 吧！在設定 webhook 時就會派上用場啦！</p>\n<ul>\n<li>進入 facebook developer app 頁面</li>\n<li>切換到 Messenger 產品分頁</li>\n<li>點選 Setup Webhooks</li>\n<li>接著填入 API Gateway endpoints 的 GET 網址與要跟程式驗證的內容<ul>\n<li>endpoints 網址在發佈時，會顯示在 terminal 上</li>\n<li>或是使用<code>serverless info</code>來檢視資訊</li>\n</ul>\n</li>\n<li>驗證通過後，記得在下方訂閱要執行 bot 的粉絲專頁</li>\n</ul>\n<p><img src=\"/images/serverless/fb-webhook.png\" alt=\"Facebook Webhooks Setting\"><img src=\"/images/serverless/subscribe_page.png\" alt=\"Subscribe Page\"></p>\n<p>如果順利驗證通過，就可以開始跟機器人對話啦！</p>\n<p><img src=\"/images/serverless/chat-sample.jpg\" alt=\"Messenger Chat\"></p>\n<p><a name=\"refrence\"></a></p>\n<h1 id=\"Refrence\"><a href=\"#Refrence\" class=\"headerlink\" title=\"Refrence\"></a>Refrence</h1><p><a href=\"https://serverless.com\" target=\"_blank\" rel=\"external\">Serverless Framerowk</a><br><a href=\"https://github.com/serverless/serverless\" target=\"_blank\" rel=\"external\">Serverless Github</a><br><a href=\"http://denny.qollie.com/2016/05/29/sls-fb-bot/\" target=\"_blank\" rel=\"external\">實作 Serverless 的 facebook messenger bot</a><br><a href=\"http://justserverless.com/blog/building-a-serverless-facebook-messenger-chatbot/\" target=\"_blank\" rel=\"external\">Building a Serverless Facebook messenger chatbot</a></p>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#build-a-serverless-facebook-messenger-chatbot\">Build a Serverless Facebook Messenger Chatbot</a><ul>\n<li><a href=\"#準備工具與服務\">準備工具與服務</a><ul>\n<li><a href=\"#安裝-serverless-framework\">安裝 Serverless Framework</a></li>\n<li><a href=\"#aws-前置作業---iam\">AWS 前置作業 - IAM</a></li>\n<li><a href=\"#facebook-前置作業\">Facebook 前置作業</a></li>\n</ul>\n</li>\n<li><a href=\"#建立-serverless-專案\">建立 Serverless 專案</a></li>\n<li><a href=\"#serverless-環境設定\">Serverless 環境設定</a></li>\n<li><a href=\"#functoin-參考\">Functoin 參考</a></li>\n<li><a href=\"#aws-上服務檢查\">AWS 上服務檢查</a><ul>\n<li><a href=\"#api-gateway-設定確認\">API Gateway 設定確認</a></li>\n<li><a href=\"#lambda-確認\">Lambda 確認</a></li>\n</ul>\n</li>\n<li><a href=\"#fb-page-webhook-setting\">FB Page Webhook Setting</a></li>\n</ul>\n</li>\n<li><a href=\"#refrence\">Refrence</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"build-a-serverless-facebook-messenger-chatbot\"></a></p>\n<h1 id=\"Build-a-Serverless-Facebook-Messenger-Chatbot\"><a href=\"#Build-a-Serverless-Facebook-Messenger-Chatbot\" class=\"headerlink\" title=\"Build a Serverless Facebook Messenger Chatbot\"></a>Build a Serverless Facebook Messenger Chatbot</h1><p><a name=\"準備工具與服務\"></a></p>\n<h2 id=\"準備工具與服務\"><a href=\"#準備工具與服務\" class=\"headerlink\" title=\"準備工具與服務\"></a>準備工具與服務</h2><ul>\n<li>Serverless Framework (I use v1.0-rc1)</li>\n<li>AWS Account</li>\n<li>Facebook Page</li>\n<li>Facebook Developer</li>\n</ul>\n<p><a name=\"安裝-serverless-framework\"></a></p>\n<h3 id=\"安裝-Serverless-Framework\"><a href=\"#安裝-Serverless-Framework\" class=\"headerlink\" title=\"安裝 Serverless Framework\"></a>安裝 Serverless Framework</h3><p>serverless 目前(2016/10/06)的版本是 v1.0 rc1，過去在網路上找到的教學文都是 v.0.5.許多，從 JSON 格式轉換成 YAML 格式，這部份搞了我很久，加上一些變數設定等，花了一兩天在摸索。</p>\n<p>Serverless Framework 安裝指令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g serverless</div></pre></td></tr></table></figure>\n<p>這裡說明一下 Serverless framework 大致上需要以及會使用到的 AWS 服務項目</p>\n<ul>\n<li>IAM : 權限管理，讓本機端寫好的東西可以部屬到 AWS 各項資源與服務上的權限</li>\n<li>CloudFormation : AWS 資源與各項服務配置的模版，目前 v1.0 版改用 YAML 格式</li>\n<li>S3 : 資料儲存空間，存放 coludformation 模板與發布的 function + libraries zip檔的地方</li>\n<li>Lambda : 在接收某些觸發條件後執行邏輯運算功能的服務，也就是用來執行聊天機器人的功能</li>\n<li>API Gateway : 用來管理後台 Server or Lambda 等的 API 接口服務，這裡是用來觸發 Lambda function 執行運算</li>\n<li>CloudWatch : 可以檢視 Lambda 上 Function 執行時所留下的 log，協助開發中 Debug 使用</li>\n</ul>\n<p><a name=\"aws-前置作業---iam\"></a></p>\n<h3 id=\"AWS-前置作業-IAM\"><a href=\"#AWS-前置作業-IAM\" class=\"headerlink\" title=\"AWS 前置作業 - IAM\"></a>AWS 前置作業 - IAM</h3><p>如果已經有安裝 AWS 提供的 command line tool (<a href=\"https://aws.amazon.com/tw/cli/\">aws-cli</a>)，可能會方便一點？沒有也沒關係，因為我也是到 aws console 介面上慢慢做的</p>\n<h4 id=\"建立-IAM-user-並給予權限-教學\"><a href=\"#建立-IAM-user-並給予權限-教學\" class=\"headerlink\" title=\"建立 IAM user 並給予權限 (教學)\"></a>建立 IAM user 並給予權限 (<a href=\"https://github.com/serverless/serverless/blob/master/docs/02-providers/aws/01-setup.md#amazon-web-services\">教學</a>)</h4><ol>\n<li>在 AWS Console 介面，在進入 IAM 介面</li>\n<li>建立使用者，命名 serverless-admin</li>\n<li>記下 Access Key Id 與 Secret Access Key，或把檔案也下載下來</li>\n<li>添加 AdministratorAccess 權限</li>\n</ol>\n<p><img src=\"/images/serverless/IAM-1.jpg\" alt=\"IAM-1\"><br><img src=\"/images/serverless/IAM-2.jpg\" alt=\"IAM-1\"></p>\n<h4 id=\"在本機設定-AWS-API-Key-amp-Secret\"><a href=\"#在本機設定-AWS-API-Key-amp-Secret\" class=\"headerlink\" title=\"在本機設定 AWS API Key &amp; Secret\"></a>在本機設定 AWS API Key &amp; Secret</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">export AWS_ACCESS_KEY_ID=&lt;key&gt;</div><div class=\"line\">export AWS_SECRET_ACCESS_KEY=&lt;secret&gt;</div></pre></td></tr></table></figure>\n<p>或者使用 aws-cli 來設定 aws config</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ aws configure</div><div class=\"line\">AWS Access Key ID [None]: &lt;key&gt;</div><div class=\"line\">AWS Secret Access Key [None]: &lt;secret&gt;</div><div class=\"line\">Default region name [None]: ap-northeast-1</div><div class=\"line\">Default output format [None]: ENTER</div></pre></td></tr></table></figure>\n<p><a name=\"facebook-前置作業\"></a></p>\n<h3 id=\"Facebook-前置作業\"><a href=\"#Facebook-前置作業\" class=\"headerlink\" title=\"Facebook 前置作業\"></a>Facebook 前置作業</h3><h4 id=\"建立-facebook-粉絲專頁\"><a href=\"#建立-facebook-粉絲專頁\" class=\"headerlink\" title=\"建立 facebook 粉絲專頁\"></a>建立 facebook 粉絲專頁</h4><p>為了測試聊天機器人，在臉書建立一個粉絲專業吧！<br>所以這邊就不在針對這部份寫教學了</p>\n<p><a name=\"建立-facevook-application\"></a></p>\n<h4 id=\"建立-facevook-application\"><a href=\"#建立-facevook-application\" class=\"headerlink\" title=\"建立 facevook application\"></a>建立 facevook application</h4><ol>\n<li>進入 Facebook Developer 建立一個新的 APP</li>\n<li>替這個 APP 加入 Messenger 這項產品</li>\n</ol>\n<p><img src=\"/images/serverless/fb-page1.png\" alt=\"Create FB Page\"><img src=\"/images/serverless/fb-page2.png\" alt=\"Add Messenger\"></p>\n<p><a name=\"建立-serverless-專案\"></a></p>\n<h2 id=\"建立-Serverless-專案\"><a href=\"#建立-Serverless-專案\" class=\"headerlink\" title=\"建立 Serverless 專案\"></a>建立 Serverless 專案</h2><p>因為使用到 Lambda，所以有 Node.js, Python, Java 等樣板可以選擇，這裡使用 Node.js 來做示範(小弟不才，雖然 nodejs 也不熟，但另外兩種語言更是悲劇)</p>\n<p>建立專案指令：(使用 Node.js 樣板)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># 採用 nodejs 基本模板, 並將專案建立在 sls-fb-msg-bot 目錄下</div><div class=\"line\">serverless create --template aws-nodejs --path sls-fb-msg-bot</div></pre></td></tr></table></figure>\n<p>完成這建立專案指令後，應該會建立好指定的目錄名稱，並且在裡面產生三個檔案，結構如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">sls-fb-msg-bot</div><div class=\"line\">├── event.json</div><div class=\"line\">├── handler.js</div><div class=\"line\">└── serverless.yml</div></pre></td></tr></table></figure>\n<p><a name=\"serverless-環境設定\"></a></p>\n<h2 id=\"Serverless-環境設定\"><a href=\"#Serverless-環境設定\" class=\"headerlink\" title=\"Serverless 環境設定\"></a>Serverless 環境設定</h2><p>可以參考我的範例 (<a href=\"https://github.com/SoarLin/serverless-fb-messenger-bot\">github</a>)，這裡需要安裝一些必要的套件</p>\n<h4 id=\"npm-套件安裝\"><a href=\"#npm-套件安裝\" class=\"headerlink\" title=\"npm 套件安裝\"></a>npm 套件安裝</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm init</div><div class=\"line\"># 經過一連串的 enter，產生 package.json 後，繼續安裝套件</div><div class=\"line\">npm install --save lodash request serverless-plugin-stage-variables</div></pre></td></tr></table></figure>\n<p>而 serverless 的環境設定 yml 檔，參考如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">service: sls-fb-msg-bot</div><div class=\"line\"></div><div class=\"line\">provider:</div><div class=\"line\">  name: aws</div><div class=\"line\">  runtime: nodejs4.3</div><div class=\"line\"></div><div class=\"line\">  # You can change your stage and aws region</div><div class=\"line\">  stage: dev</div><div class=\"line\">  region: ap-northeast-1</div><div class=\"line\"></div><div class=\"line\">functions:</div><div class=\"line\">  webhook:</div><div class=\"line\">    handler: handler.webhook</div><div class=\"line\">    events:</div><div class=\"line\">      - http:</div><div class=\"line\">          path: webhook</div><div class=\"line\">          method: GET</div><div class=\"line\">      - http:</div><div class=\"line\">          path: webhook</div><div class=\"line\">          method: POST</div><div class=\"line\">          response:</div><div class=\"line\">            template: &apos;&#123; &quot;body&quot;: &quot;$input.json(&apos;&apos;$&apos;&apos;)&quot; &#125;&apos;</div><div class=\"line\"></div><div class=\"line\">custom:</div><div class=\"line\">  stageVariables:</div><div class=\"line\"></div><div class=\"line\">    # Remeber to setting your variables</div><div class=\"line\">    pageAccessToken: &apos;FB_Page_Access_Token&apos;</div><div class=\"line\">    validationToken: &apos;Your_Validation_Token&apos;</div><div class=\"line\"></div><div class=\"line\">plugins:</div><div class=\"line\">  - serverless-plugin-stage-variables</div></pre></td></tr></table></figure>\n<p><strong>注意1:</strong> stage 與 region 請改成自己需要的內容，這邊設定是發佈到日本東京的機房</p>\n<p><strong>注意2:</strong> FB_Page_Access_Token 請開啟 fb developer app，在 Messenger 的 Setting 中的 「Token Generation」內選好粉絲專頁來產生</p>\n<p><img src=\"/images/serverless/fb-page-access-token.png\" alt=\"Page Access Token\"></p>\n<p><strong>注意3:</strong> Your_Validation_Token 是 FB 要與 webhook API 溝通時的驗證碼，設定一個自己喜歡的密碼，這裡會與 FB_Page_Access_Token 都寫入 API Gateway Stages 內的 Stage Variables，之後再透過 Lambda 撈出來</p>\n<p><img src=\"/images/serverless/FB-APIGateway.jpg\" alt=\"Verify Token\"></p>\n<p><a name=\"functoin-參考\"></a></p>\n<h2 id=\"Functoin-參考\"><a href=\"#Functoin-參考\" class=\"headerlink\" title=\"Functoin 參考\"></a>Functoin 參考</h2><p>serverless.yml 的設定都搞定後，剩下的就是 handle.js 這個用來執行邏輯運算的功能程式了，我得先承認我是到處參考東拼西湊出來的程式碼，所以真的就參考就好。</p>\n<p>想了解更詳細 <a href=\"https://developers.facebook.com/docs/messenger-platform\">Messenger API</a>，麻煩還是到 Facebook 所提供的<a href=\"https://developers.facebook.com/docs/messenger-platform\">文件</a>去研究吧！這裡僅節錄部分程式碼並在稍微精簡一些(有可能無法實行)，正確完成內容還是請到我的 <a href=\"https://github.com/SoarLin/serverless-fb-messenger-bot\">github</a> 上去參考</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendTextMessage</span>(<span class=\"params\">recipientId, messageText</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        recipient: &#123; id: recipientId &#125;,</div><div class=\"line\">        message: &#123; text: messageText &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">object</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(object, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports.webhook = (event, context, callback) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Event: '</span>, display(event));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// FB Page access token</span></div><div class=\"line\">    <span class=\"keyword\">const</span> PAGE_ACCESS_TOKEN = event.stageVariables.pageAccessToken;</div><div class=\"line\">    <span class=\"comment\">// FB webhook validation token</span></div><div class=\"line\">    <span class=\"keyword\">const</span> VALIDATION_TOKEN = event.stageVariables.validationToken;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!VALIDATION_TOKEN) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">\"Missing validation token\"</span>);</div><div class=\"line\">        context.fail(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing validation token'</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSendAPI</span>(<span class=\"params\">messageData</span>) </span>&#123;</div><div class=\"line\">        request(&#123;</div><div class=\"line\">            uri: <span class=\"string\">'https://graph.facebook.com/v2.6/me/messages'</span>,</div><div class=\"line\">            qs: &#123; access_token: PAGE_ACCESS_TOKEN &#125;,</div><div class=\"line\">            method: <span class=\"string\">'POST'</span>,</div><div class=\"line\">            json: messageData</div><div class=\"line\">        &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                context.succeed(<span class=\"string\">\"Successfully\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                context.fail(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Failed Send API'</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (event.method === <span class=\"string\">\"GET\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> query = event.query;</div><div class=\"line\">        <span class=\"keyword\">if</span> (query[<span class=\"string\">'hub.mode'</span>] === <span class=\"string\">'subscribe'</span> &amp;&amp;</div><div class=\"line\">            query[<span class=\"string\">'hub.verify_token'</span>] === VALIDATION_TOKEN) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Validating webhook\"</span>);</div><div class=\"line\">            context.succeed(<span class=\"built_in\">parseInt</span>(query[<span class=\"string\">'hub.challenge'</span>]));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            context.fail(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'[403] Failed validation.'</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event.method === <span class=\"string\">\"POST\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> data = event.body;</div><div class=\"line\">        <span class=\"keyword\">if</span> (data.object == <span class=\"string\">'page'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> messagingList = data.entry[<span class=\"number\">0</span>].messaging;</div><div class=\"line\">            <span class=\"keyword\">var</span> messageData;</div><div class=\"line\"></div><div class=\"line\">            messagingList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">messagingEvent</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> senderId = messagingEvent.sender.id;</div><div class=\"line\">                <span class=\"keyword\">if</span> (messagingEvent.message) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Received user message</span></div><div class=\"line\">                    messageData = sendTextMessage(senderId, <span class=\"string\">\"Hello, I am messenger bot\"</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    messageData = sendTextMessage(senderId, <span class=\"string\">\"Webhook received other messagingEvent\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                callSendAPI(messageData);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        context.fail(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Unrecognized method \"'</span> + event.method + <span class=\"string\">'\"'</span>))</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>到了這邊，大致上 serverless 的設置都完成了，總算可以發佈到 AWS 上啦！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">serverless deploy</div></pre></td></tr></table></figure>\n<p><a name=\"aws-上服務檢查\"></a></p>\n<h2 id=\"AWS-上服務檢查\"><a href=\"#AWS-上服務檢查\" class=\"headerlink\" title=\"AWS 上服務檢查\"></a>AWS 上服務檢查</h2><p><a name=\"api-gateway-設定確認\"></a></p>\n<h3 id=\"API-Gateway-設定確認\"><a href=\"#API-Gateway-設定確認\" class=\"headerlink\" title=\"API Gateway 設定確認\"></a>API Gateway 設定確認</h3><p>首先檢查一下設定檔內寫的 State Variables 有沒有正確的被設定好</p>\n<p><img src=\"/images/serverless/API-Gateway1.png\" alt=\"API Gateway-1\"></p>\n<p>接著檢查 Get Method 中的 request template，這邊原本沒有設定，但應該會有圖中的預設樣板 code</p>\n<p><img src=\"/images/serverless/API-Gateway2.png\" alt=\"API Gateway-2\"></p>\n<p>然後再檢查 Post Method 中的 response template 是否有設定檔內寫的內容，如下圖</p>\n<p><img src=\"/images/serverless/API-Gateway3.png\" alt=\"API Gateway-3\"></p>\n<p><a name=\"lambda-確認\"></a></p>\n<h3 id=\"Lambda-確認\"><a href=\"#Lambda-確認\" class=\"headerlink\" title=\"Lambda 確認\"></a>Lambda 確認</h3><p>應該可以順利產生一組 function 命名格式為 <code>&lt;service_name&gt;-&lt;stage&gt;-&lt;function_name&gt;</code>，這裡的例子是 sls-fb-msg-bot-dev-webhook</p>\n<p><img src=\"/images/serverless/lambda.png\" alt=\"Lambda Function\"></p>\n<h4 id=\"FB-連結-Webhook-測試-GET\"><a href=\"#FB-連結-Webhook-測試-GET\" class=\"headerlink\" title=\"FB 連結 Webhook 測試(GET)\"></a>FB 連結 Webhook 測試(GET)</h4><p>可以參考下面範例:</p>\n<ul>\n<li><strong>hub.verify_token</strong> 與 <strong>validationToken</strong> 記得設成一樣</li>\n<li><strong>hub.challenge</strong> 是由 FB 驗證時傳過來的一組數值，自行測試時隨便打都可以</li>\n<li><strong>pageAccessToken</strong> 記得填入 FB 產生的粉絲專頁存取權杖</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"body\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"GET\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"stage\"</span>: <span class=\"string\">\"dev\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"hub.mode\"</span>: <span class=\"string\">\"subscribe\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"hub.challenge\"</span>: <span class=\"string\">\"29606336\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"hub.verify_token\"</span>: <span class=\"string\">\"Your_Validation_Token\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"stageVariables\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"validationToken\"</span>: <span class=\"string\">\"Your_Validation_Token\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"pageAccessToken\"</span>: <span class=\"string\">\"FB_Page_Access_Token\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Messenger-Bot-接收訊息測試-POST\"><a href=\"#Messenger-Bot-接收訊息測試-POST\" class=\"headerlink\" title=\"Messenger Bot 接收訊息測試(POST)\"></a>Messenger Bot 接收訊息測試(POST)</h4><p>一樣參考下方的範例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"body\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"object\"</span>: <span class=\"string\">\"page\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"entry\"</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">\"messaging\"</span>: [</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"attr\">\"sender\"</span>: &#123;</div><div class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"&lt;Your_Facebook_Id&gt;\"</span></div><div class=\"line\">                        &#125;,</div><div class=\"line\">                        <span class=\"attr\">\"message\"</span>: &#123;</div><div class=\"line\">                            <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"test\"</span></div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                ]</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"stage\"</span>: <span class=\"string\">\"dev\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"stageVariables\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"validationToken\"</span>: <span class=\"string\">\"FB_Page_Access_Token\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"pageAccessToken\"</span>: <span class=\"string\">\"Your_Validation_Token\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Your_Facebook_Id</strong> : 這個比較麻煩，可能得自己去 FB Developer 提供的 <a href=\"https://developers.facebook.com/tools/explorer/\">Graph API Explorer</a> 上面查詢<ul>\n<li>先點下 Get Token, 然後直接確定</li>\n<li>接著預設應該會取出用 user name 與 id，就可以得到自己的 id 了，參考下圖</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/serverless/GraphAPIExplorer1.jpg\" alt=\"Graph API 1\"><img src=\"/images/serverless/GraphAPIExplorer2.png\" alt=\"Graph API 2\"></p>\n<p><a name=\"fb-page-webhook-setting\"></a></p>\n<h2 id=\"FB-Page-Webhook-Setting\"><a href=\"#FB-Page-Webhook-Setting\" class=\"headerlink\" title=\"FB Page Webhook Setting\"></a>FB Page Webhook Setting</h2><p>總算快大功告成了，還記得之前一直有提到的 Your_Validation_Token 吧！在設定 webhook 時就會派上用場啦！</p>\n<ul>\n<li>進入 facebook developer app 頁面</li>\n<li>切換到 Messenger 產品分頁</li>\n<li>點選 Setup Webhooks</li>\n<li>接著填入 API Gateway endpoints 的 GET 網址與要跟程式驗證的內容<ul>\n<li>endpoints 網址在發佈時，會顯示在 terminal 上</li>\n<li>或是使用<code>serverless info</code>來檢視資訊</li>\n</ul>\n</li>\n<li>驗證通過後，記得在下方訂閱要執行 bot 的粉絲專頁</li>\n</ul>\n<p><img src=\"/images/serverless/fb-webhook.png\" alt=\"Facebook Webhooks Setting\"><img src=\"/images/serverless/subscribe_page.png\" alt=\"Subscribe Page\"></p>\n<p>如果順利驗證通過，就可以開始跟機器人對話啦！</p>\n<p><img src=\"/images/serverless/chat-sample.jpg\" alt=\"Messenger Chat\"></p>\n<p><a name=\"refrence\"></a></p>\n<h1 id=\"Refrence\"><a href=\"#Refrence\" class=\"headerlink\" title=\"Refrence\"></a>Refrence</h1><p><a href=\"https://serverless.com\">Serverless Framerowk</a><br><a href=\"https://github.com/serverless/serverless\">Serverless Github</a><br><a href=\"http://denny.qollie.com/2016/05/29/sls-fb-bot/\">實作 Serverless 的 facebook messenger bot</a><br><a href=\"http://justserverless.com/blog/building-a-serverless-facebook-messenger-chatbot/\">Building a Serverless Facebook messenger chatbot</a></p>\n"},{"layout":"post","title":"兩台Server雙向同步","author":"Soar Lin","cdn":"header-off","header-img":"","date":"2016-08-28T16:14:49.000Z","_content":"<!-- MarkdownTOC -->\n\n- [兩台 Server 雙向同步](#兩台-server-雙向同步)\n    - [使用排程來同步](#使用排程來同步)\n    - [偵測檔案變化來同步](#偵測檔案變化來同步)\n    - [停止偵測](#停止偵測)\n\n<!-- /MarkdownTOC -->\n\n\n\n<a name=\"兩台-server-雙向同步\"></a>\n# 兩台 Server 雙向同步\n\n- 同步工具 - unison ([參考連結](http://xmodulo.com/synchronize-files-between-two-servers.html))\n- 排程工具 - crontab\n- 目錄偵測工具 - inotifywait ( inotify-tools )\n\n* 請先安裝 unison\n\n````bash\nsudo apt-get install unison\n````\n* 撰寫副檔名為 .prf 的設定檔(e.g. sync.prf)，請在自己的家目錄下新增 .unison 資料夾來放設定檔 ($HOME/.unison)\n* 下面是網站上提供的範例，感覺很夠用了\n\n````bash\n# Two root directories to sync.\n# You can use ssh:// to sync over SSH\nroot = /home/alice/sync_folder\nroot = ssh://dev@192.168.1.10//home/alice/sync_folder\n\n# If you want one-way mirroring from one replica to the other, specify the source replica using \"force\" as follows.\n# force = /home/alice/sync_folder\n\n# If you want Unison to run without any user input, try \"batch\" mode.\nbatch = true\n\n# If you don't want to be prompted, and just accept Unison's recommendation:\nauto = true\n\n# Optionally, you can sync specific sub directories only (under the root).\n# path = dir1\n# path = dir2\n\n# Optionally, you can ignore specific files or directories that are matched with regular expressions.\n# ignore = Name *.o\n# ignore = Name *~\n# ignore = Path */temp/archive_*\n\n# If you want to ignore difference in file props:\nperms = 0\n````\n\n* 確定兩台主機都可以使用 SSH 連到對方，中間牽涉到一些問題，比如：\n    * 登入帳號是否具備有同步目錄以及子目錄的操作權限\n    * 若要排程同步就要注意帳號登入問題，最好是都將對方的 SSH public key 加到 authorize_keys，免密碼登入\n* 執行雙向同步測試，檢查結果\n\n````bash\nunison sync\n````\n\n正常的結果如下：\n\n````bash\nContacting server...\nConnected [//local//home/alice/sync_folder -> //remote_host//home/alice/sync_folder]\nLooking for changes\n  Waiting for changes from server\nReconciling changes\nnew file -->            document1.pdf\n         <-- new file   my.jpg\nPropagating updates\nUNISON 2.40.63 started propagating changes at 21:19:13.65 on 20 Sep 2013\n[BGN] Copying document1.pdf from /home/alice/sync_folder to //remote_host//home/alice/sync_folder\n[BGN] Copying my.jpg from //remote_host//home/alice/sync_folder to /home/alice/sync_folder\n[END] Copying my.jpg\n[END] Copying document1.pdf\nUNISON 2.40.63 finished propagating changes at 21:19:13.68 on 20 Sep 2013\nSaving synchronizer state\nSynchronization complete at 21:19:13  (2 items transferred, 0 skipped, 0 failed)\n````\n\n* 如果出現一些什麼 Permission denied 的訊息，應該就是資料夾權限問題，因為我一直遇到，所以才會一直寫出來，希望別再犯傻\n\n<a name=\"使用排程來同步\"></a>\n## 使用排程來同步\n\n* 若要排程同步，可以使用 crontab，編輯排程工作\n\n````bash\ncrontab -e\n\n# 然後加上指令(下面範例為，每15分鐘同步一次)\n*/15 * * * * /usr/bin/unison sync\n````\n\n\n<a name=\"偵測檔案變化來同步\"></a>\n## 偵測檔案變化來同步\n\n* 覺得排程同步不夠直接，改用事件觸發，當目錄下有新增檔案，就觸發同步指令\n* 監測目錄內檔案是否有新增，使用 inotifywait 指令，需要先安裝 inotify-tools\n\n````\nsudo apt-get install inotify-tools\n````\n\n* 撰寫偵測指令的 script 檔\n\n````bash\nvim watch.sh\n\n# 檔案內容如下\n\n#!/bin/bash\nwhile true; do inotifywait -e create -e moved_to -r 監測目錄 && /usr/bin/unison sync; done\n````\n\n* 更改 script 檔權限為可執行 `chmod a+x watch.sh`\n* 背景執行 script 來常駐偵測動作 `./watch.sh &`\n\n<a name=\"停止偵測\"></a>\n## 停止偵測\n\n* 注意事項，要停止偵測動作的時候，先停止 script 的執行，然後在停止偵測指令\n* 先查詢 script 的 process id `ps aux | grep watch.sh`\n\n````\nubuntu   29247  0.0  0.2  11028  1384 pts/0    S    10:13   0:00 /bin/bash ./watch.sh\n````\n* 刪除 script 的 process `kill 29247`\n* 在查詢 inotifywait 的 process id `ps aux | grep inotifywait`\n\n````bash\nubuntu   29466  0.0  0.1   6596   704 pts/0    S    10:15   0:00 inotifywait -e crea…\n````\n* 刪除偵測的 process `kill 29466`\n","source":"_posts/兩台Server雙向同步.md","raw":"---\nlayout: post\ntitle: 兩台Server雙向同步\nauthor: Soar Lin\ncdn: header-off\nheader-img: ''\ndate: 2016-08-29 00:14:49\ntags:\n - linux\n - sync\n - unison\n - inotifywait\ncategories:\n - Linux\n---\n<!-- MarkdownTOC -->\n\n- [兩台 Server 雙向同步](#兩台-server-雙向同步)\n    - [使用排程來同步](#使用排程來同步)\n    - [偵測檔案變化來同步](#偵測檔案變化來同步)\n    - [停止偵測](#停止偵測)\n\n<!-- /MarkdownTOC -->\n\n\n\n<a name=\"兩台-server-雙向同步\"></a>\n# 兩台 Server 雙向同步\n\n- 同步工具 - unison ([參考連結](http://xmodulo.com/synchronize-files-between-two-servers.html))\n- 排程工具 - crontab\n- 目錄偵測工具 - inotifywait ( inotify-tools )\n\n* 請先安裝 unison\n\n````bash\nsudo apt-get install unison\n````\n* 撰寫副檔名為 .prf 的設定檔(e.g. sync.prf)，請在自己的家目錄下新增 .unison 資料夾來放設定檔 ($HOME/.unison)\n* 下面是網站上提供的範例，感覺很夠用了\n\n````bash\n# Two root directories to sync.\n# You can use ssh:// to sync over SSH\nroot = /home/alice/sync_folder\nroot = ssh://dev@192.168.1.10//home/alice/sync_folder\n\n# If you want one-way mirroring from one replica to the other, specify the source replica using \"force\" as follows.\n# force = /home/alice/sync_folder\n\n# If you want Unison to run without any user input, try \"batch\" mode.\nbatch = true\n\n# If you don't want to be prompted, and just accept Unison's recommendation:\nauto = true\n\n# Optionally, you can sync specific sub directories only (under the root).\n# path = dir1\n# path = dir2\n\n# Optionally, you can ignore specific files or directories that are matched with regular expressions.\n# ignore = Name *.o\n# ignore = Name *~\n# ignore = Path */temp/archive_*\n\n# If you want to ignore difference in file props:\nperms = 0\n````\n\n* 確定兩台主機都可以使用 SSH 連到對方，中間牽涉到一些問題，比如：\n    * 登入帳號是否具備有同步目錄以及子目錄的操作權限\n    * 若要排程同步就要注意帳號登入問題，最好是都將對方的 SSH public key 加到 authorize_keys，免密碼登入\n* 執行雙向同步測試，檢查結果\n\n````bash\nunison sync\n````\n\n正常的結果如下：\n\n````bash\nContacting server...\nConnected [//local//home/alice/sync_folder -> //remote_host//home/alice/sync_folder]\nLooking for changes\n  Waiting for changes from server\nReconciling changes\nnew file -->            document1.pdf\n         <-- new file   my.jpg\nPropagating updates\nUNISON 2.40.63 started propagating changes at 21:19:13.65 on 20 Sep 2013\n[BGN] Copying document1.pdf from /home/alice/sync_folder to //remote_host//home/alice/sync_folder\n[BGN] Copying my.jpg from //remote_host//home/alice/sync_folder to /home/alice/sync_folder\n[END] Copying my.jpg\n[END] Copying document1.pdf\nUNISON 2.40.63 finished propagating changes at 21:19:13.68 on 20 Sep 2013\nSaving synchronizer state\nSynchronization complete at 21:19:13  (2 items transferred, 0 skipped, 0 failed)\n````\n\n* 如果出現一些什麼 Permission denied 的訊息，應該就是資料夾權限問題，因為我一直遇到，所以才會一直寫出來，希望別再犯傻\n\n<a name=\"使用排程來同步\"></a>\n## 使用排程來同步\n\n* 若要排程同步，可以使用 crontab，編輯排程工作\n\n````bash\ncrontab -e\n\n# 然後加上指令(下面範例為，每15分鐘同步一次)\n*/15 * * * * /usr/bin/unison sync\n````\n\n\n<a name=\"偵測檔案變化來同步\"></a>\n## 偵測檔案變化來同步\n\n* 覺得排程同步不夠直接，改用事件觸發，當目錄下有新增檔案，就觸發同步指令\n* 監測目錄內檔案是否有新增，使用 inotifywait 指令，需要先安裝 inotify-tools\n\n````\nsudo apt-get install inotify-tools\n````\n\n* 撰寫偵測指令的 script 檔\n\n````bash\nvim watch.sh\n\n# 檔案內容如下\n\n#!/bin/bash\nwhile true; do inotifywait -e create -e moved_to -r 監測目錄 && /usr/bin/unison sync; done\n````\n\n* 更改 script 檔權限為可執行 `chmod a+x watch.sh`\n* 背景執行 script 來常駐偵測動作 `./watch.sh &`\n\n<a name=\"停止偵測\"></a>\n## 停止偵測\n\n* 注意事項，要停止偵測動作的時候，先停止 script 的執行，然後在停止偵測指令\n* 先查詢 script 的 process id `ps aux | grep watch.sh`\n\n````\nubuntu   29247  0.0  0.2  11028  1384 pts/0    S    10:13   0:00 /bin/bash ./watch.sh\n````\n* 刪除 script 的 process `kill 29247`\n* 在查詢 inotifywait 的 process id `ps aux | grep inotifywait`\n\n````bash\nubuntu   29466  0.0  0.1   6596   704 pts/0    S    10:15   0:00 inotifywait -e crea…\n````\n* 刪除偵測的 process `kill 29466`\n","slug":"兩台Server雙向同步","published":1,"updated":"2016-10-16T02:27:47.000Z","comments":1,"photos":[],"link":"","_id":"ciuq46giq0013scsc51zow24l","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#兩台-server-雙向同步\">兩台 Server 雙向同步</a><ul>\n<li><a href=\"#使用排程來同步\">使用排程來同步</a></li>\n<li><a href=\"#偵測檔案變化來同步\">偵測檔案變化來同步</a></li>\n<li><a href=\"#停止偵測\">停止偵測</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"兩台-server-雙向同步\"></a></p>\n<h1 id=\"兩台-Server-雙向同步\"><a href=\"#兩台-Server-雙向同步\" class=\"headerlink\" title=\"兩台 Server 雙向同步\"></a>兩台 Server 雙向同步</h1><ul>\n<li>同步工具 - unison (<a href=\"http://xmodulo.com/synchronize-files-between-two-servers.html\" target=\"_blank\" rel=\"external\">參考連結</a>)</li>\n<li>排程工具 - crontab</li>\n<li>目錄偵測工具 - inotifywait ( inotify-tools )</li>\n</ul>\n<ul>\n<li>請先安裝 unison</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install unison</div></pre></td></tr></table></figure>\n<ul>\n<li>撰寫副檔名為 .prf 的設定檔(e.g. sync.prf)，請在自己的家目錄下新增 .unison 資料夾來放設定檔 ($HOME/.unison)</li>\n<li>下面是網站上提供的範例，感覺很夠用了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Two root directories to sync.</span></div><div class=\"line\"><span class=\"comment\"># You can use ssh:// to sync over SSH</span></div><div class=\"line\">root = /home/alice/sync_folder</div><div class=\"line\">root = ssh://dev@192.168.1.10//home/alice/sync_folder</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If you want one-way mirroring from one replica to the other, specify the source replica using \"force\" as follows.</span></div><div class=\"line\"><span class=\"comment\"># force = /home/alice/sync_folder</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If you want Unison to run without any user input, try \"batch\" mode.</span></div><div class=\"line\">batch = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If you don't want to be prompted, and just accept Unison's recommendation:</span></div><div class=\"line\">auto = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optionally, you can sync specific sub directories only (under the root).</span></div><div class=\"line\"><span class=\"comment\"># path = dir1</span></div><div class=\"line\"><span class=\"comment\"># path = dir2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optionally, you can ignore specific files or directories that are matched with regular expressions.</span></div><div class=\"line\"><span class=\"comment\"># ignore = Name *.o</span></div><div class=\"line\"><span class=\"comment\"># ignore = Name *~</span></div><div class=\"line\"><span class=\"comment\"># ignore = Path */temp/archive_*</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If you want to ignore difference in file props:</span></div><div class=\"line\">perms = 0</div></pre></td></tr></table></figure>\n<ul>\n<li>確定兩台主機都可以使用 SSH 連到對方，中間牽涉到一些問題，比如：<ul>\n<li>登入帳號是否具備有同步目錄以及子目錄的操作權限</li>\n<li>若要排程同步就要注意帳號登入問題，最好是都將對方的 SSH public key 加到 authorize_keys，免密碼登入</li>\n</ul>\n</li>\n<li>執行雙向同步測試，檢查結果</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">unison sync</div></pre></td></tr></table></figure>\n<p>正常的結果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">Contacting server...</div><div class=\"line\">Connected [//<span class=\"built_in\">local</span>//home/alice/sync_folder -&gt; //remote_host//home/alice/sync_folder]</div><div class=\"line\">Looking <span class=\"keyword\">for</span> changes</div><div class=\"line\">  Waiting <span class=\"keyword\">for</span> changes from server</div><div class=\"line\">Reconciling changes</div><div class=\"line\">new file --&gt;            document1.pdf</div><div class=\"line\">         &lt;-- new file   my.jpg</div><div class=\"line\">Propagating updates</div><div class=\"line\">UNISON 2.40.63 started propagating changes at 21:19:13.65 on 20 Sep 2013</div><div class=\"line\">[BGN] Copying document1.pdf from /home/alice/sync_folder to //remote_host//home/alice/sync_folder</div><div class=\"line\">[BGN] Copying my.jpg from //remote_host//home/alice/sync_folder to /home/alice/sync_folder</div><div class=\"line\">[END] Copying my.jpg</div><div class=\"line\">[END] Copying document1.pdf</div><div class=\"line\">UNISON 2.40.63 finished propagating changes at 21:19:13.68 on 20 Sep 2013</div><div class=\"line\">Saving synchronizer state</div><div class=\"line\">Synchronization complete at 21:19:13  (2 items transferred, 0 skipped, 0 failed)</div></pre></td></tr></table></figure>\n<ul>\n<li>如果出現一些什麼 Permission denied 的訊息，應該就是資料夾權限問題，因為我一直遇到，所以才會一直寫出來，希望別再犯傻</li>\n</ul>\n<p><a name=\"使用排程來同步\"></a></p>\n<h2 id=\"使用排程來同步\"><a href=\"#使用排程來同步\" class=\"headerlink\" title=\"使用排程來同步\"></a>使用排程來同步</h2><ul>\n<li>若要排程同步，可以使用 crontab，編輯排程工作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">crontab <span class=\"_\">-e</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 然後加上指令(下面範例為，每15分鐘同步一次)</span></div><div class=\"line\">*/15 * * * * /usr/bin/unison sync</div></pre></td></tr></table></figure>\n<p><a name=\"偵測檔案變化來同步\"></a></p>\n<h2 id=\"偵測檔案變化來同步\"><a href=\"#偵測檔案變化來同步\" class=\"headerlink\" title=\"偵測檔案變化來同步\"></a>偵測檔案變化來同步</h2><ul>\n<li>覺得排程同步不夠直接，改用事件觸發，當目錄下有新增檔案，就觸發同步指令</li>\n<li>監測目錄內檔案是否有新增，使用 inotifywait 指令，需要先安裝 inotify-tools</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install inotify-tools</div></pre></td></tr></table></figure>\n<ul>\n<li>撰寫偵測指令的 script 檔</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">vim watch.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 檔案內容如下</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span> inotifywait <span class=\"_\">-e</span> create <span class=\"_\">-e</span> moved_to -r 監測目錄 &amp;&amp; /usr/bin/unison sync; <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<ul>\n<li>更改 script 檔權限為可執行 <code>chmod a+x watch.sh</code></li>\n<li>背景執行 script 來常駐偵測動作 <code>./watch.sh &amp;</code></li>\n</ul>\n<p><a name=\"停止偵測\"></a></p>\n<h2 id=\"停止偵測\"><a href=\"#停止偵測\" class=\"headerlink\" title=\"停止偵測\"></a>停止偵測</h2><ul>\n<li>注意事項，要停止偵測動作的時候，先停止 script 的執行，然後在停止偵測指令</li>\n<li>先查詢 script 的 process id <code>ps aux | grep watch.sh</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ubuntu   29247  0.0  0.2  11028  1384 pts/0    S    10:13   0:00 /bin/bash ./watch.sh</div></pre></td></tr></table></figure>\n<ul>\n<li>刪除 script 的 process <code>kill 29247</code></li>\n<li>在查詢 inotifywait 的 process id <code>ps aux | grep inotifywait</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">ubuntu   29466  0.0  0.1   6596   704 pts/0    S    10:15   0:00 inotifywait <span class=\"_\">-e</span> crea…</div></pre></td></tr></table></figure>\n<ul>\n<li>刪除偵測的 process <code>kill 29466</code></li>\n</ul>\n","excerpt":"","more":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#兩台-server-雙向同步\">兩台 Server 雙向同步</a><ul>\n<li><a href=\"#使用排程來同步\">使用排程來同步</a></li>\n<li><a href=\"#偵測檔案變化來同步\">偵測檔案變化來同步</a></li>\n<li><a href=\"#停止偵測\">停止偵測</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<p><a name=\"兩台-server-雙向同步\"></a></p>\n<h1 id=\"兩台-Server-雙向同步\"><a href=\"#兩台-Server-雙向同步\" class=\"headerlink\" title=\"兩台 Server 雙向同步\"></a>兩台 Server 雙向同步</h1><ul>\n<li>同步工具 - unison (<a href=\"http://xmodulo.com/synchronize-files-between-two-servers.html\">參考連結</a>)</li>\n<li>排程工具 - crontab</li>\n<li>目錄偵測工具 - inotifywait ( inotify-tools )</li>\n</ul>\n<ul>\n<li>請先安裝 unison</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install unison</div></pre></td></tr></table></figure>\n<ul>\n<li>撰寫副檔名為 .prf 的設定檔(e.g. sync.prf)，請在自己的家目錄下新增 .unison 資料夾來放設定檔 ($HOME/.unison)</li>\n<li>下面是網站上提供的範例，感覺很夠用了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Two root directories to sync.</span></div><div class=\"line\"><span class=\"comment\"># You can use ssh:// to sync over SSH</span></div><div class=\"line\">root = /home/alice/sync_folder</div><div class=\"line\">root = ssh://dev@192.168.1.10//home/alice/sync_folder</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If you want one-way mirroring from one replica to the other, specify the source replica using \"force\" as follows.</span></div><div class=\"line\"><span class=\"comment\"># force = /home/alice/sync_folder</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If you want Unison to run without any user input, try \"batch\" mode.</span></div><div class=\"line\">batch = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If you don't want to be prompted, and just accept Unison's recommendation:</span></div><div class=\"line\">auto = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optionally, you can sync specific sub directories only (under the root).</span></div><div class=\"line\"><span class=\"comment\"># path = dir1</span></div><div class=\"line\"><span class=\"comment\"># path = dir2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optionally, you can ignore specific files or directories that are matched with regular expressions.</span></div><div class=\"line\"><span class=\"comment\"># ignore = Name *.o</span></div><div class=\"line\"><span class=\"comment\"># ignore = Name *~</span></div><div class=\"line\"><span class=\"comment\"># ignore = Path */temp/archive_*</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If you want to ignore difference in file props:</span></div><div class=\"line\">perms = 0</div></pre></td></tr></table></figure>\n<ul>\n<li>確定兩台主機都可以使用 SSH 連到對方，中間牽涉到一些問題，比如：<ul>\n<li>登入帳號是否具備有同步目錄以及子目錄的操作權限</li>\n<li>若要排程同步就要注意帳號登入問題，最好是都將對方的 SSH public key 加到 authorize_keys，免密碼登入</li>\n</ul>\n</li>\n<li>執行雙向同步測試，檢查結果</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">unison sync</div></pre></td></tr></table></figure>\n<p>正常的結果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">Contacting server...</div><div class=\"line\">Connected [//<span class=\"built_in\">local</span>//home/alice/sync_folder -&gt; //remote_host//home/alice/sync_folder]</div><div class=\"line\">Looking <span class=\"keyword\">for</span> changes</div><div class=\"line\">  Waiting <span class=\"keyword\">for</span> changes from server</div><div class=\"line\">Reconciling changes</div><div class=\"line\">new file --&gt;            document1.pdf</div><div class=\"line\">         &lt;-- new file   my.jpg</div><div class=\"line\">Propagating updates</div><div class=\"line\">UNISON 2.40.63 started propagating changes at 21:19:13.65 on 20 Sep 2013</div><div class=\"line\">[BGN] Copying document1.pdf from /home/alice/sync_folder to //remote_host//home/alice/sync_folder</div><div class=\"line\">[BGN] Copying my.jpg from //remote_host//home/alice/sync_folder to /home/alice/sync_folder</div><div class=\"line\">[END] Copying my.jpg</div><div class=\"line\">[END] Copying document1.pdf</div><div class=\"line\">UNISON 2.40.63 finished propagating changes at 21:19:13.68 on 20 Sep 2013</div><div class=\"line\">Saving synchronizer state</div><div class=\"line\">Synchronization complete at 21:19:13  (2 items transferred, 0 skipped, 0 failed)</div></pre></td></tr></table></figure>\n<ul>\n<li>如果出現一些什麼 Permission denied 的訊息，應該就是資料夾權限問題，因為我一直遇到，所以才會一直寫出來，希望別再犯傻</li>\n</ul>\n<p><a name=\"使用排程來同步\"></a></p>\n<h2 id=\"使用排程來同步\"><a href=\"#使用排程來同步\" class=\"headerlink\" title=\"使用排程來同步\"></a>使用排程來同步</h2><ul>\n<li>若要排程同步，可以使用 crontab，編輯排程工作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">crontab <span class=\"_\">-e</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 然後加上指令(下面範例為，每15分鐘同步一次)</span></div><div class=\"line\">*/15 * * * * /usr/bin/unison sync</div></pre></td></tr></table></figure>\n<p><a name=\"偵測檔案變化來同步\"></a></p>\n<h2 id=\"偵測檔案變化來同步\"><a href=\"#偵測檔案變化來同步\" class=\"headerlink\" title=\"偵測檔案變化來同步\"></a>偵測檔案變化來同步</h2><ul>\n<li>覺得排程同步不夠直接，改用事件觸發，當目錄下有新增檔案，就觸發同步指令</li>\n<li>監測目錄內檔案是否有新增，使用 inotifywait 指令，需要先安裝 inotify-tools</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install inotify-tools</div></pre></td></tr></table></figure>\n<ul>\n<li>撰寫偵測指令的 script 檔</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">vim watch.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 檔案內容如下</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span> inotifywait <span class=\"_\">-e</span> create <span class=\"_\">-e</span> moved_to -r 監測目錄 &amp;&amp; /usr/bin/unison sync; <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<ul>\n<li>更改 script 檔權限為可執行 <code>chmod a+x watch.sh</code></li>\n<li>背景執行 script 來常駐偵測動作 <code>./watch.sh &amp;</code></li>\n</ul>\n<p><a name=\"停止偵測\"></a></p>\n<h2 id=\"停止偵測\"><a href=\"#停止偵測\" class=\"headerlink\" title=\"停止偵測\"></a>停止偵測</h2><ul>\n<li>注意事項，要停止偵測動作的時候，先停止 script 的執行，然後在停止偵測指令</li>\n<li>先查詢 script 的 process id <code>ps aux | grep watch.sh</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ubuntu   29247  0.0  0.2  11028  1384 pts/0    S    10:13   0:00 /bin/bash ./watch.sh</div></pre></td></tr></table></figure>\n<ul>\n<li>刪除 script 的 process <code>kill 29247</code></li>\n<li>在查詢 inotifywait 的 process id <code>ps aux | grep inotifywait</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">ubuntu   29466  0.0  0.1   6596   704 pts/0    S    10:15   0:00 inotifywait <span class=\"_\">-e</span> crea…</div></pre></td></tr></table></figure>\n<ul>\n<li>刪除偵測的 process <code>kill 29466</code></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciuq46ggy0001scsc6zb8g45f","category_id":"ciuq46ghe0006scsczorsu4g3","_id":"ciuq46ghv000dscscj9ohd45d"},{"post_id":"ciuq46gho000ascsc53w21j34","category_id":"ciuq46ghe0006scsczorsu4g3","_id":"ciuq46gi0000hscscxk3byus6"},{"post_id":"ciuq46gh50003scsc15z7w9qv","category_id":"ciuq46ghp000bscsc8j5l42ay","_id":"ciuq46gi7000kscscrclsvcdl"},{"post_id":"ciuq46ghg0007scsc2yfhmnht","category_id":"ciuq46ghe0006scsczorsu4g3","_id":"ciuq46gic000pscscm3xo0gk7"},{"post_id":"ciuq46gi4000jscsccgxjfxqk","category_id":"ciuq46ghe0006scsczorsu4g3","_id":"ciuq46gij000tscscadse00o3"},{"post_id":"ciuq46ghk0008scscz9pt9ogk","category_id":"ciuq46gi7000lscsc1u1kunvh","_id":"ciuq46gin000wscsc2vjigmuz"},{"post_id":"ciuq46gif000sscsckwik4edg","category_id":"ciuq46ghe0006scsczorsu4g3","_id":"ciuq46giq0012scscrvt9zrvv"},{"post_id":"ciuq46ghq000cscscdfl3fwkh","category_id":"ciuq46gic000qscscfvkgohol","_id":"ciuq46giv0015scscamkrlhrf"},{"post_id":"ciuq46ghw000escscjh3gievj","category_id":"ciuq46gic000qscscfvkgohol","_id":"ciuq46giy0018scscrnu13sjo"},{"post_id":"ciuq46giq0013scsc51zow24l","category_id":"ciuq46gi7000lscsc1u1kunvh","_id":"ciuq46giy001bscscs3tacckf"},{"post_id":"ciuq46gi1000iscscn0zx4lhp","category_id":"ciuq46gic000qscscfvkgohol","_id":"ciuq46giy001dscscoog6b6zf"},{"post_id":"ciuq46gi8000nscscnnxu7nfr","category_id":"ciuq46giy0019scscm16zxht3","_id":"ciuq46gj0001iscsctiqcw7yr"},{"post_id":"ciuq46gi9000oscsczuv0j0oq","category_id":"ciuq46giy001escsci2awzypg","_id":"ciuq46gj0001lscscif76k7iw"},{"post_id":"ciuq46gik000vscsc3fwbu3gk","category_id":"ciuq46gj0001jscscpawdmypt","_id":"ciuq46gj2001oscscgjyh0idu"},{"post_id":"ciuq46gio0010scsc127yqbu1","category_id":"ciuq46giy0019scscm16zxht3","_id":"ciuq46gj4001qscscusv9rf5i"}],"PostTag":[{"post_id":"ciuq46ggy0001scsc6zb8g45f","tag_id":"ciuq46ghb0005scsch4c1dfjk","_id":"ciuq46gij000uscsc5p0euoj2"},{"post_id":"ciuq46ggy0001scsc6zb8g45f","tag_id":"ciuq46gho0009scsct9hl1v2a","_id":"ciuq46gin000xscsccx0j7ccl"},{"post_id":"ciuq46ggy0001scsc6zb8g45f","tag_id":"ciuq46ghy000fscsc1ap6otm1","_id":"ciuq46giq0011scsc1hi1e1av"},{"post_id":"ciuq46ggy0001scsc6zb8g45f","tag_id":"ciuq46gi7000mscsczjiyscqn","_id":"ciuq46giv0014scsc2xpmqmty"},{"post_id":"ciuq46gh50003scsc15z7w9qv","tag_id":"ciuq46gie000rscscw3ibhkq1","_id":"ciuq46giy001cscsctky0n0o9"},{"post_id":"ciuq46gh50003scsc15z7w9qv","tag_id":"ciuq46gin000zscsca88jr4i0","_id":"ciuq46giz001fscsczal1h4i4"},{"post_id":"ciuq46gh50003scsc15z7w9qv","tag_id":"ciuq46giw0017scscf2ccbuvf","_id":"ciuq46gj0001hscsclx06lbsx"},{"post_id":"ciuq46ghg0007scsc2yfhmnht","tag_id":"ciuq46giy001ascscd4bs4ixz","_id":"ciuq46gj6001sscsc7ialcvdt"},{"post_id":"ciuq46ghg0007scsc2yfhmnht","tag_id":"ciuq46giz001gscsc0cxw21ie","_id":"ciuq46gj6001tscsckou32dps"},{"post_id":"ciuq46ghg0007scsc2yfhmnht","tag_id":"ciuq46gj0001kscscezljzmqf","_id":"ciuq46gj7001vscscdl63b5dr"},{"post_id":"ciuq46ghg0007scsc2yfhmnht","tag_id":"ciuq46gj1001nscsc80pofmi7","_id":"ciuq46gj7001wscsc4rvt491b"},{"post_id":"ciuq46ghg0007scsc2yfhmnht","tag_id":"ciuq46gj3001pscscpj6yo37q","_id":"ciuq46gj8001yscsck61x1gvt"},{"post_id":"ciuq46ghk0008scscz9pt9ogk","tag_id":"ciuq46gj4001rscsch2l99hky","_id":"ciuq46gj90020scsc7c5w4nxx"},{"post_id":"ciuq46ghk0008scscz9pt9ogk","tag_id":"ciuq46gj6001uscscidwb5dw9","_id":"ciuq46gj90021scscc9riun7g"},{"post_id":"ciuq46ghk0008scscz9pt9ogk","tag_id":"ciuq46gj7001xscscvtg9kope","_id":"ciuq46gj90023scsct4ekc3bb"},{"post_id":"ciuq46gho000ascsc53w21j34","tag_id":"ciuq46giz001gscsc0cxw21ie","_id":"ciuq46gjb0028scscoqu282b6"},{"post_id":"ciuq46gho000ascsc53w21j34","tag_id":"ciuq46gj90022scscpo5x88c1","_id":"ciuq46gjb0029scscw3dppmql"},{"post_id":"ciuq46gho000ascsc53w21j34","tag_id":"ciuq46gj0001kscscezljzmqf","_id":"ciuq46gjc002bscsco7lzx0y1"},{"post_id":"ciuq46gho000ascsc53w21j34","tag_id":"ciuq46gj1001nscsc80pofmi7","_id":"ciuq46gjd002cscscpghui2fe"},{"post_id":"ciuq46gho000ascsc53w21j34","tag_id":"ciuq46gja0026scsc0ym9li2e","_id":"ciuq46gjd002escscrdfgffkp"},{"post_id":"ciuq46ghq000cscscdfl3fwkh","tag_id":"ciuq46gjb0027scsclh369tk9","_id":"ciuq46gjd002gscscodvt24eh"},{"post_id":"ciuq46ghq000cscscdfl3fwkh","tag_id":"ciuq46gjc002ascsc5mj0npf3","_id":"ciuq46gjd002hscscyjb1tyhf"},{"post_id":"ciuq46ghq000cscscdfl3fwkh","tag_id":"ciuq46gjd002dscscrbaggclf","_id":"ciuq46gjf002jscsc1fo4v0hq"},{"post_id":"ciuq46ghw000escscjh3gievj","tag_id":"ciuq46gjb0027scsclh369tk9","_id":"ciuq46gjf002mscscypcgtbqv"},{"post_id":"ciuq46ghw000escscjh3gievj","tag_id":"ciuq46gjc002ascsc5mj0npf3","_id":"ciuq46gjf002nscscltne14hr"},{"post_id":"ciuq46ghw000escscjh3gievj","tag_id":"ciuq46gjd002dscscrbaggclf","_id":"ciuq46gjg002pscsch1dc7ws8"},{"post_id":"ciuq46gi1000iscscn0zx4lhp","tag_id":"ciuq46gjb0027scsclh369tk9","_id":"ciuq46gjg002sscscnejgc7fg"},{"post_id":"ciuq46gi1000iscscn0zx4lhp","tag_id":"ciuq46gjc002ascsc5mj0npf3","_id":"ciuq46gjh002tscscj3v6g9qj"},{"post_id":"ciuq46gi1000iscscn0zx4lhp","tag_id":"ciuq46gjd002dscscrbaggclf","_id":"ciuq46gjh002vscsc5g9wln8d"},{"post_id":"ciuq46gi4000jscsccgxjfxqk","tag_id":"ciuq46giz001gscsc0cxw21ie","_id":"ciuq46gjj0030scscs8dtzlzw"},{"post_id":"ciuq46gi4000jscsccgxjfxqk","tag_id":"ciuq46gj0001kscscezljzmqf","_id":"ciuq46gjj0031scsc5pgmg9pb"},{"post_id":"ciuq46gi4000jscsccgxjfxqk","tag_id":"ciuq46gj1001nscsc80pofmi7","_id":"ciuq46gjj0033scsc4vz727fl"},{"post_id":"ciuq46gi4000jscsccgxjfxqk","tag_id":"ciuq46gjh002xscscxkcehyv4","_id":"ciuq46gjj0034scscwiedhadk"},{"post_id":"ciuq46gi4000jscsccgxjfxqk","tag_id":"ciuq46gj3001pscscpj6yo37q","_id":"ciuq46gjj0036scsctxcz9cds"},{"post_id":"ciuq46gi8000nscscnnxu7nfr","tag_id":"ciuq46gji002zscsct0lqgvi2","_id":"ciuq46gjk0039scscufvvw3ib"},{"post_id":"ciuq46gi8000nscscnnxu7nfr","tag_id":"ciuq46gjj0032scsc5ijrae2v","_id":"ciuq46gjk003ascscj7nhfce4"},{"post_id":"ciuq46gi8000nscscnnxu7nfr","tag_id":"ciuq46gjj0035scscp4tbsdc6","_id":"ciuq46gjk003cscscou1cr1m4"},{"post_id":"ciuq46gi8000nscscnnxu7nfr","tag_id":"ciuq46gjk0037scscy8w5wg0d","_id":"ciuq46gjk003dscscz2j0fo73"},{"post_id":"ciuq46gi9000oscsczuv0j0oq","tag_id":"ciuq46gjk0038scscfp4e8j23","_id":"ciuq46gjl003hscsc11iuylqj"},{"post_id":"ciuq46gi9000oscsczuv0j0oq","tag_id":"ciuq46gjk003bscscylmb4dtl","_id":"ciuq46gjl003iscscnvgv2uzw"},{"post_id":"ciuq46gi9000oscsczuv0j0oq","tag_id":"ciuq46gjk003escscbr7blnhq","_id":"ciuq46gjl003kscscifr58kmj"},{"post_id":"ciuq46gi9000oscsczuv0j0oq","tag_id":"ciuq46gjl003fscscc3bfak1s","_id":"ciuq46gjl003lscsclmhta3qe"},{"post_id":"ciuq46gif000sscsckwik4edg","tag_id":"ciuq46gjl003gscsc9rag8nyu","_id":"ciuq46gjm003nscsc5atmphbd"},{"post_id":"ciuq46gif000sscsckwik4edg","tag_id":"ciuq46gjl003jscsczidow60k","_id":"ciuq46gjn003oscsckidoh37m"},{"post_id":"ciuq46gio0010scsc127yqbu1","tag_id":"ciuq46gjj0035scscp4tbsdc6","_id":"ciuq46gjq003vscsck732bss3"},{"post_id":"ciuq46gio0010scsc127yqbu1","tag_id":"ciuq46gjn003pscscqm7ell58","_id":"ciuq46gjr003wscscn8by0pb2"},{"post_id":"ciuq46gio0010scsc127yqbu1","tag_id":"ciuq46gjn003qscscpl15ez5i","_id":"ciuq46gjr003yscsc0fzbk5e7"},{"post_id":"ciuq46gio0010scsc127yqbu1","tag_id":"ciuq46gjo003rscscok17mg2p","_id":"ciuq46gjt003zscscj5p23jkl"},{"post_id":"ciuq46gio0010scsc127yqbu1","tag_id":"ciuq46gjo003sscscz59yn35k","_id":"ciuq46gjt0041scsc5qtodos5"},{"post_id":"ciuq46gio0010scsc127yqbu1","tag_id":"ciuq46gjq003tscsc48d1o44t","_id":"ciuq46gjt0042scscdt3gp0ad"},{"post_id":"ciuq46giq0013scsc51zow24l","tag_id":"ciuq46gj4001rscsch2l99hky","_id":"ciuq46gjv0044scsczrhbhovl"},{"post_id":"ciuq46giq0013scsc51zow24l","tag_id":"ciuq46gjr003xscsc1twyyt3p","_id":"ciuq46gjv0045scscdsdxtk4d"},{"post_id":"ciuq46giq0013scsc51zow24l","tag_id":"ciuq46gjt0040scscx3p6sgan","_id":"ciuq46gjv0046scsc3fteq65m"},{"post_id":"ciuq46giq0013scsc51zow24l","tag_id":"ciuq46gju0043scscrcuj8otb","_id":"ciuq46gjv0047scsc3n4m7vn7"}],"Tag":[{"name":"background","_id":"ciuq46ghb0005scsch4c1dfjk"},{"name":"animation","_id":"ciuq46gho0009scsct9hl1v2a"},{"name":"transform","_id":"ciuq46ghy000fscsc1ap6otm1"},{"name":"transition","_id":"ciuq46gi7000mscsczjiyscqn"},{"name":"Laravel","_id":"ciuq46gie000rscscw3ibhkq1"},{"name":"artisan","_id":"ciuq46gin000zscsca88jr4i0"},{"name":"elixir","_id":"ciuq46giw0017scscf2ccbuvf"},{"name":"less","_id":"ciuq46giy001ascscd4bs4ixz"},{"name":"mixins","_id":"ciuq46giz001gscsc0cxw21ie"},{"name":"RWD","_id":"ciuq46gj0001kscscezljzmqf"},{"name":"color","_id":"ciuq46gj1001nscsc80pofmi7"},{"name":"css-preprocessor","_id":"ciuq46gj3001pscscpj6yo37q"},{"name":"linux","_id":"ciuq46gj4001rscsch2l99hky"},{"name":"crontab","_id":"ciuq46gj6001uscscidwb5dw9"},{"name":"mount","_id":"ciuq46gj7001xscscvtg9kope"},{"name":"postcss","_id":"ciuq46gj90022scscpo5x88c1"},{"name":"css-post-processor","_id":"ciuq46gja0026scsc0ym9li2e"},{"name":"SPRINT","_id":"ciuq46gjb0027scsclh369tk9"},{"name":"衝刺計畫","_id":"ciuq46gjc002ascsc5mj0npf3"},{"name":"Prototype","_id":"ciuq46gjd002dscscrbaggclf"},{"name":"sass","_id":"ciuq46gjh002xscscxkcehyv4"},{"name":"s3","_id":"ciuq46gji002zscsct0lqgvi2"},{"name":"elastictranscoder","_id":"ciuq46gjj0032scsc5ijrae2v"},{"name":"lambda","_id":"ciuq46gjj0035scscp4tbsdc6"},{"name":"node.js","_id":"ciuq46gjk0037scscy8w5wg0d"},{"name":"git","_id":"ciuq46gjk0038scscfp4e8j23"},{"name":"git server","_id":"ciuq46gjk003bscscylmb4dtl"},{"name":"gitolite","_id":"ciuq46gjk003escscbr7blnhq"},{"name":"gitweb","_id":"ciuq46gjl003fscscc3bfak1s"},{"name":"webpack","_id":"ciuq46gjl003gscsc9rag8nyu"},{"name":"npm","_id":"ciuq46gjl003jscsczidow60k"},{"name":"serverless","_id":"ciuq46gjn003pscscqm7ell58"},{"name":"apigateway","_id":"ciuq46gjn003qscscpl15ez5i"},{"name":"webhook","_id":"ciuq46gjo003rscscok17mg2p"},{"name":"facebook","_id":"ciuq46gjo003sscscz59yn35k"},{"name":"messenger","_id":"ciuq46gjq003tscsc48d1o44t"},{"name":"sync","_id":"ciuq46gjr003xscsc1twyyt3p"},{"name":"unison","_id":"ciuq46gjt0040scscx3p6sgan"},{"name":"inotifywait","_id":"ciuq46gju0043scscrcuj8otb"}]}}